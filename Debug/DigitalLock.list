
DigitalLock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002780  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08002908  08002908  00012908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a14  08002a14  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002a14  08002a14  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a14  08002a14  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a14  08002a14  00012a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a18  08002a18  00012a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000078  08002a94  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08002a94  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000068ec  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017b7  00000000  00000000  000269d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  00028190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000516  00000000  00000000  00028898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025cdc  00000000  00000000  00028dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007c1b  00000000  00000000  0004ea8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8ac9  00000000  00000000  000566a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002064  00000000  00000000  0013f170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001411d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080028f0 	.word	0x080028f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	080028f0 	.word	0x080028f0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <initKeypad>:
		{'1', '2', '3', 'A'},
		{'4', '5', '6', 'B'},
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'}
};
void initKeypad(void){
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	// turns on clock to GPIO bank B
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 80001f0:	4b14      	ldr	r3, [pc, #80]	; (8000244 <initKeypad+0x58>)
 80001f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f4:	4a13      	ldr	r2, [pc, #76]	; (8000244 <initKeypad+0x58>)
 80001f6:	f043 0302 	orr.w	r3, r3, #2
 80001fa:	64d3      	str	r3, [r2, #76]	; 0x4c
	// Configure GPIO pins for rows (output)
	// GPIOB pins 0-3 for rows (output)
	GPIOB->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <initKeypad+0x5c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a11      	ldr	r2, [pc, #68]	; (8000248 <initKeypad+0x5c>)
 8000202:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000206:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0;
 8000208:	4b0f      	ldr	r3, [pc, #60]	; (8000248 <initKeypad+0x5c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a0e      	ldr	r2, [pc, #56]	; (8000248 <initKeypad+0x5c>)
 800020e:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8000212:	6013      	str	r3, [r2, #0]

	// Configure GPIO pins for columns (input with pull-up)
	// GPIOB pins 4-7 for columns (input with pull-up)
	GPIOB->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 8000214:	4b0c      	ldr	r3, [pc, #48]	; (8000248 <initKeypad+0x5c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a0b      	ldr	r2, [pc, #44]	; (8000248 <initKeypad+0x5c>)
 800021a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800021e:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 8000220:	4b09      	ldr	r3, [pc, #36]	; (8000248 <initKeypad+0x5c>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	4a08      	ldr	r2, [pc, #32]	; (8000248 <initKeypad+0x5c>)
 8000226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800022a:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD4_0 | GPIO_PUPDR_PUPD5_0 | GPIO_PUPDR_PUPD6_0 | GPIO_PUPDR_PUPD7_0;
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <initKeypad+0x5c>)
 800022e:	68db      	ldr	r3, [r3, #12]
 8000230:	4a05      	ldr	r2, [pc, #20]	; (8000248 <initKeypad+0x5c>)
 8000232:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8000236:	60d3      	str	r3, [r2, #12]

	return;
 8000238:	bf00      	nop
}
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	40021000 	.word	0x40021000
 8000248:	48000400 	.word	0x48000400

0800024c <readKeypad>:

int readKeypad(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
	// Make ROWs LOW and all other ROWs HIGH
	for (int row = 0; row < 4; row++) {
 8000252:	2300      	movs	r3, #0
 8000254:	607b      	str	r3, [r7, #4]
 8000256:	e0fb      	b.n	8000450 <readKeypad+0x204>
		// Pull the current ROW low
		switch (row) {
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2b03      	cmp	r3, #3
 800025c:	d822      	bhi.n	80002a4 <readKeypad+0x58>
 800025e:	a201      	add	r2, pc, #4	; (adr r2, 8000264 <readKeypad+0x18>)
 8000260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000264:	08000275 	.word	0x08000275
 8000268:	08000281 	.word	0x08000281
 800026c:	0800028d 	.word	0x0800028d
 8000270:	08000299 	.word	0x08000299
			case 0:
				HAL_GPIO_WritePin(R1_PORT, R1_PIN, GPIO_PIN_RESET);
 8000274:	2200      	movs	r2, #0
 8000276:	2101      	movs	r1, #1
 8000278:	487a      	ldr	r0, [pc, #488]	; (8000464 <readKeypad+0x218>)
 800027a:	f001 f830 	bl	80012de <HAL_GPIO_WritePin>
				break;
 800027e:	e012      	b.n	80002a6 <readKeypad+0x5a>
			case 1:
				HAL_GPIO_WritePin(R2_PORT, R2_PIN, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2102      	movs	r1, #2
 8000284:	4877      	ldr	r0, [pc, #476]	; (8000464 <readKeypad+0x218>)
 8000286:	f001 f82a 	bl	80012de <HAL_GPIO_WritePin>
				break;
 800028a:	e00c      	b.n	80002a6 <readKeypad+0x5a>
			case 2:
				HAL_GPIO_WritePin(R3_PORT, R3_PIN, GPIO_PIN_RESET);
 800028c:	2200      	movs	r2, #0
 800028e:	2104      	movs	r1, #4
 8000290:	4874      	ldr	r0, [pc, #464]	; (8000464 <readKeypad+0x218>)
 8000292:	f001 f824 	bl	80012de <HAL_GPIO_WritePin>
				break;
 8000296:	e006      	b.n	80002a6 <readKeypad+0x5a>
			case 3:
				HAL_GPIO_WritePin(R4_PORT, R4_PIN, GPIO_PIN_RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	2108      	movs	r1, #8
 800029c:	4871      	ldr	r0, [pc, #452]	; (8000464 <readKeypad+0x218>)
 800029e:	f001 f81e 	bl	80012de <HAL_GPIO_WritePin>
				break;
 80002a2:	e000      	b.n	80002a6 <readKeypad+0x5a>
			default:
				break;
 80002a4:	bf00      	nop
		}

		// Check each column
		for (int col = 0; col < 4; col++) {
 80002a6:	2300      	movs	r3, #0
 80002a8:	603b      	str	r3, [r7, #0]
 80002aa:	e0a3      	b.n	80003f4 <readKeypad+0x1a8>
			// Pull the current COLUMN high
			switch (col) {
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	2b03      	cmp	r3, #3
 80002b0:	d822      	bhi.n	80002f8 <readKeypad+0xac>
 80002b2:	a201      	add	r2, pc, #4	; (adr r2, 80002b8 <readKeypad+0x6c>)
 80002b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b8:	080002c9 	.word	0x080002c9
 80002bc:	080002d5 	.word	0x080002d5
 80002c0:	080002e1 	.word	0x080002e1
 80002c4:	080002ed 	.word	0x080002ed
				case 0:
					HAL_GPIO_WritePin(C1_PORT, C1_PIN, GPIO_PIN_SET);
 80002c8:	2201      	movs	r2, #1
 80002ca:	2110      	movs	r1, #16
 80002cc:	4865      	ldr	r0, [pc, #404]	; (8000464 <readKeypad+0x218>)
 80002ce:	f001 f806 	bl	80012de <HAL_GPIO_WritePin>
					break;
 80002d2:	e012      	b.n	80002fa <readKeypad+0xae>
				case 1:
					HAL_GPIO_WritePin(C2_PORT, C2_PIN, GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2120      	movs	r1, #32
 80002d8:	4862      	ldr	r0, [pc, #392]	; (8000464 <readKeypad+0x218>)
 80002da:	f001 f800 	bl	80012de <HAL_GPIO_WritePin>
					break;
 80002de:	e00c      	b.n	80002fa <readKeypad+0xae>
				case 2:
					HAL_GPIO_WritePin(C3_PORT, C3_PIN, GPIO_PIN_SET);
 80002e0:	2201      	movs	r2, #1
 80002e2:	2140      	movs	r1, #64	; 0x40
 80002e4:	485f      	ldr	r0, [pc, #380]	; (8000464 <readKeypad+0x218>)
 80002e6:	f000 fffa 	bl	80012de <HAL_GPIO_WritePin>
					break;
 80002ea:	e006      	b.n	80002fa <readKeypad+0xae>
				case 3:
					HAL_GPIO_WritePin(C4_PORT, C4_PIN, GPIO_PIN_SET);
 80002ec:	2201      	movs	r2, #1
 80002ee:	2180      	movs	r1, #128	; 0x80
 80002f0:	485c      	ldr	r0, [pc, #368]	; (8000464 <readKeypad+0x218>)
 80002f2:	f000 fff4 	bl	80012de <HAL_GPIO_WritePin>
					break;
 80002f6:	e000      	b.n	80002fa <readKeypad+0xae>
				default:
					break;
 80002f8:	bf00      	nop
			}

			// Check if the button is pressed
			if (!HAL_GPIO_ReadPin(C1_PORT, C1_PIN)) {
 80002fa:	2110      	movs	r1, #16
 80002fc:	4859      	ldr	r0, [pc, #356]	; (8000464 <readKeypad+0x218>)
 80002fe:	f000 ffd6 	bl	80012ae <HAL_GPIO_ReadPin>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d10c      	bne.n	8000322 <readKeypad+0xd6>
				while (!HAL_GPIO_ReadPin(C1_PORT, C1_PIN));
 8000308:	bf00      	nop
 800030a:	2110      	movs	r1, #16
 800030c:	4855      	ldr	r0, [pc, #340]	; (8000464 <readKeypad+0x218>)
 800030e:	f000 ffce 	bl	80012ae <HAL_GPIO_ReadPin>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d0f8      	beq.n	800030a <readKeypad+0xbe>
				return (row * 4) + col;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	009a      	lsls	r2, r3, #2
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	4413      	add	r3, r2
 8000320:	e09c      	b.n	800045c <readKeypad+0x210>
			} else if (!HAL_GPIO_ReadPin(C2_PORT, C2_PIN)) {
 8000322:	2120      	movs	r1, #32
 8000324:	484f      	ldr	r0, [pc, #316]	; (8000464 <readKeypad+0x218>)
 8000326:	f000 ffc2 	bl	80012ae <HAL_GPIO_ReadPin>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d10d      	bne.n	800034c <readKeypad+0x100>
				while (!HAL_GPIO_ReadPin(C2_PORT, C2_PIN));
 8000330:	bf00      	nop
 8000332:	2120      	movs	r1, #32
 8000334:	484b      	ldr	r0, [pc, #300]	; (8000464 <readKeypad+0x218>)
 8000336:	f000 ffba 	bl	80012ae <HAL_GPIO_ReadPin>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0f8      	beq.n	8000332 <readKeypad+0xe6>
				return (row * 4) + col + 1;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	009a      	lsls	r2, r3, #2
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	4413      	add	r3, r2
 8000348:	3301      	adds	r3, #1
 800034a:	e087      	b.n	800045c <readKeypad+0x210>
			} else if (!HAL_GPIO_ReadPin(C3_PORT, C3_PIN)) {
 800034c:	2140      	movs	r1, #64	; 0x40
 800034e:	4845      	ldr	r0, [pc, #276]	; (8000464 <readKeypad+0x218>)
 8000350:	f000 ffad 	bl	80012ae <HAL_GPIO_ReadPin>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d10d      	bne.n	8000376 <readKeypad+0x12a>
				while (!HAL_GPIO_ReadPin(C3_PORT, C3_PIN));
 800035a:	bf00      	nop
 800035c:	2140      	movs	r1, #64	; 0x40
 800035e:	4841      	ldr	r0, [pc, #260]	; (8000464 <readKeypad+0x218>)
 8000360:	f000 ffa5 	bl	80012ae <HAL_GPIO_ReadPin>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0f8      	beq.n	800035c <readKeypad+0x110>
				return (row * 4) + col + 2;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	009a      	lsls	r2, r3, #2
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	4413      	add	r3, r2
 8000372:	3302      	adds	r3, #2
 8000374:	e072      	b.n	800045c <readKeypad+0x210>
			} else if (!HAL_GPIO_ReadPin(C4_PORT, C4_PIN)) {
 8000376:	2180      	movs	r1, #128	; 0x80
 8000378:	483a      	ldr	r0, [pc, #232]	; (8000464 <readKeypad+0x218>)
 800037a:	f000 ff98 	bl	80012ae <HAL_GPIO_ReadPin>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d10d      	bne.n	80003a0 <readKeypad+0x154>
				while (!HAL_GPIO_ReadPin(C4_PORT, C4_PIN));
 8000384:	bf00      	nop
 8000386:	2180      	movs	r1, #128	; 0x80
 8000388:	4836      	ldr	r0, [pc, #216]	; (8000464 <readKeypad+0x218>)
 800038a:	f000 ff90 	bl	80012ae <HAL_GPIO_ReadPin>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0f8      	beq.n	8000386 <readKeypad+0x13a>
				return (row * 4) + col + 3;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	009a      	lsls	r2, r3, #2
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	4413      	add	r3, r2
 800039c:	3303      	adds	r3, #3
 800039e:	e05d      	b.n	800045c <readKeypad+0x210>
			}

			// Release the current COLUMN
			switch (col) {
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	2b03      	cmp	r3, #3
 80003a4:	d822      	bhi.n	80003ec <readKeypad+0x1a0>
 80003a6:	a201      	add	r2, pc, #4	; (adr r2, 80003ac <readKeypad+0x160>)
 80003a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ac:	080003bd 	.word	0x080003bd
 80003b0:	080003c9 	.word	0x080003c9
 80003b4:	080003d5 	.word	0x080003d5
 80003b8:	080003e1 	.word	0x080003e1
				case 0:
					HAL_GPIO_WritePin(C1_PORT, C1_PIN, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	2110      	movs	r1, #16
 80003c0:	4828      	ldr	r0, [pc, #160]	; (8000464 <readKeypad+0x218>)
 80003c2:	f000 ff8c 	bl	80012de <HAL_GPIO_WritePin>
					break;
 80003c6:	e012      	b.n	80003ee <readKeypad+0x1a2>
				case 1:
					HAL_GPIO_WritePin(C2_PORT, C2_PIN, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2120      	movs	r1, #32
 80003cc:	4825      	ldr	r0, [pc, #148]	; (8000464 <readKeypad+0x218>)
 80003ce:	f000 ff86 	bl	80012de <HAL_GPIO_WritePin>
					break;
 80003d2:	e00c      	b.n	80003ee <readKeypad+0x1a2>
				case 2:
					HAL_GPIO_WritePin(C3_PORT, C3_PIN, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	2140      	movs	r1, #64	; 0x40
 80003d8:	4822      	ldr	r0, [pc, #136]	; (8000464 <readKeypad+0x218>)
 80003da:	f000 ff80 	bl	80012de <HAL_GPIO_WritePin>
					break;
 80003de:	e006      	b.n	80003ee <readKeypad+0x1a2>
				case 3:
					HAL_GPIO_WritePin(C4_PORT, C4_PIN, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2180      	movs	r1, #128	; 0x80
 80003e4:	481f      	ldr	r0, [pc, #124]	; (8000464 <readKeypad+0x218>)
 80003e6:	f000 ff7a 	bl	80012de <HAL_GPIO_WritePin>
					break;
 80003ea:	e000      	b.n	80003ee <readKeypad+0x1a2>
				default:
					break;
 80003ec:	bf00      	nop
		for (int col = 0; col < 4; col++) {
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	3301      	adds	r3, #1
 80003f2:	603b      	str	r3, [r7, #0]
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	2b03      	cmp	r3, #3
 80003f8:	f77f af58 	ble.w	80002ac <readKeypad+0x60>
			}
		}

		// Release the current ROW
		switch (row) {
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2b03      	cmp	r3, #3
 8000400:	d822      	bhi.n	8000448 <readKeypad+0x1fc>
 8000402:	a201      	add	r2, pc, #4	; (adr r2, 8000408 <readKeypad+0x1bc>)
 8000404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000408:	08000419 	.word	0x08000419
 800040c:	08000425 	.word	0x08000425
 8000410:	08000431 	.word	0x08000431
 8000414:	0800043d 	.word	0x0800043d
			case 0:
				HAL_GPIO_WritePin(R1_PORT, R1_PIN, GPIO_PIN_SET);
 8000418:	2201      	movs	r2, #1
 800041a:	2101      	movs	r1, #1
 800041c:	4811      	ldr	r0, [pc, #68]	; (8000464 <readKeypad+0x218>)
 800041e:	f000 ff5e 	bl	80012de <HAL_GPIO_WritePin>
				break;
 8000422:	e012      	b.n	800044a <readKeypad+0x1fe>
			case 1:
				HAL_GPIO_WritePin(R2_PORT, R2_PIN, GPIO_PIN_SET);
 8000424:	2201      	movs	r2, #1
 8000426:	2102      	movs	r1, #2
 8000428:	480e      	ldr	r0, [pc, #56]	; (8000464 <readKeypad+0x218>)
 800042a:	f000 ff58 	bl	80012de <HAL_GPIO_WritePin>
				break;
 800042e:	e00c      	b.n	800044a <readKeypad+0x1fe>
			case 2:
				HAL_GPIO_WritePin(R3_PORT, R3_PIN, GPIO_PIN_SET);
 8000430:	2201      	movs	r2, #1
 8000432:	2104      	movs	r1, #4
 8000434:	480b      	ldr	r0, [pc, #44]	; (8000464 <readKeypad+0x218>)
 8000436:	f000 ff52 	bl	80012de <HAL_GPIO_WritePin>
				break;
 800043a:	e006      	b.n	800044a <readKeypad+0x1fe>
			case 3:
				HAL_GPIO_WritePin(R4_PORT, R4_PIN, GPIO_PIN_SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2108      	movs	r1, #8
 8000440:	4808      	ldr	r0, [pc, #32]	; (8000464 <readKeypad+0x218>)
 8000442:	f000 ff4c 	bl	80012de <HAL_GPIO_WritePin>
				break;
 8000446:	e000      	b.n	800044a <readKeypad+0x1fe>
			default:
				break;
 8000448:	bf00      	nop
	for (int row = 0; row < 4; row++) {
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	3301      	adds	r3, #1
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2b03      	cmp	r3, #3
 8000454:	f77f af00 	ble.w	8000258 <readKeypad+0xc>
		}
	}

	// No button pressed
	return -1;
 8000458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800045c:	4618      	mov	r0, r3
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	48000400 	.word	0x48000400

08000468 <readChar>:

char readChar() {
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
	int key = readKeypad();
 800046e:	f7ff feed 	bl	800024c <readKeypad>
 8000472:	6078      	str	r0, [r7, #4]
	if (key == -1) {
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800047a:	d101      	bne.n	8000480 <readChar+0x18>
		return '\0';
 800047c:	2300      	movs	r3, #0
 800047e:	e003      	b.n	8000488 <readChar+0x20>
	} else {
		return decodeKey(key);
 8000480:	6878      	ldr	r0, [r7, #4]
 8000482:	f000 f805 	bl	8000490 <decodeKey>
 8000486:	4603      	mov	r3, r0
	}
}
 8000488:	4618      	mov	r0, r3
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <decodeKey>:

char decodeKey(int key) {
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	return keypadLayout[key / 4][key % 4];
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2b00      	cmp	r3, #0
 800049c:	da00      	bge.n	80004a0 <decodeKey+0x10>
 800049e:	3303      	adds	r3, #3
 80004a0:	109b      	asrs	r3, r3, #2
 80004a2:	4618      	mov	r0, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	425a      	negs	r2, r3
 80004a8:	f003 0303 	and.w	r3, r3, #3
 80004ac:	f002 0203 	and.w	r2, r2, #3
 80004b0:	bf58      	it	pl
 80004b2:	4253      	negpl	r3, r2
 80004b4:	4905      	ldr	r1, [pc, #20]	; (80004cc <decodeKey+0x3c>)
 80004b6:	0082      	lsls	r2, r0, #2
 80004b8:	440a      	add	r2, r1
 80004ba:	4413      	add	r3, r2
 80004bc:	781b      	ldrb	r3, [r3, #0]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	20000000 	.word	0x20000000

080004d0 <LCD_init>:
 *      Author: aoberai
 */

#include "lcd.h"

void LCD_init(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0

	//reset control pins
	GPIOC->ODR &= ~(E_PIN);
 80004d4:	4b1d      	ldr	r3, [pc, #116]	; (800054c <LCD_init+0x7c>)
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	4a1c      	ldr	r2, [pc, #112]	; (800054c <LCD_init+0x7c>)
 80004da:	f023 0304 	bic.w	r3, r3, #4
 80004de:	6153      	str	r3, [r2, #20]
	GPIOC->ODR &= ~(RS_PIN);
 80004e0:	4b1a      	ldr	r3, [pc, #104]	; (800054c <LCD_init+0x7c>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	4a19      	ldr	r2, [pc, #100]	; (800054c <LCD_init+0x7c>)
 80004e6:	f023 0301 	bic.w	r3, r3, #1
 80004ea:	6153      	str	r3, [r2, #20]

	HAL_Delay(50);
 80004ec:	2032      	movs	r0, #50	; 0x32
 80004ee:	f000 fdd5 	bl	800109c <HAL_Delay>

	//wake the display up
	LCD_command(WAKE_UP);
 80004f2:	2030      	movs	r0, #48	; 0x30
 80004f4:	f000 f82c 	bl	8000550 <LCD_command>
	HAL_Delay(100);
 80004f8:	2064      	movs	r0, #100	; 0x64
 80004fa:	f000 fdcf 	bl	800109c <HAL_Delay>
	LCD_command(WAKE_UP);
 80004fe:	2030      	movs	r0, #48	; 0x30
 8000500:	f000 f826 	bl	8000550 <LCD_command>
	HAL_Delay(10);
 8000504:	200a      	movs	r0, #10
 8000506:	f000 fdc9 	bl	800109c <HAL_Delay>
	LCD_command(WAKE_UP);
 800050a:	2030      	movs	r0, #48	; 0x30
 800050c:	f000 f820 	bl	8000550 <LCD_command>
	HAL_Delay(10);
 8000510:	200a      	movs	r0, #10
 8000512:	f000 fdc3 	bl	800109c <HAL_Delay>

	//function set the display
	LCD_command(FUNC_SET);
 8000516:	2038      	movs	r0, #56	; 0x38
 8000518:	f000 f81a 	bl	8000550 <LCD_command>

	HAL_Delay(5);
 800051c:	2005      	movs	r0, #5
 800051e:	f000 fdbd 	bl	800109c <HAL_Delay>

	LCD_command(DISPLAY_OFF);
 8000522:	200e      	movs	r0, #14
 8000524:	f000 f814 	bl	8000550 <LCD_command>

	HAL_Delay(5);
 8000528:	2005      	movs	r0, #5
 800052a:	f000 fdb7 	bl	800109c <HAL_Delay>

	LCD_command(CLEAR_DISPLAY);
 800052e:	2001      	movs	r0, #1
 8000530:	f000 f80e 	bl	8000550 <LCD_command>

	HAL_Delay(5);
 8000534:	2005      	movs	r0, #5
 8000536:	f000 fdb1 	bl	800109c <HAL_Delay>

	//entry mode set for data
	LCD_command(ENTRY_SET);
 800053a:	2006      	movs	r0, #6
 800053c:	f000 f808 	bl	8000550 <LCD_command>

	HAL_Delay(5);
 8000540:	2005      	movs	r0, #5
 8000542:	f000 fdab 	bl	800109c <HAL_Delay>

}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	48000800 	.word	0x48000800

08000550 <LCD_command>:

void LCD_command(uint8_t command) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]

	//clear GPIO_PINS 3-10
	GPIOC->ODR &= ~(CLEAR_BYTE << DATA_SHIFT);
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <LCD_command+0x70>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	4a18      	ldr	r2, [pc, #96]	; (80005c0 <LCD_command+0x70>)
 8000560:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000564:	6153      	str	r3, [r2, #20]

	//shift instruction to appropriate GPIO_PINS 3-10
	GPIOC->ODR |= (command << DATA_SHIFT);
 8000566:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <LCD_command+0x70>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	79fa      	ldrb	r2, [r7, #7]
 800056c:	00d2      	lsls	r2, r2, #3
 800056e:	4611      	mov	r1, r2
 8000570:	4a13      	ldr	r2, [pc, #76]	; (80005c0 <LCD_command+0x70>)
 8000572:	430b      	orrs	r3, r1
 8000574:	6153      	str	r3, [r2, #20]

	//reset RS Pin for Instruction mode
	GPIOC->ODR &= ~(RS_PIN);
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <LCD_command+0x70>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a11      	ldr	r2, [pc, #68]	; (80005c0 <LCD_command+0x70>)
 800057c:	f023 0301 	bic.w	r3, r3, #1
 8000580:	6153      	str	r3, [r2, #20]

	//reset RW Pin for Write mode
	GPIOC->ODR &= ~(RW_PIN);
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <LCD_command+0x70>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <LCD_command+0x70>)
 8000588:	f023 0302 	bic.w	r3, r3, #2
 800058c:	6153      	str	r3, [r2, #20]

	HAL_Delay(10);
 800058e:	200a      	movs	r0, #10
 8000590:	f000 fd84 	bl	800109c <HAL_Delay>

	latch_falling_edge();
 8000594:	f000 f886 	bl	80006a4 <latch_falling_edge>

	//put LCD in read mode to prevent unintended command writes
	GPIOC->ODR |= RS_PIN;
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <LCD_command+0x70>)
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <LCD_command+0x70>)
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	6153      	str	r3, [r2, #20]
	GPIOC->ODR |= RW_PIN;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <LCD_command+0x70>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <LCD_command+0x70>)
 80005aa:	f043 0302 	orr.w	r3, r3, #2
 80005ae:	6153      	str	r3, [r2, #20]

	HAL_Delay(10);
 80005b0:	200a      	movs	r0, #10
 80005b2:	f000 fd73 	bl	800109c <HAL_Delay>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	48000800 	.word	0x48000800

080005c4 <LCD_write_char>:

void LCD_write_char(uint8_t letter) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]

	//clear GPIO_PINS 3-10
	GPIOC->ODR &= ~(CLEAR_BYTE << DATA_SHIFT);
 80005ce:	4b19      	ldr	r3, [pc, #100]	; (8000634 <LCD_write_char+0x70>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a18      	ldr	r2, [pc, #96]	; (8000634 <LCD_write_char+0x70>)
 80005d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80005d8:	6153      	str	r3, [r2, #20]

	//shift data to appropriate GPIO_PINS 3-10
	GPIOC->ODR |= (letter << DATA_SHIFT);
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <LCD_write_char+0x70>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	79fa      	ldrb	r2, [r7, #7]
 80005e0:	00d2      	lsls	r2, r2, #3
 80005e2:	4611      	mov	r1, r2
 80005e4:	4a13      	ldr	r2, [pc, #76]	; (8000634 <LCD_write_char+0x70>)
 80005e6:	430b      	orrs	r3, r1
 80005e8:	6153      	str	r3, [r2, #20]

	//set RS PIN for Data mode
	GPIOC->ODR |= RS_PIN;
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <LCD_write_char+0x70>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a11      	ldr	r2, [pc, #68]	; (8000634 <LCD_write_char+0x70>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6153      	str	r3, [r2, #20]

	//reset RW PIN for Write mode
	GPIOC->ODR &= ~(RW_PIN);
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <LCD_write_char+0x70>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <LCD_write_char+0x70>)
 80005fc:	f023 0302 	bic.w	r3, r3, #2
 8000600:	6153      	str	r3, [r2, #20]

	HAL_Delay(10);
 8000602:	200a      	movs	r0, #10
 8000604:	f000 fd4a 	bl	800109c <HAL_Delay>

	latch_falling_edge();
 8000608:	f000 f84c 	bl	80006a4 <latch_falling_edge>

	//put LCD in read mode to prevent unintended command writes
	GPIOC->ODR |= RS_PIN;
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <LCD_write_char+0x70>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	4a08      	ldr	r2, [pc, #32]	; (8000634 <LCD_write_char+0x70>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6153      	str	r3, [r2, #20]
	GPIOC->ODR |= RW_PIN;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <LCD_write_char+0x70>)
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	4a05      	ldr	r2, [pc, #20]	; (8000634 <LCD_write_char+0x70>)
 800061e:	f043 0302 	orr.w	r3, r3, #2
 8000622:	6153      	str	r3, [r2, #20]

	HAL_Delay(10);
 8000624:	200a      	movs	r0, #10
 8000626:	f000 fd39 	bl	800109c <HAL_Delay>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	48000800 	.word	0x48000800

08000638 <LCD_write_string>:

void LCD_write_string(char *str) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]

	for(; *str != 0; ++str) {
 8000640:	e007      	b.n	8000652 <LCD_write_string+0x1a>

		LCD_write_char(*str);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff ffbc 	bl	80005c4 <LCD_write_char>
	for(; *str != 0; ++str) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3301      	adds	r3, #1
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1f3      	bne.n	8000642 <LCD_write_string+0xa>
	}

}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <LCD_set_cursor>:

void LCD_set_cursor(char x, char y) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	460a      	mov	r2, r1
 800066e:	71fb      	strb	r3, [r7, #7]
 8000670:	4613      	mov	r3, r2
 8000672:	71bb      	strb	r3, [r7, #6]
	uint8_t origin = 0x0;
 8000674:	2300      	movs	r3, #0
 8000676:	73fb      	strb	r3, [r7, #15]

	if(y == 1) {
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d101      	bne.n	8000682 <LCD_set_cursor+0x1e>
		origin = 0x40;
 800067e:	2340      	movs	r3, #64	; 0x40
 8000680:	73fb      	strb	r3, [r7, #15]
	}

	LCD_command(SET_CURSOR | (origin + x));
 8000682:	7bfa      	ldrb	r2, [r7, #15]
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	4413      	add	r3, r2
 8000688:	b2db      	uxtb	r3, r3
 800068a:	b25b      	sxtb	r3, r3
 800068c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000690:	b25b      	sxtb	r3, r3
 8000692:	b2db      	uxtb	r3, r3
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff ff5b 	bl	8000550 <LCD_command>
}
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <latch_falling_edge>:

void latch_falling_edge(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0

	//create high-low negative edge pulse
	GPIOC->ODR |= E_PIN;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <latch_falling_edge+0x2c>)
 80006aa:	695b      	ldr	r3, [r3, #20]
 80006ac:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <latch_falling_edge+0x2c>)
 80006ae:	f043 0304 	orr.w	r3, r3, #4
 80006b2:	6153      	str	r3, [r2, #20]
	HAL_Delay(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 fcf1 	bl	800109c <HAL_Delay>
	GPIOC->ODR &= ~(E_PIN);
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <latch_falling_edge+0x2c>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <latch_falling_edge+0x2c>)
 80006c0:	f023 0304 	bic.w	r3, r3, #4
 80006c4:	6153      	str	r3, [r2, #20]
	HAL_Delay(1);
 80006c6:	2001      	movs	r0, #1
 80006c8:	f000 fce8 	bl	800109c <HAL_Delay>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	48000800 	.word	0x48000800

080006d4 <setLEDState>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

void setLEDState(int state){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d106      	bne.n	80006f0 <setLEDState+0x1c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2120      	movs	r1, #32
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ea:	f000 fdf8 	bl	80012de <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	}
}
 80006ee:	e005      	b.n	80006fc <setLEDState+0x28>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2120      	movs	r1, #32
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f8:	f000 fdf1 	bl	80012de <HAL_GPIO_WritePin>
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <displayLCD>:
void displayLCD( char *line_one,  char *line_two) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
	char* blank_string = "                ";
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <displayLCD+0x50>)
 8000710:	60fb      	str	r3, [r7, #12]
	LCD_set_cursor(0,0);
 8000712:	2100      	movs	r1, #0
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff ffa5 	bl	8000664 <LCD_set_cursor>
	LCD_write_string(blank_string);
 800071a:	68f8      	ldr	r0, [r7, #12]
 800071c:	f7ff ff8c 	bl	8000638 <LCD_write_string>
	LCD_set_cursor(0,0);
 8000720:	2100      	movs	r1, #0
 8000722:	2000      	movs	r0, #0
 8000724:	f7ff ff9e 	bl	8000664 <LCD_set_cursor>
	LCD_write_string(line_one);
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff ff85 	bl	8000638 <LCD_write_string>
	LCD_set_cursor(0,1);
 800072e:	2101      	movs	r1, #1
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff ff97 	bl	8000664 <LCD_set_cursor>
	LCD_write_string(blank_string);
 8000736:	68f8      	ldr	r0, [r7, #12]
 8000738:	f7ff ff7e 	bl	8000638 <LCD_write_string>
	LCD_set_cursor(0,1);
 800073c:	2101      	movs	r1, #1
 800073e:	2000      	movs	r0, #0
 8000740:	f7ff ff90 	bl	8000664 <LCD_set_cursor>
	LCD_write_string(line_two);
 8000744:	6838      	ldr	r0, [r7, #0]
 8000746:	f7ff ff77 	bl	8000638 <LCD_write_string>
}
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	08002908 	.word	0x08002908

08000758 <main>:


/* USER CODE BEGIN PFP */
int main(void) {
 8000758:	b5b0      	push	{r4, r5, r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0

    // Initialize the HAL Library
    HAL_Init();
 800075e:	f000 fc21 	bl	8000fa4 <HAL_Init>

    // System Clock Configuration
    SystemClock_Config();
 8000762:	f000 fa9b 	bl	8000c9c <SystemClock_Config>

    // turns on clock to GPIO banks C
    RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOCEN | RCC_AHB2ENR_GPIOAEN);
 8000766:	4ba5      	ldr	r3, [pc, #660]	; (80009fc <main+0x2a4>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4aa4      	ldr	r2, [pc, #656]	; (80009fc <main+0x2a4>)
 800076c:	f043 0305 	orr.w	r3, r3, #5
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c

    //bank PC0-PC10 as all GPIO outputs
    GPIOC->MODER &= ~(CLEAR_PC);
 8000772:	4ba3      	ldr	r3, [pc, #652]	; (8000a00 <main+0x2a8>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4aa2      	ldr	r2, [pc, #648]	; (8000a00 <main+0x2a8>)
 8000778:	0d9b      	lsrs	r3, r3, #22
 800077a:	059b      	lsls	r3, r3, #22
 800077c:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=   PC_OUT;
 800077e:	4ba0      	ldr	r3, [pc, #640]	; (8000a00 <main+0x2a8>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	499f      	ldr	r1, [pc, #636]	; (8000a00 <main+0x2a8>)
 8000784:	4b9f      	ldr	r3, [pc, #636]	; (8000a04 <main+0x2ac>)
 8000786:	4313      	orrs	r3, r2
 8000788:	600b      	str	r3, [r1, #0]

	// set up green LED light on pin PA5
	GPIOA->MODER &= ~(GPIO_MODER_MODE5);
 800078a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000794:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000798:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE5_0 ;
 800079a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007a8:	6013      	str	r3, [r2, #0]


    LCD_init();
 80007aa:	f7ff fe91 	bl	80004d0 <LCD_init>
    char* line_one = malloc(17);
 80007ae:	2011      	movs	r0, #17
 80007b0:	f001 fbda 	bl	8001f68 <malloc>
 80007b4:	4603      	mov	r3, r0
 80007b6:	623b      	str	r3, [r7, #32]
    char* line_two = malloc(17);
 80007b8:	2011      	movs	r0, #17
 80007ba:	f001 fbd5 	bl	8001f68 <malloc>
 80007be:	4603      	mov	r3, r0
 80007c0:	61fb      	str	r3, [r7, #28]
	strcpy(line_one, "Project 1");
 80007c2:	6a3b      	ldr	r3, [r7, #32]
 80007c4:	4990      	ldr	r1, [pc, #576]	; (8000a08 <main+0x2b0>)
 80007c6:	461a      	mov	r2, r3
 80007c8:	460b      	mov	r3, r1
 80007ca:	cb03      	ldmia	r3!, {r0, r1}
 80007cc:	6010      	str	r0, [r2, #0]
 80007ce:	6051      	str	r1, [r2, #4]
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	8113      	strh	r3, [r2, #8]
	strcpy(line_two, "Digi-Lock");
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	498d      	ldr	r1, [pc, #564]	; (8000a0c <main+0x2b4>)
 80007d8:	461a      	mov	r2, r3
 80007da:	460b      	mov	r3, r1
 80007dc:	cb03      	ldmia	r3!, {r0, r1}
 80007de:	6010      	str	r0, [r2, #0]
 80007e0:	6051      	str	r1, [r2, #4]
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	8113      	strh	r3, [r2, #8]
	displayLCD(line_one, line_two);
 80007e6:	69f9      	ldr	r1, [r7, #28]
 80007e8:	6a38      	ldr	r0, [r7, #32]
 80007ea:	f7ff ff8b 	bl	8000704 <displayLCD>
	HAL_Delay(1000);
 80007ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007f2:	f000 fc53 	bl	800109c <HAL_Delay>
	strcpy(line_one, "By Russ Sobti");
 80007f6:	6a3b      	ldr	r3, [r7, #32]
 80007f8:	4a85      	ldr	r2, [pc, #532]	; (8000a10 <main+0x2b8>)
 80007fa:	461c      	mov	r4, r3
 80007fc:	4613      	mov	r3, r2
 80007fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000800:	6020      	str	r0, [r4, #0]
 8000802:	6061      	str	r1, [r4, #4]
 8000804:	60a2      	str	r2, [r4, #8]
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	81a3      	strh	r3, [r4, #12]
	strcpy(line_two, "& Armaan Oberai");
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	4a81      	ldr	r2, [pc, #516]	; (8000a14 <main+0x2bc>)
 800080e:	461c      	mov	r4, r3
 8000810:	4615      	mov	r5, r2
 8000812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000814:	6020      	str	r0, [r4, #0]
 8000816:	6061      	str	r1, [r4, #4]
 8000818:	60a2      	str	r2, [r4, #8]
 800081a:	60e3      	str	r3, [r4, #12]
	displayLCD(line_one, line_two);
 800081c:	69f9      	ldr	r1, [r7, #28]
 800081e:	6a38      	ldr	r0, [r7, #32]
 8000820:	f7ff ff70 	bl	8000704 <displayLCD>
	HAL_Delay(2000);
 8000824:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000828:	f000 fc38 	bl	800109c <HAL_Delay>

	// Initial state
	enum State currentState = POWER_UP;
 800082c:	2300      	movs	r3, #0
 800082e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// Pin variables
	char enteredPin[5] = {'\0'};
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	2300      	movs	r3, #0
 8000838:	743b      	strb	r3, [r7, #16]
	char correctPin[] = "1234";
 800083a:	4a77      	ldr	r2, [pc, #476]	; (8000a18 <main+0x2c0>)
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000842:	6018      	str	r0, [r3, #0]
 8000844:	3304      	adds	r3, #4
 8000846:	7019      	strb	r1, [r3, #0]
	initKeypad(); // initialize the keypad
 8000848:	f7ff fcd0 	bl	80001ec <initKeypad>
	char *buf_one = malloc(17);
 800084c:	2011      	movs	r0, #17
 800084e:	f001 fb8b 	bl	8001f68 <malloc>
 8000852:	4603      	mov	r3, r0
 8000854:	61bb      	str	r3, [r7, #24]
	char *buf_two = malloc(17);
 8000856:	2011      	movs	r0, #17
 8000858:	f001 fb86 	bl	8001f68 <malloc>
 800085c:	4603      	mov	r3, r0
 800085e:	617b      	str	r3, [r7, #20]

	while (currentState != END) {
 8000860:	e1f8      	b.n	8000c54 <main+0x4fc>
		switch (currentState) {
 8000862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000866:	2b06      	cmp	r3, #6
 8000868:	f200 81f3 	bhi.w	8000c52 <main+0x4fa>
 800086c:	a201      	add	r2, pc, #4	; (adr r2, 8000874 <main+0x11c>)
 800086e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000872:	bf00      	nop
 8000874:	08000891 	.word	0x08000891
 8000878:	080008e9 	.word	0x080008e9
 800087c:	08000941 	.word	0x08000941
 8000880:	080009a5 	.word	0x080009a5
 8000884:	08000af5 	.word	0x08000af5
 8000888:	08000b5b 	.word	0x08000b5b
 800088c:	08000bc7 	.word	0x08000bc7
			case POWER_UP:
				strcpy(buf_one, "Locked");
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	4a62      	ldr	r2, [pc, #392]	; (8000a1c <main+0x2c4>)
 8000894:	6810      	ldr	r0, [r2, #0]
 8000896:	6018      	str	r0, [r3, #0]
 8000898:	8891      	ldrh	r1, [r2, #4]
 800089a:	7992      	ldrb	r2, [r2, #6]
 800089c:	8099      	strh	r1, [r3, #4]
 800089e:	719a      	strb	r2, [r3, #6]
				strcpy(buf_two, "");
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
				if(strcmp(buf_one, line_one) != 0 || strcmp(buf_two, line_two) != 0) displayLCD(buf_one, buf_two);
 80008a6:	6a39      	ldr	r1, [r7, #32]
 80008a8:	69b8      	ldr	r0, [r7, #24]
 80008aa:	f7ff fc95 	bl	80001d8 <strcmp>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d106      	bne.n	80008c2 <main+0x16a>
 80008b4:	69f9      	ldr	r1, [r7, #28]
 80008b6:	6978      	ldr	r0, [r7, #20]
 80008b8:	f7ff fc8e 	bl	80001d8 <strcmp>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d003      	beq.n	80008ca <main+0x172>
 80008c2:	6979      	ldr	r1, [r7, #20]
 80008c4:	69b8      	ldr	r0, [r7, #24]
 80008c6:	f7ff ff1d 	bl	8000704 <displayLCD>
				// copy over the buffer to the previous buffer
				strcpy(line_one, buf_one);
 80008ca:	69b9      	ldr	r1, [r7, #24]
 80008cc:	6a38      	ldr	r0, [r7, #32]
 80008ce:	f001 fd6a 	bl	80023a6 <strcpy>
				strcpy(line_two, buf_two);
 80008d2:	6979      	ldr	r1, [r7, #20]
 80008d4:	69f8      	ldr	r0, [r7, #28]
 80008d6:	f001 fd66 	bl	80023a6 <strcpy>

				setLEDState(1); // LED ON
 80008da:	2001      	movs	r0, #1
 80008dc:	f7ff fefa 	bl	80006d4 <setLEDState>
				currentState = LOCKED;
 80008e0:	2301      	movs	r3, #1
 80008e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 80008e6:	e1b5      	b.n	8000c54 <main+0x4fc>

			case LOCKED:
				strcpy(buf_one, "Enter PIN: ");
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	4a4d      	ldr	r2, [pc, #308]	; (8000a20 <main+0x2c8>)
 80008ec:	461c      	mov	r4, r3
 80008ee:	4613      	mov	r3, r2
 80008f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80008f2:	6020      	str	r0, [r4, #0]
 80008f4:	6061      	str	r1, [r4, #4]
 80008f6:	60a2      	str	r2, [r4, #8]
				strcpy(buf_two, enteredPin);
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	4619      	mov	r1, r3
 80008fe:	6978      	ldr	r0, [r7, #20]
 8000900:	f001 fd51 	bl	80023a6 <strcpy>

				if(strcmp(buf_one, line_one) != 0 || strcmp(buf_two, line_two) != 0) displayLCD(buf_one, buf_two);
 8000904:	6a39      	ldr	r1, [r7, #32]
 8000906:	69b8      	ldr	r0, [r7, #24]
 8000908:	f7ff fc66 	bl	80001d8 <strcmp>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d106      	bne.n	8000920 <main+0x1c8>
 8000912:	69f9      	ldr	r1, [r7, #28]
 8000914:	6978      	ldr	r0, [r7, #20]
 8000916:	f7ff fc5f 	bl	80001d8 <strcmp>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d003      	beq.n	8000928 <main+0x1d0>
 8000920:	6979      	ldr	r1, [r7, #20]
 8000922:	69b8      	ldr	r0, [r7, #24]
 8000924:	f7ff feee 	bl	8000704 <displayLCD>
				// copy over the buffer to the previous buffer
				strcpy(line_one, buf_one);
 8000928:	69b9      	ldr	r1, [r7, #24]
 800092a:	6a38      	ldr	r0, [r7, #32]
 800092c:	f001 fd3b 	bl	80023a6 <strcpy>
				strcpy(line_two, buf_two);
 8000930:	6979      	ldr	r1, [r7, #20]
 8000932:	69f8      	ldr	r0, [r7, #28]
 8000934:	f001 fd37 	bl	80023a6 <strcpy>
				currentState = ENTER_PIN;
 8000938:	2303      	movs	r3, #3
 800093a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 800093e:	e189      	b.n	8000c54 <main+0x4fc>

			case CLEAR_PIN:
				strcpy(buf_one, "Clearing PIN");
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	4a38      	ldr	r2, [pc, #224]	; (8000a24 <main+0x2cc>)
 8000944:	461c      	mov	r4, r3
 8000946:	4613      	mov	r3, r2
 8000948:	cb07      	ldmia	r3!, {r0, r1, r2}
 800094a:	6020      	str	r0, [r4, #0]
 800094c:	6061      	str	r1, [r4, #4]
 800094e:	60a2      	str	r2, [r4, #8]
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	7323      	strb	r3, [r4, #12]
				strcpy(buf_two, "");
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
				if(strcmp(buf_one, line_one) != 0 || strcmp(buf_two, line_two) != 0) displayLCD(buf_one, buf_two);
 800095a:	6a39      	ldr	r1, [r7, #32]
 800095c:	69b8      	ldr	r0, [r7, #24]
 800095e:	f7ff fc3b 	bl	80001d8 <strcmp>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d106      	bne.n	8000976 <main+0x21e>
 8000968:	69f9      	ldr	r1, [r7, #28]
 800096a:	6978      	ldr	r0, [r7, #20]
 800096c:	f7ff fc34 	bl	80001d8 <strcmp>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <main+0x226>
 8000976:	6979      	ldr	r1, [r7, #20]
 8000978:	69b8      	ldr	r0, [r7, #24]
 800097a:	f7ff fec3 	bl	8000704 <displayLCD>
				// copy over the buffer to the previous buffer
				strcpy(line_one, buf_one);
 800097e:	69b9      	ldr	r1, [r7, #24]
 8000980:	6a38      	ldr	r0, [r7, #32]
 8000982:	f001 fd10 	bl	80023a6 <strcpy>
				strcpy(line_two, buf_two);
 8000986:	6979      	ldr	r1, [r7, #20]
 8000988:	69f8      	ldr	r0, [r7, #28]
 800098a:	f001 fd0c 	bl	80023a6 <strcpy>
				memset(enteredPin, 0, sizeof(enteredPin));
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	2205      	movs	r2, #5
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f001 fcc0 	bl	800231c <memset>
				currentState = ENTER_PIN;
 800099c:	2303      	movs	r3, #3
 800099e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 80009a2:	e157      	b.n	8000c54 <main+0x4fc>
			case ENTER_PIN:
			{
				char enteredChar;
//				scanf(" %c", &digit);
				// read from the keypad
				enteredChar = readChar();
 80009a4:	f7ff fd60 	bl	8000468 <readChar>
 80009a8:	4603      	mov	r3, r0
 80009aa:	74bb      	strb	r3, [r7, #18]

				if (enteredChar == '*') {
 80009ac:	7cbb      	ldrb	r3, [r7, #18]
 80009ae:	2b2a      	cmp	r3, #42	; 0x2a
 80009b0:	d103      	bne.n	80009ba <main+0x262>
					currentState = CLEAR_PIN;
 80009b2:	2302      	movs	r3, #2
 80009b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009b8:	e14c      	b.n	8000c54 <main+0x4fc>
				} else if (enteredChar == '#') {
 80009ba:	7cbb      	ldrb	r3, [r7, #18]
 80009bc:	2b23      	cmp	r3, #35	; 0x23
 80009be:	d133      	bne.n	8000a28 <main+0x2d0>
					// check if correct pin is empty
					if (strlen(correctPin) == 0) {
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d107      	bne.n	80009d8 <main+0x280>
						// set the correct pin to the entered pin
						strcpy(correctPin, enteredPin);
 80009c8:	f107 020c 	add.w	r2, r7, #12
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 fce8 	bl	80023a6 <strcpy>
 80009d6:	e13d      	b.n	8000c54 <main+0x4fc>
					} else
					if (strcmp(enteredPin, correctPin) == 0) {
 80009d8:	1d3a      	adds	r2, r7, #4
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fbf9 	bl	80001d8 <strcmp>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d103      	bne.n	80009f4 <main+0x29c>
						currentState = UNLOCK;
 80009ec:	2305      	movs	r3, #5
 80009ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009f2:	e12f      	b.n	8000c54 <main+0x4fc>
					} else {
						currentState = INCORRECT_PIN;
 80009f4:	2304      	movs	r3, #4
 80009f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009fa:	e12b      	b.n	8000c54 <main+0x4fc>
 80009fc:	40021000 	.word	0x40021000
 8000a00:	48000800 	.word	0x48000800
 8000a04:	00155555 	.word	0x00155555
 8000a08:	0800291c 	.word	0x0800291c
 8000a0c:	08002928 	.word	0x08002928
 8000a10:	08002934 	.word	0x08002934
 8000a14:	08002944 	.word	0x08002944
 8000a18:	080029cc 	.word	0x080029cc
 8000a1c:	08002954 	.word	0x08002954
 8000a20:	0800295c 	.word	0x0800295c
 8000a24:	08002968 	.word	0x08002968
					}
				} else if (enteredChar!='\0' ) {
 8000a28:	7cbb      	ldrb	r3, [r7, #18]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d037      	beq.n	8000a9e <main+0x346>
					enteredPin[strlen(enteredPin) % 4] = enteredChar;
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fbc8 	bl	80001c8 <strlen>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	f003 0303 	and.w	r3, r3, #3
 8000a3e:	3328      	adds	r3, #40	; 0x28
 8000a40:	443b      	add	r3, r7
 8000a42:	7cba      	ldrb	r2, [r7, #18]
 8000a44:	f803 2c1c 	strb.w	r2, [r3, #-28]
					strcpy(buf_one, "Current PIN: ");
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	4a8d      	ldr	r2, [pc, #564]	; (8000c80 <main+0x528>)
 8000a4c:	461c      	mov	r4, r3
 8000a4e:	4613      	mov	r3, r2
 8000a50:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a52:	6020      	str	r0, [r4, #0]
 8000a54:	6061      	str	r1, [r4, #4]
 8000a56:	60a2      	str	r2, [r4, #8]
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	81a3      	strh	r3, [r4, #12]
					strcpy(buf_two, enteredPin);
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	4619      	mov	r1, r3
 8000a62:	6978      	ldr	r0, [r7, #20]
 8000a64:	f001 fc9f 	bl	80023a6 <strcpy>
					if(strcmp(buf_one, line_one) != 0 || strcmp(buf_two, line_two) != 0) displayLCD(buf_one, buf_two);
 8000a68:	6a39      	ldr	r1, [r7, #32]
 8000a6a:	69b8      	ldr	r0, [r7, #24]
 8000a6c:	f7ff fbb4 	bl	80001d8 <strcmp>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d106      	bne.n	8000a84 <main+0x32c>
 8000a76:	69f9      	ldr	r1, [r7, #28]
 8000a78:	6978      	ldr	r0, [r7, #20]
 8000a7a:	f7ff fbad 	bl	80001d8 <strcmp>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d003      	beq.n	8000a8c <main+0x334>
 8000a84:	6979      	ldr	r1, [r7, #20]
 8000a86:	69b8      	ldr	r0, [r7, #24]
 8000a88:	f7ff fe3c 	bl	8000704 <displayLCD>
					// copy over the buffer to the previous buffer
					strcpy(line_one, buf_one);
 8000a8c:	69b9      	ldr	r1, [r7, #24]
 8000a8e:	6a38      	ldr	r0, [r7, #32]
 8000a90:	f001 fc89 	bl	80023a6 <strcpy>
					strcpy(line_two, buf_two);
 8000a94:	6979      	ldr	r1, [r7, #20]
 8000a96:	69f8      	ldr	r0, [r7, #28]
 8000a98:	f001 fc85 	bl	80023a6 <strcpy>
 8000a9c:	e0da      	b.n	8000c54 <main+0x4fc>
				} else {
					strcpy(buf_one, "Current PIN: ");
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	4a77      	ldr	r2, [pc, #476]	; (8000c80 <main+0x528>)
 8000aa2:	461c      	mov	r4, r3
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000aa8:	6020      	str	r0, [r4, #0]
 8000aaa:	6061      	str	r1, [r4, #4]
 8000aac:	60a2      	str	r2, [r4, #8]
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	81a3      	strh	r3, [r4, #12]
					strcpy(buf_two, enteredPin);
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	6978      	ldr	r0, [r7, #20]
 8000aba:	f001 fc74 	bl	80023a6 <strcpy>
					if(strcmp(buf_one, line_one) != 0 || strcmp(buf_two, line_two) != 0) displayLCD(buf_one, buf_two);
 8000abe:	6a39      	ldr	r1, [r7, #32]
 8000ac0:	69b8      	ldr	r0, [r7, #24]
 8000ac2:	f7ff fb89 	bl	80001d8 <strcmp>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d106      	bne.n	8000ada <main+0x382>
 8000acc:	69f9      	ldr	r1, [r7, #28]
 8000ace:	6978      	ldr	r0, [r7, #20]
 8000ad0:	f7ff fb82 	bl	80001d8 <strcmp>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <main+0x38a>
 8000ada:	6979      	ldr	r1, [r7, #20]
 8000adc:	69b8      	ldr	r0, [r7, #24]
 8000ade:	f7ff fe11 	bl	8000704 <displayLCD>
					// copy over the buffer to the previous buffer
					strcpy(line_one, buf_one);
 8000ae2:	69b9      	ldr	r1, [r7, #24]
 8000ae4:	6a38      	ldr	r0, [r7, #32]
 8000ae6:	f001 fc5e 	bl	80023a6 <strcpy>
					strcpy(line_two, buf_two);
 8000aea:	6979      	ldr	r1, [r7, #20]
 8000aec:	69f8      	ldr	r0, [r7, #28]
 8000aee:	f001 fc5a 	bl	80023a6 <strcpy>
				}
			}
				break;
 8000af2:	e0af      	b.n	8000c54 <main+0x4fc>

			case INCORRECT_PIN:
				strcpy(buf_one, "Locked");
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	4a63      	ldr	r2, [pc, #396]	; (8000c84 <main+0x52c>)
 8000af8:	6810      	ldr	r0, [r2, #0]
 8000afa:	6018      	str	r0, [r3, #0]
 8000afc:	8891      	ldrh	r1, [r2, #4]
 8000afe:	7992      	ldrb	r2, [r2, #6]
 8000b00:	8099      	strh	r1, [r3, #4]
 8000b02:	719a      	strb	r2, [r3, #6]
				strcpy(buf_two, "Incorrect PIN");
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	4a60      	ldr	r2, [pc, #384]	; (8000c88 <main+0x530>)
 8000b08:	461c      	mov	r4, r3
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b0e:	6020      	str	r0, [r4, #0]
 8000b10:	6061      	str	r1, [r4, #4]
 8000b12:	60a2      	str	r2, [r4, #8]
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	81a3      	strh	r3, [r4, #12]
				if(strcmp(buf_one, line_one) != 0 || strcmp(buf_two, line_two) != 0) displayLCD(buf_one, buf_two);
 8000b18:	6a39      	ldr	r1, [r7, #32]
 8000b1a:	69b8      	ldr	r0, [r7, #24]
 8000b1c:	f7ff fb5c 	bl	80001d8 <strcmp>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d106      	bne.n	8000b34 <main+0x3dc>
 8000b26:	69f9      	ldr	r1, [r7, #28]
 8000b28:	6978      	ldr	r0, [r7, #20]
 8000b2a:	f7ff fb55 	bl	80001d8 <strcmp>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <main+0x3e4>
 8000b34:	6979      	ldr	r1, [r7, #20]
 8000b36:	69b8      	ldr	r0, [r7, #24]
 8000b38:	f7ff fde4 	bl	8000704 <displayLCD>
				// copy over the buffer to the previous buffer
				strcpy(line_one, buf_one);
 8000b3c:	69b9      	ldr	r1, [r7, #24]
 8000b3e:	6a38      	ldr	r0, [r7, #32]
 8000b40:	f001 fc31 	bl	80023a6 <strcpy>
				strcpy(line_two, buf_two);
 8000b44:	6979      	ldr	r1, [r7, #20]
 8000b46:	69f8      	ldr	r0, [r7, #28]
 8000b48:	f001 fc2d 	bl	80023a6 <strcpy>
				setLEDState(1); // LED ON
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f7ff fdc1 	bl	80006d4 <setLEDState>
				currentState = CLEAR_PIN;
 8000b52:	2302      	movs	r3, #2
 8000b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8000b58:	e07c      	b.n	8000c54 <main+0x4fc>

			case UNLOCK:
				strcpy(buf_one, "Unlocked");
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	494b      	ldr	r1, [pc, #300]	; (8000c8c <main+0x534>)
 8000b5e:	461a      	mov	r2, r3
 8000b60:	460b      	mov	r3, r1
 8000b62:	cb03      	ldmia	r3!, {r0, r1}
 8000b64:	6010      	str	r0, [r2, #0]
 8000b66:	6051      	str	r1, [r2, #4]
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	7213      	strb	r3, [r2, #8]
				strcpy(buf_two, "* to Lock");
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	4948      	ldr	r1, [pc, #288]	; (8000c90 <main+0x538>)
 8000b70:	461a      	mov	r2, r3
 8000b72:	460b      	mov	r3, r1
 8000b74:	cb03      	ldmia	r3!, {r0, r1}
 8000b76:	6010      	str	r0, [r2, #0]
 8000b78:	6051      	str	r1, [r2, #4]
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	8113      	strh	r3, [r2, #8]

				if(strcmp(buf_one, line_one) != 0 || strcmp(buf_two, line_two) != 0) displayLCD(buf_one, buf_two);
 8000b7e:	6a39      	ldr	r1, [r7, #32]
 8000b80:	69b8      	ldr	r0, [r7, #24]
 8000b82:	f7ff fb29 	bl	80001d8 <strcmp>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d106      	bne.n	8000b9a <main+0x442>
 8000b8c:	69f9      	ldr	r1, [r7, #28]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f7ff fb22 	bl	80001d8 <strcmp>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d003      	beq.n	8000ba2 <main+0x44a>
 8000b9a:	6979      	ldr	r1, [r7, #20]
 8000b9c:	69b8      	ldr	r0, [r7, #24]
 8000b9e:	f7ff fdb1 	bl	8000704 <displayLCD>
				// copy over the buffer to the previous buffer
				strcpy(line_one, buf_one);
 8000ba2:	69b9      	ldr	r1, [r7, #24]
 8000ba4:	6a38      	ldr	r0, [r7, #32]
 8000ba6:	f001 fbfe 	bl	80023a6 <strcpy>
				strcpy(line_two, buf_two);
 8000baa:	6979      	ldr	r1, [r7, #20]
 8000bac:	69f8      	ldr	r0, [r7, #28]
 8000bae:	f001 fbfa 	bl	80023a6 <strcpy>
				setLEDState(0); // LED OFF
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f7ff fd8e 	bl	80006d4 <setLEDState>
				printf("Access Granted!\n");
 8000bb8:	4836      	ldr	r0, [pc, #216]	; (8000c94 <main+0x53c>)
 8000bba:	f001 fba7 	bl	800230c <puts>
				currentState = CHANGE_PIN;
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8000bc4:	e046      	b.n	8000c54 <main+0x4fc>

			case CHANGE_PIN:
				strcpy(buf_one, "* to Lock");
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	4931      	ldr	r1, [pc, #196]	; (8000c90 <main+0x538>)
 8000bca:	461a      	mov	r2, r3
 8000bcc:	460b      	mov	r3, r1
 8000bce:	cb03      	ldmia	r3!, {r0, r1}
 8000bd0:	6010      	str	r0, [r2, #0]
 8000bd2:	6051      	str	r1, [r2, #4]
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	8113      	strh	r3, [r2, #8]
				strcpy(buf_two, "# to Change");
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	4a2f      	ldr	r2, [pc, #188]	; (8000c98 <main+0x540>)
 8000bdc:	461c      	mov	r4, r3
 8000bde:	4613      	mov	r3, r2
 8000be0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000be2:	6020      	str	r0, [r4, #0]
 8000be4:	6061      	str	r1, [r4, #4]
 8000be6:	60a2      	str	r2, [r4, #8]
				if(strcmp(buf_one, line_one) != 0 || strcmp(buf_two, line_two) != 0) displayLCD(buf_one, buf_two);
 8000be8:	6a39      	ldr	r1, [r7, #32]
 8000bea:	69b8      	ldr	r0, [r7, #24]
 8000bec:	f7ff faf4 	bl	80001d8 <strcmp>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d106      	bne.n	8000c04 <main+0x4ac>
 8000bf6:	69f9      	ldr	r1, [r7, #28]
 8000bf8:	6978      	ldr	r0, [r7, #20]
 8000bfa:	f7ff faed 	bl	80001d8 <strcmp>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d003      	beq.n	8000c0c <main+0x4b4>
 8000c04:	6979      	ldr	r1, [r7, #20]
 8000c06:	69b8      	ldr	r0, [r7, #24]
 8000c08:	f7ff fd7c 	bl	8000704 <displayLCD>
				// copy over the buffer to the previous buffer
				strcpy(line_one, buf_one);
 8000c0c:	69b9      	ldr	r1, [r7, #24]
 8000c0e:	6a38      	ldr	r0, [r7, #32]
 8000c10:	f001 fbc9 	bl	80023a6 <strcpy>
				strcpy(line_two, buf_two);
 8000c14:	6979      	ldr	r1, [r7, #20]
 8000c16:	69f8      	ldr	r0, [r7, #28]
 8000c18:	f001 fbc5 	bl	80023a6 <strcpy>
				// Reset the entered pin to ""
				char enteredChar = readChar();
 8000c1c:	f7ff fc24 	bl	8000468 <readChar>
 8000c20:	4603      	mov	r3, r0
 8000c22:	74fb      	strb	r3, [r7, #19]
				// read the next input for the next state
				if (enteredChar == '#') {
 8000c24:	7cfb      	ldrb	r3, [r7, #19]
 8000c26:	2b23      	cmp	r3, #35	; 0x23
 8000c28:	d105      	bne.n	8000c36 <main+0x4de>
					// reset the correct pin to ""
					correctPin[0] = '\0';
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	713b      	strb	r3, [r7, #4]
					currentState = CLEAR_PIN;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c34:	e00e      	b.n	8000c54 <main+0x4fc>
				}
				else if (enteredChar == '*') {
 8000c36:	7cfb      	ldrb	r3, [r7, #19]
 8000c38:	2b2a      	cmp	r3, #42	; 0x2a
 8000c3a:	d106      	bne.n	8000c4a <main+0x4f2>
					currentState = CLEAR_PIN;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					setLEDState(1);
 8000c42:	2001      	movs	r0, #1
 8000c44:	f7ff fd46 	bl	80006d4 <setLEDState>
 8000c48:	e004      	b.n	8000c54 <main+0x4fc>
				}
				else currentState = CHANGE_PIN;
 8000c4a:	2306      	movs	r3, #6
 8000c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


				// Placeholder for pin change functionality
				break;
 8000c50:	e000      	b.n	8000c54 <main+0x4fc>

			default:
				break;
 8000c52:	bf00      	nop
	while (currentState != END) {
 8000c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c58:	2b07      	cmp	r3, #7
 8000c5a:	f47f ae02 	bne.w	8000862 <main+0x10a>
		}
	}
	free(buf_one);
 8000c5e:	69b8      	ldr	r0, [r7, #24]
 8000c60:	f001 f98a 	bl	8001f78 <free>
	free(buf_two);
 8000c64:	6978      	ldr	r0, [r7, #20]
 8000c66:	f001 f987 	bl	8001f78 <free>
	free(line_one);
 8000c6a:	6a38      	ldr	r0, [r7, #32]
 8000c6c:	f001 f984 	bl	8001f78 <free>
	free(line_two);
 8000c70:	69f8      	ldr	r0, [r7, #28]
 8000c72:	f001 f981 	bl	8001f78 <free>
	return 0;
 8000c76:	2300      	movs	r3, #0
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3728      	adds	r7, #40	; 0x28
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bdb0      	pop	{r4, r5, r7, pc}
 8000c80:	08002978 	.word	0x08002978
 8000c84:	08002954 	.word	0x08002954
 8000c88:	08002988 	.word	0x08002988
 8000c8c:	08002998 	.word	0x08002998
 8000c90:	080029a4 	.word	0x080029a4
 8000c94:	080029b0 	.word	0x080029b0
 8000c98:	080029c0 	.word	0x080029c0

08000c9c <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b096      	sub	sp, #88	; 0x58
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	2244      	movs	r2, #68	; 0x44
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 fb36 	bl	800231c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cbe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cc2:	f000 fb33 	bl	800132c <HAL_PWREx_ControlVoltageScaling>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ccc:	f000 f837 	bl	8000d3e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cda:	2310      	movs	r3, #16
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000cea:	230a      	movs	r3, #10
 8000cec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cee:	2307      	movs	r3, #7
 8000cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 fb6a 	bl	80013d8 <HAL_RCC_OscConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000d0a:	f000 f818 	bl	8000d3e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0e:	230f      	movs	r3, #15
 8000d10:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d12:	2303      	movs	r3, #3
 8000d14:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d22:	463b      	mov	r3, r7
 8000d24:	2104      	movs	r1, #4
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 ff32 	bl	8001b90 <HAL_RCC_ClockConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d32:	f000 f804 	bl	8000d3e <Error_Handler>
  }
}
 8000d36:	bf00      	nop
 8000d38:	3758      	adds	r7, #88	; 0x58
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d42:	b672      	cpsid	i
}
 8000d44:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <Error_Handler+0x8>

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_MspInit+0x44>)
 8000d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d52:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <HAL_MspInit+0x44>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6613      	str	r3, [r2, #96]	; 0x60
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <HAL_MspInit+0x44>)
 8000d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_MspInit+0x44>)
 8000d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6a:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_MspInit+0x44>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d70:	6593      	str	r3, [r2, #88]	; 0x58
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_MspInit+0x44>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40021000 	.word	0x40021000

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d94:	e7fe      	b.n	8000d94 <NMI_Handler+0x4>

08000d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <MemManage_Handler+0x4>

08000da2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <UsageFault_Handler+0x4>

08000dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ddc:	f000 f93e 	bl	800105c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	e00a      	b.n	8000e0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000df6:	f3af 8000 	nop.w
 8000dfa:	4601      	mov	r1, r0
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	60ba      	str	r2, [r7, #8]
 8000e02:	b2ca      	uxtb	r2, r1
 8000e04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	dbf0      	blt.n	8000df6 <_read+0x12>
  }

  return len;
 8000e14:	687b      	ldr	r3, [r7, #4]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	60f8      	str	r0, [r7, #12]
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	e009      	b.n	8000e44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	1c5a      	adds	r2, r3, #1
 8000e34:	60ba      	str	r2, [r7, #8]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	3301      	adds	r3, #1
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	697a      	ldr	r2, [r7, #20]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	dbf1      	blt.n	8000e30 <_write+0x12>
  }
  return len;
 8000e4c:	687b      	ldr	r3, [r7, #4]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <_close>:

int _close(int file)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e7e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <_isatty>:

int _isatty(int file)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec8:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <_sbrk+0x5c>)
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <_sbrk+0x60>)
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <_sbrk+0x64>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <_sbrk+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d207      	bcs.n	8000f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef0:	f001 fa2c 	bl	800234c <__errno>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000efe:	e009      	b.n	8000f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f06:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <_sbrk+0x64>)
 8000f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20018000 	.word	0x20018000
 8000f20:	00000400 	.word	0x00000400
 8000f24:	20000094 	.word	0x20000094
 8000f28:	200001e8 	.word	0x200001e8

08000f2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <SystemInit+0x20>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <SystemInit+0x20>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f54:	f7ff ffea 	bl	8000f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f58:	480c      	ldr	r0, [pc, #48]	; (8000f8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f5a:	490d      	ldr	r1, [pc, #52]	; (8000f90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <LoopForever+0xe>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f60:	e002      	b.n	8000f68 <LoopCopyDataInit>

08000f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f66:	3304      	adds	r3, #4

08000f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f6c:	d3f9      	bcc.n	8000f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f70:	4c0a      	ldr	r4, [pc, #40]	; (8000f9c <LoopForever+0x16>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f74:	e001      	b.n	8000f7a <LoopFillZerobss>

08000f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f78:	3204      	adds	r2, #4

08000f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f7c:	d3fb      	bcc.n	8000f76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f7e:	f001 f9eb 	bl	8002358 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f82:	f7ff fbe9 	bl	8000758 <main>

08000f86 <LoopForever>:

LoopForever:
    b LoopForever
 8000f86:	e7fe      	b.n	8000f86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f90:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f94:	08002a1c 	.word	0x08002a1c
  ldr r2, =_sbss
 8000f98:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f9c:	200001e8 	.word	0x200001e8

08000fa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC1_2_IRQHandler>
	...

08000fa4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <HAL_Init+0x3c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <HAL_Init+0x3c>)
 8000fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fba:	2003      	movs	r0, #3
 8000fbc:	f000 f944 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 f80f 	bl	8000fe4 <HAL_InitTick>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	e001      	b.n	8000fd6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fd2:	f7ff feb9 	bl	8000d48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40022000 	.word	0x40022000

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_InitTick+0x6c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d023      	beq.n	8001040 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <HAL_InitTick+0x70>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_InitTick+0x6c>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	fbb3 f3f1 	udiv	r3, r3, r1
 800100a:	fbb2 f3f3 	udiv	r3, r2, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f941 	bl	8001296 <HAL_SYSTICK_Config>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10f      	bne.n	800103a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d809      	bhi.n	8001034 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001028:	f000 f919 	bl	800125e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800102c:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <HAL_InitTick+0x74>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	e007      	b.n	8001044 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e004      	b.n	8001044 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	73fb      	strb	r3, [r7, #15]
 800103e:	e001      	b.n	8001044 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001044:	7bfb      	ldrb	r3, [r7, #15]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000018 	.word	0x20000018
 8001054:	20000010 	.word	0x20000010
 8001058:	20000014 	.word	0x20000014

0800105c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x20>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x24>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4413      	add	r3, r2
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_IncTick+0x24>)
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000018 	.word	0x20000018
 8001080:	20000098 	.word	0x20000098

08001084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_GetTick+0x14>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000098 	.word	0x20000098

0800109c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a4:	f7ff ffee 	bl	8001084 <HAL_GetTick>
 80010a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010b4:	d005      	beq.n	80010c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_Delay+0x44>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4413      	add	r3, r2
 80010c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010c2:	bf00      	nop
 80010c4:	f7ff ffde 	bl	8001084 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d8f7      	bhi.n	80010c4 <HAL_Delay+0x28>
  {
  }
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000018 	.word	0x20000018

080010e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001100:	4013      	ands	r3, r2
 8001102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800110c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001116:	4a04      	ldr	r2, [pc, #16]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	60d3      	str	r3, [r2, #12]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <__NVIC_GetPriorityGrouping+0x18>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	f003 0307 	and.w	r3, r3, #7
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001214:	d301      	bcc.n	800121a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001216:	2301      	movs	r3, #1
 8001218:	e00f      	b.n	800123a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <SysTick_Config+0x40>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001222:	210f      	movs	r1, #15
 8001224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001228:	f7ff ff8e 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SysTick_Config+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SysTick_Config+0x40>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff47 	bl	80010e4 <__NVIC_SetPriorityGrouping>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001270:	f7ff ff5c 	bl	800112c <__NVIC_GetPriorityGrouping>
 8001274:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f7ff ff8e 	bl	800119c <NVIC_EncodePriority>
 8001280:	4602      	mov	r2, r0
 8001282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff5d 	bl	8001148 <__NVIC_SetPriority>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ffb0 	bl	8001204 <SysTick_Config>
 80012a4:	4603      	mov	r3, r0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b085      	sub	sp, #20
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	460b      	mov	r3, r1
 80012b8:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691a      	ldr	r2, [r3, #16]
 80012be:	887b      	ldrh	r3, [r7, #2]
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012c6:	2301      	movs	r3, #1
 80012c8:	73fb      	strb	r3, [r7, #15]
 80012ca:	e001      	b.n	80012d0 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	460b      	mov	r3, r1
 80012e8:	807b      	strh	r3, [r7, #2]
 80012ea:	4613      	mov	r3, r2
 80012ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ee:	787b      	ldrb	r3, [r7, #1]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012f4:	887a      	ldrh	r2, [r7, #2]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012fa:	e002      	b.n	8001302 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012fc:	887a      	ldrh	r2, [r7, #2]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <HAL_PWREx_GetVoltageRange+0x18>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	40007000 	.word	0x40007000

0800132c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800133a:	d130      	bne.n	800139e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800133c:	4b23      	ldr	r3, [pc, #140]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001348:	d038      	beq.n	80013bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001352:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001354:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001358:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2232      	movs	r2, #50	; 0x32
 8001360:	fb02 f303 	mul.w	r3, r2, r3
 8001364:	4a1b      	ldr	r2, [pc, #108]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001366:	fba2 2303 	umull	r2, r3, r2, r3
 800136a:	0c9b      	lsrs	r3, r3, #18
 800136c:	3301      	adds	r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001370:	e002      	b.n	8001378 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3b01      	subs	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001384:	d102      	bne.n	800138c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f2      	bne.n	8001372 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001398:	d110      	bne.n	80013bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e00f      	b.n	80013be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013aa:	d007      	beq.n	80013bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013b4:	4a05      	ldr	r2, [pc, #20]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40007000 	.word	0x40007000
 80013d0:	20000010 	.word	0x20000010
 80013d4:	431bde83 	.word	0x431bde83

080013d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e3ca      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ea:	4b97      	ldr	r3, [pc, #604]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013f4:	4b94      	ldr	r3, [pc, #592]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 80e4 	beq.w	80015d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d007      	beq.n	8001422 <HAL_RCC_OscConfig+0x4a>
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	2b0c      	cmp	r3, #12
 8001416:	f040 808b 	bne.w	8001530 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	2b01      	cmp	r3, #1
 800141e:	f040 8087 	bne.w	8001530 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001422:	4b89      	ldr	r3, [pc, #548]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d005      	beq.n	800143a <HAL_RCC_OscConfig+0x62>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e3a2      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a1a      	ldr	r2, [r3, #32]
 800143e:	4b82      	ldr	r3, [pc, #520]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	2b00      	cmp	r3, #0
 8001448:	d004      	beq.n	8001454 <HAL_RCC_OscConfig+0x7c>
 800144a:	4b7f      	ldr	r3, [pc, #508]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001452:	e005      	b.n	8001460 <HAL_RCC_OscConfig+0x88>
 8001454:	4b7c      	ldr	r3, [pc, #496]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 8001456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001460:	4293      	cmp	r3, r2
 8001462:	d223      	bcs.n	80014ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4618      	mov	r0, r3
 800146a:	f000 fd1d 	bl	8001ea8 <RCC_SetFlashLatencyFromMSIRange>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e383      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001478:	4b73      	ldr	r3, [pc, #460]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a72      	ldr	r2, [pc, #456]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 800147e:	f043 0308 	orr.w	r3, r3, #8
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b70      	ldr	r3, [pc, #448]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	496d      	ldr	r1, [pc, #436]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001496:	4b6c      	ldr	r3, [pc, #432]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	4968      	ldr	r1, [pc, #416]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	604b      	str	r3, [r1, #4]
 80014aa:	e025      	b.n	80014f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ac:	4b66      	ldr	r3, [pc, #408]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a65      	ldr	r2, [pc, #404]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 80014b2:	f043 0308 	orr.w	r3, r3, #8
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b63      	ldr	r3, [pc, #396]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4960      	ldr	r1, [pc, #384]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ca:	4b5f      	ldr	r3, [pc, #380]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	021b      	lsls	r3, r3, #8
 80014d8:	495b      	ldr	r1, [pc, #364]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d109      	bne.n	80014f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 fcdd 	bl	8001ea8 <RCC_SetFlashLatencyFromMSIRange>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e343      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014f8:	f000 fc4a 	bl	8001d90 <HAL_RCC_GetSysClockFreq>
 80014fc:	4602      	mov	r2, r0
 80014fe:	4b52      	ldr	r3, [pc, #328]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	091b      	lsrs	r3, r3, #4
 8001504:	f003 030f 	and.w	r3, r3, #15
 8001508:	4950      	ldr	r1, [pc, #320]	; (800164c <HAL_RCC_OscConfig+0x274>)
 800150a:	5ccb      	ldrb	r3, [r1, r3]
 800150c:	f003 031f 	and.w	r3, r3, #31
 8001510:	fa22 f303 	lsr.w	r3, r2, r3
 8001514:	4a4e      	ldr	r2, [pc, #312]	; (8001650 <HAL_RCC_OscConfig+0x278>)
 8001516:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001518:	4b4e      	ldr	r3, [pc, #312]	; (8001654 <HAL_RCC_OscConfig+0x27c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fd61 	bl	8000fe4 <HAL_InitTick>
 8001522:	4603      	mov	r3, r0
 8001524:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d052      	beq.n	80015d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	e327      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d032      	beq.n	800159e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001538:	4b43      	ldr	r3, [pc, #268]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a42      	ldr	r2, [pc, #264]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001544:	f7ff fd9e 	bl	8001084 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800154c:	f7ff fd9a 	bl	8001084 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e310      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800155e:	4b3a      	ldr	r3, [pc, #232]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800156a:	4b37      	ldr	r3, [pc, #220]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a36      	ldr	r2, [pc, #216]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 8001570:	f043 0308 	orr.w	r3, r3, #8
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4b34      	ldr	r3, [pc, #208]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	4931      	ldr	r1, [pc, #196]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 8001584:	4313      	orrs	r3, r2
 8001586:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001588:	4b2f      	ldr	r3, [pc, #188]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	492c      	ldr	r1, [pc, #176]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 8001598:	4313      	orrs	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
 800159c:	e01a      	b.n	80015d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800159e:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a29      	ldr	r2, [pc, #164]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015aa:	f7ff fd6b 	bl	8001084 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015b2:	f7ff fd67 	bl	8001084 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e2dd      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015c4:	4b20      	ldr	r3, [pc, #128]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1f0      	bne.n	80015b2 <HAL_RCC_OscConfig+0x1da>
 80015d0:	e000      	b.n	80015d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d074      	beq.n	80016ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d005      	beq.n	80015f2 <HAL_RCC_OscConfig+0x21a>
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b0c      	cmp	r3, #12
 80015ea:	d10e      	bne.n	800160a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d10b      	bne.n	800160a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d064      	beq.n	80016c8 <HAL_RCC_OscConfig+0x2f0>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d160      	bne.n	80016c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e2ba      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001612:	d106      	bne.n	8001622 <HAL_RCC_OscConfig+0x24a>
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 800161a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	e026      	b.n	8001670 <HAL_RCC_OscConfig+0x298>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800162a:	d115      	bne.n	8001658 <HAL_RCC_OscConfig+0x280>
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a05      	ldr	r2, [pc, #20]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 8001632:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a02      	ldr	r2, [pc, #8]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 800163e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	e014      	b.n	8001670 <HAL_RCC_OscConfig+0x298>
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000
 800164c:	080029d4 	.word	0x080029d4
 8001650:	20000010 	.word	0x20000010
 8001654:	20000014 	.word	0x20000014
 8001658:	4ba0      	ldr	r3, [pc, #640]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a9f      	ldr	r2, [pc, #636]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 800165e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b9d      	ldr	r3, [pc, #628]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a9c      	ldr	r2, [pc, #624]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 800166a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800166e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d013      	beq.n	80016a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff fd04 	bl	8001084 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001680:	f7ff fd00 	bl	8001084 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b64      	cmp	r3, #100	; 0x64
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e276      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001692:	4b92      	ldr	r3, [pc, #584]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0x2a8>
 800169e:	e014      	b.n	80016ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a0:	f7ff fcf0 	bl	8001084 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a8:	f7ff fcec 	bl	8001084 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b64      	cmp	r3, #100	; 0x64
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e262      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ba:	4b88      	ldr	r3, [pc, #544]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x2d0>
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d060      	beq.n	8001798 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	2b04      	cmp	r3, #4
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_OscConfig+0x310>
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2b0c      	cmp	r3, #12
 80016e0:	d119      	bne.n	8001716 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d116      	bne.n	8001716 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e8:	4b7c      	ldr	r3, [pc, #496]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_RCC_OscConfig+0x328>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e23f      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001700:	4b76      	ldr	r3, [pc, #472]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	061b      	lsls	r3, r3, #24
 800170e:	4973      	ldr	r1, [pc, #460]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 8001710:	4313      	orrs	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001714:	e040      	b.n	8001798 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d023      	beq.n	8001766 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800171e:	4b6f      	ldr	r3, [pc, #444]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a6e      	ldr	r2, [pc, #440]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 8001724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172a:	f7ff fcab 	bl	8001084 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001732:	f7ff fca7 	bl	8001084 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e21d      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001744:	4b65      	ldr	r3, [pc, #404]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001750:	4b62      	ldr	r3, [pc, #392]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	061b      	lsls	r3, r3, #24
 800175e:	495f      	ldr	r1, [pc, #380]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
 8001764:	e018      	b.n	8001798 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001766:	4b5d      	ldr	r3, [pc, #372]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a5c      	ldr	r2, [pc, #368]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 800176c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001772:	f7ff fc87 	bl	8001084 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177a:	f7ff fc83 	bl	8001084 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e1f9      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800178c:	4b53      	ldr	r3, [pc, #332]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f0      	bne.n	800177a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d03c      	beq.n	800181e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d01c      	beq.n	80017e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ac:	4b4b      	ldr	r3, [pc, #300]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 80017ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b2:	4a4a      	ldr	r2, [pc, #296]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017bc:	f7ff fc62 	bl	8001084 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c4:	f7ff fc5e 	bl	8001084 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e1d4      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017d6:	4b41      	ldr	r3, [pc, #260]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 80017d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0ef      	beq.n	80017c4 <HAL_RCC_OscConfig+0x3ec>
 80017e4:	e01b      	b.n	800181e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e6:	4b3d      	ldr	r3, [pc, #244]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 80017e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ec:	4a3b      	ldr	r2, [pc, #236]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f6:	f7ff fc45 	bl	8001084 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017fe:	f7ff fc41 	bl	8001084 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e1b7      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001810:	4b32      	ldr	r3, [pc, #200]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 8001812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1ef      	bne.n	80017fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 80a6 	beq.w	8001978 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800182c:	2300      	movs	r3, #0
 800182e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001830:	4b2a      	ldr	r3, [pc, #168]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 8001832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10d      	bne.n	8001858 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800183c:	4b27      	ldr	r3, [pc, #156]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 800183e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001840:	4a26      	ldr	r2, [pc, #152]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 8001842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001846:	6593      	str	r3, [r2, #88]	; 0x58
 8001848:	4b24      	ldr	r3, [pc, #144]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 800184a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001854:	2301      	movs	r3, #1
 8001856:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001858:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <HAL_RCC_OscConfig+0x508>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001860:	2b00      	cmp	r3, #0
 8001862:	d118      	bne.n	8001896 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <HAL_RCC_OscConfig+0x508>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a1d      	ldr	r2, [pc, #116]	; (80018e0 <HAL_RCC_OscConfig+0x508>)
 800186a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001870:	f7ff fc08 	bl	8001084 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001878:	f7ff fc04 	bl	8001084 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e17a      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_RCC_OscConfig+0x508>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d108      	bne.n	80018b0 <HAL_RCC_OscConfig+0x4d8>
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 80018a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a4:	4a0d      	ldr	r2, [pc, #52]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ae:	e029      	b.n	8001904 <HAL_RCC_OscConfig+0x52c>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b05      	cmp	r3, #5
 80018b6:	d115      	bne.n	80018e4 <HAL_RCC_OscConfig+0x50c>
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 80018ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018be:	4a07      	ldr	r2, [pc, #28]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 80018c0:	f043 0304 	orr.w	r3, r3, #4
 80018c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 80018ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ce:	4a03      	ldr	r2, [pc, #12]	; (80018dc <HAL_RCC_OscConfig+0x504>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018d8:	e014      	b.n	8001904 <HAL_RCC_OscConfig+0x52c>
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40007000 	.word	0x40007000
 80018e4:	4b9c      	ldr	r3, [pc, #624]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 80018e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ea:	4a9b      	ldr	r2, [pc, #620]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 80018ec:	f023 0301 	bic.w	r3, r3, #1
 80018f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018f4:	4b98      	ldr	r3, [pc, #608]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 80018f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fa:	4a97      	ldr	r2, [pc, #604]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 80018fc:	f023 0304 	bic.w	r3, r3, #4
 8001900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d016      	beq.n	800193a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190c:	f7ff fbba 	bl	8001084 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001912:	e00a      	b.n	800192a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001914:	f7ff fbb6 	bl	8001084 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e12a      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800192a:	4b8b      	ldr	r3, [pc, #556]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 800192c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0ed      	beq.n	8001914 <HAL_RCC_OscConfig+0x53c>
 8001938:	e015      	b.n	8001966 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193a:	f7ff fba3 	bl	8001084 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001940:	e00a      	b.n	8001958 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001942:	f7ff fb9f 	bl	8001084 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001950:	4293      	cmp	r3, r2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e113      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001958:	4b7f      	ldr	r3, [pc, #508]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 800195a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1ed      	bne.n	8001942 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001966:	7ffb      	ldrb	r3, [r7, #31]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d105      	bne.n	8001978 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800196c:	4b7a      	ldr	r3, [pc, #488]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 800196e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001970:	4a79      	ldr	r2, [pc, #484]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 8001972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001976:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80fe 	beq.w	8001b7e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001986:	2b02      	cmp	r3, #2
 8001988:	f040 80d0 	bne.w	8001b2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800198c:	4b72      	ldr	r3, [pc, #456]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f003 0203 	and.w	r2, r3, #3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	429a      	cmp	r2, r3
 800199e:	d130      	bne.n	8001a02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	3b01      	subs	r3, #1
 80019ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d127      	bne.n	8001a02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d11f      	bne.n	8001a02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019cc:	2a07      	cmp	r2, #7
 80019ce:	bf14      	ite	ne
 80019d0:	2201      	movne	r2, #1
 80019d2:	2200      	moveq	r2, #0
 80019d4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d113      	bne.n	8001a02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e4:	085b      	lsrs	r3, r3, #1
 80019e6:	3b01      	subs	r3, #1
 80019e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d109      	bne.n	8001a02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	085b      	lsrs	r3, r3, #1
 80019fa:	3b01      	subs	r3, #1
 80019fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d06e      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	2b0c      	cmp	r3, #12
 8001a06:	d069      	beq.n	8001adc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a08:	4b53      	ldr	r3, [pc, #332]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d105      	bne.n	8001a20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a14:	4b50      	ldr	r3, [pc, #320]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0ad      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a24:	4b4c      	ldr	r3, [pc, #304]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a4b      	ldr	r2, [pc, #300]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 8001a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a30:	f7ff fb28 	bl	8001084 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a38:	f7ff fb24 	bl	8001084 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e09a      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a4a:	4b43      	ldr	r3, [pc, #268]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a56:	4b40      	ldr	r3, [pc, #256]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	4b40      	ldr	r3, [pc, #256]	; (8001b5c <HAL_RCC_OscConfig+0x784>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a66:	3a01      	subs	r2, #1
 8001a68:	0112      	lsls	r2, r2, #4
 8001a6a:	4311      	orrs	r1, r2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a70:	0212      	lsls	r2, r2, #8
 8001a72:	4311      	orrs	r1, r2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a78:	0852      	lsrs	r2, r2, #1
 8001a7a:	3a01      	subs	r2, #1
 8001a7c:	0552      	lsls	r2, r2, #21
 8001a7e:	4311      	orrs	r1, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a84:	0852      	lsrs	r2, r2, #1
 8001a86:	3a01      	subs	r2, #1
 8001a88:	0652      	lsls	r2, r2, #25
 8001a8a:	4311      	orrs	r1, r2
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a90:	0912      	lsrs	r2, r2, #4
 8001a92:	0452      	lsls	r2, r2, #17
 8001a94:	430a      	orrs	r2, r1
 8001a96:	4930      	ldr	r1, [pc, #192]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a9c:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a2d      	ldr	r2, [pc, #180]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 8001aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aa6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001aa8:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4a2a      	ldr	r2, [pc, #168]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 8001aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ab2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ab4:	f7ff fae6 	bl	8001084 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abc:	f7ff fae2 	bl	8001084 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e058      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ace:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ada:	e050      	b.n	8001b7e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e04f      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d148      	bne.n	8001b7e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a19      	ldr	r2, [pc, #100]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 8001af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001af6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001af8:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4a16      	ldr	r2, [pc, #88]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 8001afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b04:	f7ff fabe 	bl	8001084 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7ff faba 	bl	8001084 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e030      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x734>
 8001b2a:	e028      	b.n	8001b7e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2b0c      	cmp	r3, #12
 8001b30:	d023      	beq.n	8001b7a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a08      	ldr	r2, [pc, #32]	; (8001b58 <HAL_RCC_OscConfig+0x780>)
 8001b38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3e:	f7ff faa1 	bl	8001084 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b44:	e00c      	b.n	8001b60 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b46:	f7ff fa9d 	bl	8001084 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d905      	bls.n	8001b60 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e013      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_RCC_OscConfig+0x7b0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1ec      	bne.n	8001b46 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_RCC_OscConfig+0x7b0>)
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	4905      	ldr	r1, [pc, #20]	; (8001b88 <HAL_RCC_OscConfig+0x7b0>)
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_RCC_OscConfig+0x7b4>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	60cb      	str	r3, [r1, #12]
 8001b78:	e001      	b.n	8001b7e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	feeefffc 	.word	0xfeeefffc

08001b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0e7      	b.n	8001d74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba4:	4b75      	ldr	r3, [pc, #468]	; (8001d7c <HAL_RCC_ClockConfig+0x1ec>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d910      	bls.n	8001bd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb2:	4b72      	ldr	r3, [pc, #456]	; (8001d7c <HAL_RCC_ClockConfig+0x1ec>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 0207 	bic.w	r2, r3, #7
 8001bba:	4970      	ldr	r1, [pc, #448]	; (8001d7c <HAL_RCC_ClockConfig+0x1ec>)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc2:	4b6e      	ldr	r3, [pc, #440]	; (8001d7c <HAL_RCC_ClockConfig+0x1ec>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0cf      	b.n	8001d74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d010      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	4b66      	ldr	r3, [pc, #408]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d908      	bls.n	8001c02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf0:	4b63      	ldr	r3, [pc, #396]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	4960      	ldr	r1, [pc, #384]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d04c      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d107      	bne.n	8001c26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c16:	4b5a      	ldr	r3, [pc, #360]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d121      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0a6      	b.n	8001d74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c2e:	4b54      	ldr	r3, [pc, #336]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d115      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e09a      	b.n	8001d74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c46:	4b4e      	ldr	r3, [pc, #312]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d109      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e08e      	b.n	8001d74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c56:	4b4a      	ldr	r3, [pc, #296]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e086      	b.n	8001d74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c66:	4b46      	ldr	r3, [pc, #280]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f023 0203 	bic.w	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4943      	ldr	r1, [pc, #268]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c78:	f7ff fa04 	bl	8001084 <HAL_GetTick>
 8001c7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7e:	e00a      	b.n	8001c96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c80:	f7ff fa00 	bl	8001084 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e06e      	b.n	8001d74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	4b3a      	ldr	r3, [pc, #232]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 020c 	and.w	r2, r3, #12
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d1eb      	bne.n	8001c80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d010      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d208      	bcs.n	8001cd6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc4:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	492b      	ldr	r1, [pc, #172]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd6:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <HAL_RCC_ClockConfig+0x1ec>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d210      	bcs.n	8001d06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce4:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <HAL_RCC_ClockConfig+0x1ec>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f023 0207 	bic.w	r2, r3, #7
 8001cec:	4923      	ldr	r1, [pc, #140]	; (8001d7c <HAL_RCC_ClockConfig+0x1ec>)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf4:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <HAL_RCC_ClockConfig+0x1ec>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d001      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e036      	b.n	8001d74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d008      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d12:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	4918      	ldr	r1, [pc, #96]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d009      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4910      	ldr	r1, [pc, #64]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d44:	f000 f824 	bl	8001d90 <HAL_RCC_GetSysClockFreq>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	091b      	lsrs	r3, r3, #4
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	490b      	ldr	r1, [pc, #44]	; (8001d84 <HAL_RCC_ClockConfig+0x1f4>)
 8001d56:	5ccb      	ldrb	r3, [r1, r3]
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d60:	4a09      	ldr	r2, [pc, #36]	; (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001d62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <HAL_RCC_ClockConfig+0x1fc>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff f93b 	bl	8000fe4 <HAL_InitTick>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d72:	7afb      	ldrb	r3, [r7, #11]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40022000 	.word	0x40022000
 8001d80:	40021000 	.word	0x40021000
 8001d84:	080029d4 	.word	0x080029d4
 8001d88:	20000010 	.word	0x20000010
 8001d8c:	20000014 	.word	0x20000014

08001d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	; 0x24
 8001d94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d9e:	4b3e      	ldr	r3, [pc, #248]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001da8:	4b3b      	ldr	r3, [pc, #236]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	2b0c      	cmp	r3, #12
 8001dbc:	d121      	bne.n	8001e02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d11e      	bne.n	8001e02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001dc4:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d107      	bne.n	8001de0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dd0:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd6:	0a1b      	lsrs	r3, r3, #8
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	e005      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001de0:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	091b      	lsrs	r3, r3, #4
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dec:	4a2b      	ldr	r2, [pc, #172]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10d      	bne.n	8001e18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e00:	e00a      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d102      	bne.n	8001e0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e08:	4b25      	ldr	r3, [pc, #148]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	e004      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e14:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	2b0c      	cmp	r3, #12
 8001e1c:	d134      	bne.n	8001e88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e1e:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d003      	beq.n	8001e36 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d003      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0xac>
 8001e34:	e005      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e36:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e38:	617b      	str	r3, [r7, #20]
      break;
 8001e3a:	e005      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e3c:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e3e:	617b      	str	r3, [r7, #20]
      break;
 8001e40:	e002      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	617b      	str	r3, [r7, #20]
      break;
 8001e46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e48:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	3301      	adds	r3, #1
 8001e54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	0a1b      	lsrs	r3, r3, #8
 8001e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	fb03 f202 	mul.w	r2, r3, r2
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	0e5b      	lsrs	r3, r3, #25
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	3301      	adds	r3, #1
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e88:	69bb      	ldr	r3, [r7, #24]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3724      	adds	r7, #36	; 0x24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	080029e4 	.word	0x080029e4
 8001ea0:	00f42400 	.word	0x00f42400
 8001ea4:	007a1200 	.word	0x007a1200

08001ea8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ec0:	f7ff fa26 	bl	8001310 <HAL_PWREx_GetVoltageRange>
 8001ec4:	6178      	str	r0, [r7, #20]
 8001ec6:	e014      	b.n	8001ef2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ec8:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ecc:	4a24      	ldr	r2, [pc, #144]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed4:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ee0:	f7ff fa16 	bl	8001310 <HAL_PWREx_GetVoltageRange>
 8001ee4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eea:	4a1d      	ldr	r2, [pc, #116]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef8:	d10b      	bne.n	8001f12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b80      	cmp	r3, #128	; 0x80
 8001efe:	d919      	bls.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2ba0      	cmp	r3, #160	; 0xa0
 8001f04:	d902      	bls.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f06:	2302      	movs	r3, #2
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	e013      	b.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	e010      	b.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b80      	cmp	r3, #128	; 0x80
 8001f16:	d902      	bls.n	8001f1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f18:	2303      	movs	r3, #3
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	e00a      	b.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b80      	cmp	r3, #128	; 0x80
 8001f22:	d102      	bne.n	8001f2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f24:	2302      	movs	r3, #2
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	e004      	b.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b70      	cmp	r3, #112	; 0x70
 8001f2e:	d101      	bne.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f30:	2301      	movs	r3, #1
 8001f32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f023 0207 	bic.w	r2, r3, #7
 8001f3c:	4909      	ldr	r1, [pc, #36]	; (8001f64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f44:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d001      	beq.n	8001f56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40022000 	.word	0x40022000

08001f68 <malloc>:
 8001f68:	4b02      	ldr	r3, [pc, #8]	; (8001f74 <malloc+0xc>)
 8001f6a:	4601      	mov	r1, r0
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	f000 b82b 	b.w	8001fc8 <_malloc_r>
 8001f72:	bf00      	nop
 8001f74:	20000074 	.word	0x20000074

08001f78 <free>:
 8001f78:	4b02      	ldr	r3, [pc, #8]	; (8001f84 <free+0xc>)
 8001f7a:	4601      	mov	r1, r0
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	f000 ba1b 	b.w	80023b8 <_free_r>
 8001f82:	bf00      	nop
 8001f84:	20000074 	.word	0x20000074

08001f88 <sbrk_aligned>:
 8001f88:	b570      	push	{r4, r5, r6, lr}
 8001f8a:	4e0e      	ldr	r6, [pc, #56]	; (8001fc4 <sbrk_aligned+0x3c>)
 8001f8c:	460c      	mov	r4, r1
 8001f8e:	6831      	ldr	r1, [r6, #0]
 8001f90:	4605      	mov	r5, r0
 8001f92:	b911      	cbnz	r1, 8001f9a <sbrk_aligned+0x12>
 8001f94:	f000 f9ca 	bl	800232c <_sbrk_r>
 8001f98:	6030      	str	r0, [r6, #0]
 8001f9a:	4621      	mov	r1, r4
 8001f9c:	4628      	mov	r0, r5
 8001f9e:	f000 f9c5 	bl	800232c <_sbrk_r>
 8001fa2:	1c43      	adds	r3, r0, #1
 8001fa4:	d00a      	beq.n	8001fbc <sbrk_aligned+0x34>
 8001fa6:	1cc4      	adds	r4, r0, #3
 8001fa8:	f024 0403 	bic.w	r4, r4, #3
 8001fac:	42a0      	cmp	r0, r4
 8001fae:	d007      	beq.n	8001fc0 <sbrk_aligned+0x38>
 8001fb0:	1a21      	subs	r1, r4, r0
 8001fb2:	4628      	mov	r0, r5
 8001fb4:	f000 f9ba 	bl	800232c <_sbrk_r>
 8001fb8:	3001      	adds	r0, #1
 8001fba:	d101      	bne.n	8001fc0 <sbrk_aligned+0x38>
 8001fbc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	bd70      	pop	{r4, r5, r6, pc}
 8001fc4:	200000a0 	.word	0x200000a0

08001fc8 <_malloc_r>:
 8001fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fcc:	1ccd      	adds	r5, r1, #3
 8001fce:	f025 0503 	bic.w	r5, r5, #3
 8001fd2:	3508      	adds	r5, #8
 8001fd4:	2d0c      	cmp	r5, #12
 8001fd6:	bf38      	it	cc
 8001fd8:	250c      	movcc	r5, #12
 8001fda:	2d00      	cmp	r5, #0
 8001fdc:	4607      	mov	r7, r0
 8001fde:	db01      	blt.n	8001fe4 <_malloc_r+0x1c>
 8001fe0:	42a9      	cmp	r1, r5
 8001fe2:	d905      	bls.n	8001ff0 <_malloc_r+0x28>
 8001fe4:	230c      	movs	r3, #12
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	2600      	movs	r6, #0
 8001fea:	4630      	mov	r0, r6
 8001fec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ff0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80020c4 <_malloc_r+0xfc>
 8001ff4:	f000 f868 	bl	80020c8 <__malloc_lock>
 8001ff8:	f8d8 3000 	ldr.w	r3, [r8]
 8001ffc:	461c      	mov	r4, r3
 8001ffe:	bb5c      	cbnz	r4, 8002058 <_malloc_r+0x90>
 8002000:	4629      	mov	r1, r5
 8002002:	4638      	mov	r0, r7
 8002004:	f7ff ffc0 	bl	8001f88 <sbrk_aligned>
 8002008:	1c43      	adds	r3, r0, #1
 800200a:	4604      	mov	r4, r0
 800200c:	d155      	bne.n	80020ba <_malloc_r+0xf2>
 800200e:	f8d8 4000 	ldr.w	r4, [r8]
 8002012:	4626      	mov	r6, r4
 8002014:	2e00      	cmp	r6, #0
 8002016:	d145      	bne.n	80020a4 <_malloc_r+0xdc>
 8002018:	2c00      	cmp	r4, #0
 800201a:	d048      	beq.n	80020ae <_malloc_r+0xe6>
 800201c:	6823      	ldr	r3, [r4, #0]
 800201e:	4631      	mov	r1, r6
 8002020:	4638      	mov	r0, r7
 8002022:	eb04 0903 	add.w	r9, r4, r3
 8002026:	f000 f981 	bl	800232c <_sbrk_r>
 800202a:	4581      	cmp	r9, r0
 800202c:	d13f      	bne.n	80020ae <_malloc_r+0xe6>
 800202e:	6821      	ldr	r1, [r4, #0]
 8002030:	1a6d      	subs	r5, r5, r1
 8002032:	4629      	mov	r1, r5
 8002034:	4638      	mov	r0, r7
 8002036:	f7ff ffa7 	bl	8001f88 <sbrk_aligned>
 800203a:	3001      	adds	r0, #1
 800203c:	d037      	beq.n	80020ae <_malloc_r+0xe6>
 800203e:	6823      	ldr	r3, [r4, #0]
 8002040:	442b      	add	r3, r5
 8002042:	6023      	str	r3, [r4, #0]
 8002044:	f8d8 3000 	ldr.w	r3, [r8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d038      	beq.n	80020be <_malloc_r+0xf6>
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	42a2      	cmp	r2, r4
 8002050:	d12b      	bne.n	80020aa <_malloc_r+0xe2>
 8002052:	2200      	movs	r2, #0
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	e00f      	b.n	8002078 <_malloc_r+0xb0>
 8002058:	6822      	ldr	r2, [r4, #0]
 800205a:	1b52      	subs	r2, r2, r5
 800205c:	d41f      	bmi.n	800209e <_malloc_r+0xd6>
 800205e:	2a0b      	cmp	r2, #11
 8002060:	d917      	bls.n	8002092 <_malloc_r+0xca>
 8002062:	1961      	adds	r1, r4, r5
 8002064:	42a3      	cmp	r3, r4
 8002066:	6025      	str	r5, [r4, #0]
 8002068:	bf18      	it	ne
 800206a:	6059      	strne	r1, [r3, #4]
 800206c:	6863      	ldr	r3, [r4, #4]
 800206e:	bf08      	it	eq
 8002070:	f8c8 1000 	streq.w	r1, [r8]
 8002074:	5162      	str	r2, [r4, r5]
 8002076:	604b      	str	r3, [r1, #4]
 8002078:	4638      	mov	r0, r7
 800207a:	f104 060b 	add.w	r6, r4, #11
 800207e:	f000 f829 	bl	80020d4 <__malloc_unlock>
 8002082:	f026 0607 	bic.w	r6, r6, #7
 8002086:	1d23      	adds	r3, r4, #4
 8002088:	1af2      	subs	r2, r6, r3
 800208a:	d0ae      	beq.n	8001fea <_malloc_r+0x22>
 800208c:	1b9b      	subs	r3, r3, r6
 800208e:	50a3      	str	r3, [r4, r2]
 8002090:	e7ab      	b.n	8001fea <_malloc_r+0x22>
 8002092:	42a3      	cmp	r3, r4
 8002094:	6862      	ldr	r2, [r4, #4]
 8002096:	d1dd      	bne.n	8002054 <_malloc_r+0x8c>
 8002098:	f8c8 2000 	str.w	r2, [r8]
 800209c:	e7ec      	b.n	8002078 <_malloc_r+0xb0>
 800209e:	4623      	mov	r3, r4
 80020a0:	6864      	ldr	r4, [r4, #4]
 80020a2:	e7ac      	b.n	8001ffe <_malloc_r+0x36>
 80020a4:	4634      	mov	r4, r6
 80020a6:	6876      	ldr	r6, [r6, #4]
 80020a8:	e7b4      	b.n	8002014 <_malloc_r+0x4c>
 80020aa:	4613      	mov	r3, r2
 80020ac:	e7cc      	b.n	8002048 <_malloc_r+0x80>
 80020ae:	230c      	movs	r3, #12
 80020b0:	603b      	str	r3, [r7, #0]
 80020b2:	4638      	mov	r0, r7
 80020b4:	f000 f80e 	bl	80020d4 <__malloc_unlock>
 80020b8:	e797      	b.n	8001fea <_malloc_r+0x22>
 80020ba:	6025      	str	r5, [r4, #0]
 80020bc:	e7dc      	b.n	8002078 <_malloc_r+0xb0>
 80020be:	605b      	str	r3, [r3, #4]
 80020c0:	deff      	udf	#255	; 0xff
 80020c2:	bf00      	nop
 80020c4:	2000009c 	.word	0x2000009c

080020c8 <__malloc_lock>:
 80020c8:	4801      	ldr	r0, [pc, #4]	; (80020d0 <__malloc_lock+0x8>)
 80020ca:	f000 b96a 	b.w	80023a2 <__retarget_lock_acquire_recursive>
 80020ce:	bf00      	nop
 80020d0:	200001e0 	.word	0x200001e0

080020d4 <__malloc_unlock>:
 80020d4:	4801      	ldr	r0, [pc, #4]	; (80020dc <__malloc_unlock+0x8>)
 80020d6:	f000 b965 	b.w	80023a4 <__retarget_lock_release_recursive>
 80020da:	bf00      	nop
 80020dc:	200001e0 	.word	0x200001e0

080020e0 <std>:
 80020e0:	2300      	movs	r3, #0
 80020e2:	b510      	push	{r4, lr}
 80020e4:	4604      	mov	r4, r0
 80020e6:	e9c0 3300 	strd	r3, r3, [r0]
 80020ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80020ee:	6083      	str	r3, [r0, #8]
 80020f0:	8181      	strh	r1, [r0, #12]
 80020f2:	6643      	str	r3, [r0, #100]	; 0x64
 80020f4:	81c2      	strh	r2, [r0, #14]
 80020f6:	6183      	str	r3, [r0, #24]
 80020f8:	4619      	mov	r1, r3
 80020fa:	2208      	movs	r2, #8
 80020fc:	305c      	adds	r0, #92	; 0x5c
 80020fe:	f000 f90d 	bl	800231c <memset>
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <std+0x58>)
 8002104:	6263      	str	r3, [r4, #36]	; 0x24
 8002106:	4b0d      	ldr	r3, [pc, #52]	; (800213c <std+0x5c>)
 8002108:	62a3      	str	r3, [r4, #40]	; 0x28
 800210a:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <std+0x60>)
 800210c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800210e:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <std+0x64>)
 8002110:	6323      	str	r3, [r4, #48]	; 0x30
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <std+0x68>)
 8002114:	6224      	str	r4, [r4, #32]
 8002116:	429c      	cmp	r4, r3
 8002118:	d006      	beq.n	8002128 <std+0x48>
 800211a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800211e:	4294      	cmp	r4, r2
 8002120:	d002      	beq.n	8002128 <std+0x48>
 8002122:	33d0      	adds	r3, #208	; 0xd0
 8002124:	429c      	cmp	r4, r3
 8002126:	d105      	bne.n	8002134 <std+0x54>
 8002128:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800212c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002130:	f000 b936 	b.w	80023a0 <__retarget_lock_init_recursive>
 8002134:	bd10      	pop	{r4, pc}
 8002136:	bf00      	nop
 8002138:	080025ad 	.word	0x080025ad
 800213c:	080025cf 	.word	0x080025cf
 8002140:	08002607 	.word	0x08002607
 8002144:	0800262b 	.word	0x0800262b
 8002148:	200000a4 	.word	0x200000a4

0800214c <stdio_exit_handler>:
 800214c:	4a02      	ldr	r2, [pc, #8]	; (8002158 <stdio_exit_handler+0xc>)
 800214e:	4903      	ldr	r1, [pc, #12]	; (800215c <stdio_exit_handler+0x10>)
 8002150:	4803      	ldr	r0, [pc, #12]	; (8002160 <stdio_exit_handler+0x14>)
 8002152:	f000 b869 	b.w	8002228 <_fwalk_sglue>
 8002156:	bf00      	nop
 8002158:	2000001c 	.word	0x2000001c
 800215c:	0800255d 	.word	0x0800255d
 8002160:	20000028 	.word	0x20000028

08002164 <cleanup_stdio>:
 8002164:	6841      	ldr	r1, [r0, #4]
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <cleanup_stdio+0x34>)
 8002168:	4299      	cmp	r1, r3
 800216a:	b510      	push	{r4, lr}
 800216c:	4604      	mov	r4, r0
 800216e:	d001      	beq.n	8002174 <cleanup_stdio+0x10>
 8002170:	f000 f9f4 	bl	800255c <_fflush_r>
 8002174:	68a1      	ldr	r1, [r4, #8]
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <cleanup_stdio+0x38>)
 8002178:	4299      	cmp	r1, r3
 800217a:	d002      	beq.n	8002182 <cleanup_stdio+0x1e>
 800217c:	4620      	mov	r0, r4
 800217e:	f000 f9ed 	bl	800255c <_fflush_r>
 8002182:	68e1      	ldr	r1, [r4, #12]
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <cleanup_stdio+0x3c>)
 8002186:	4299      	cmp	r1, r3
 8002188:	d004      	beq.n	8002194 <cleanup_stdio+0x30>
 800218a:	4620      	mov	r0, r4
 800218c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002190:	f000 b9e4 	b.w	800255c <_fflush_r>
 8002194:	bd10      	pop	{r4, pc}
 8002196:	bf00      	nop
 8002198:	200000a4 	.word	0x200000a4
 800219c:	2000010c 	.word	0x2000010c
 80021a0:	20000174 	.word	0x20000174

080021a4 <global_stdio_init.part.0>:
 80021a4:	b510      	push	{r4, lr}
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <global_stdio_init.part.0+0x30>)
 80021a8:	4c0b      	ldr	r4, [pc, #44]	; (80021d8 <global_stdio_init.part.0+0x34>)
 80021aa:	4a0c      	ldr	r2, [pc, #48]	; (80021dc <global_stdio_init.part.0+0x38>)
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	4620      	mov	r0, r4
 80021b0:	2200      	movs	r2, #0
 80021b2:	2104      	movs	r1, #4
 80021b4:	f7ff ff94 	bl	80020e0 <std>
 80021b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80021bc:	2201      	movs	r2, #1
 80021be:	2109      	movs	r1, #9
 80021c0:	f7ff ff8e 	bl	80020e0 <std>
 80021c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80021c8:	2202      	movs	r2, #2
 80021ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021ce:	2112      	movs	r1, #18
 80021d0:	f7ff bf86 	b.w	80020e0 <std>
 80021d4:	200001dc 	.word	0x200001dc
 80021d8:	200000a4 	.word	0x200000a4
 80021dc:	0800214d 	.word	0x0800214d

080021e0 <__sfp_lock_acquire>:
 80021e0:	4801      	ldr	r0, [pc, #4]	; (80021e8 <__sfp_lock_acquire+0x8>)
 80021e2:	f000 b8de 	b.w	80023a2 <__retarget_lock_acquire_recursive>
 80021e6:	bf00      	nop
 80021e8:	200001e1 	.word	0x200001e1

080021ec <__sfp_lock_release>:
 80021ec:	4801      	ldr	r0, [pc, #4]	; (80021f4 <__sfp_lock_release+0x8>)
 80021ee:	f000 b8d9 	b.w	80023a4 <__retarget_lock_release_recursive>
 80021f2:	bf00      	nop
 80021f4:	200001e1 	.word	0x200001e1

080021f8 <__sinit>:
 80021f8:	b510      	push	{r4, lr}
 80021fa:	4604      	mov	r4, r0
 80021fc:	f7ff fff0 	bl	80021e0 <__sfp_lock_acquire>
 8002200:	6a23      	ldr	r3, [r4, #32]
 8002202:	b11b      	cbz	r3, 800220c <__sinit+0x14>
 8002204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002208:	f7ff bff0 	b.w	80021ec <__sfp_lock_release>
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <__sinit+0x28>)
 800220e:	6223      	str	r3, [r4, #32]
 8002210:	4b04      	ldr	r3, [pc, #16]	; (8002224 <__sinit+0x2c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f5      	bne.n	8002204 <__sinit+0xc>
 8002218:	f7ff ffc4 	bl	80021a4 <global_stdio_init.part.0>
 800221c:	e7f2      	b.n	8002204 <__sinit+0xc>
 800221e:	bf00      	nop
 8002220:	08002165 	.word	0x08002165
 8002224:	200001dc 	.word	0x200001dc

08002228 <_fwalk_sglue>:
 8002228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800222c:	4607      	mov	r7, r0
 800222e:	4688      	mov	r8, r1
 8002230:	4614      	mov	r4, r2
 8002232:	2600      	movs	r6, #0
 8002234:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002238:	f1b9 0901 	subs.w	r9, r9, #1
 800223c:	d505      	bpl.n	800224a <_fwalk_sglue+0x22>
 800223e:	6824      	ldr	r4, [r4, #0]
 8002240:	2c00      	cmp	r4, #0
 8002242:	d1f7      	bne.n	8002234 <_fwalk_sglue+0xc>
 8002244:	4630      	mov	r0, r6
 8002246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800224a:	89ab      	ldrh	r3, [r5, #12]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d907      	bls.n	8002260 <_fwalk_sglue+0x38>
 8002250:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002254:	3301      	adds	r3, #1
 8002256:	d003      	beq.n	8002260 <_fwalk_sglue+0x38>
 8002258:	4629      	mov	r1, r5
 800225a:	4638      	mov	r0, r7
 800225c:	47c0      	blx	r8
 800225e:	4306      	orrs	r6, r0
 8002260:	3568      	adds	r5, #104	; 0x68
 8002262:	e7e9      	b.n	8002238 <_fwalk_sglue+0x10>

08002264 <_puts_r>:
 8002264:	6a03      	ldr	r3, [r0, #32]
 8002266:	b570      	push	{r4, r5, r6, lr}
 8002268:	6884      	ldr	r4, [r0, #8]
 800226a:	4605      	mov	r5, r0
 800226c:	460e      	mov	r6, r1
 800226e:	b90b      	cbnz	r3, 8002274 <_puts_r+0x10>
 8002270:	f7ff ffc2 	bl	80021f8 <__sinit>
 8002274:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002276:	07db      	lsls	r3, r3, #31
 8002278:	d405      	bmi.n	8002286 <_puts_r+0x22>
 800227a:	89a3      	ldrh	r3, [r4, #12]
 800227c:	0598      	lsls	r0, r3, #22
 800227e:	d402      	bmi.n	8002286 <_puts_r+0x22>
 8002280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002282:	f000 f88e 	bl	80023a2 <__retarget_lock_acquire_recursive>
 8002286:	89a3      	ldrh	r3, [r4, #12]
 8002288:	0719      	lsls	r1, r3, #28
 800228a:	d513      	bpl.n	80022b4 <_puts_r+0x50>
 800228c:	6923      	ldr	r3, [r4, #16]
 800228e:	b18b      	cbz	r3, 80022b4 <_puts_r+0x50>
 8002290:	3e01      	subs	r6, #1
 8002292:	68a3      	ldr	r3, [r4, #8]
 8002294:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002298:	3b01      	subs	r3, #1
 800229a:	60a3      	str	r3, [r4, #8]
 800229c:	b9e9      	cbnz	r1, 80022da <_puts_r+0x76>
 800229e:	2b00      	cmp	r3, #0
 80022a0:	da2e      	bge.n	8002300 <_puts_r+0x9c>
 80022a2:	4622      	mov	r2, r4
 80022a4:	210a      	movs	r1, #10
 80022a6:	4628      	mov	r0, r5
 80022a8:	f000 f9c3 	bl	8002632 <__swbuf_r>
 80022ac:	3001      	adds	r0, #1
 80022ae:	d007      	beq.n	80022c0 <_puts_r+0x5c>
 80022b0:	250a      	movs	r5, #10
 80022b2:	e007      	b.n	80022c4 <_puts_r+0x60>
 80022b4:	4621      	mov	r1, r4
 80022b6:	4628      	mov	r0, r5
 80022b8:	f000 f9f8 	bl	80026ac <__swsetup_r>
 80022bc:	2800      	cmp	r0, #0
 80022be:	d0e7      	beq.n	8002290 <_puts_r+0x2c>
 80022c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80022c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022c6:	07da      	lsls	r2, r3, #31
 80022c8:	d405      	bmi.n	80022d6 <_puts_r+0x72>
 80022ca:	89a3      	ldrh	r3, [r4, #12]
 80022cc:	059b      	lsls	r3, r3, #22
 80022ce:	d402      	bmi.n	80022d6 <_puts_r+0x72>
 80022d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022d2:	f000 f867 	bl	80023a4 <__retarget_lock_release_recursive>
 80022d6:	4628      	mov	r0, r5
 80022d8:	bd70      	pop	{r4, r5, r6, pc}
 80022da:	2b00      	cmp	r3, #0
 80022dc:	da04      	bge.n	80022e8 <_puts_r+0x84>
 80022de:	69a2      	ldr	r2, [r4, #24]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	dc06      	bgt.n	80022f2 <_puts_r+0x8e>
 80022e4:	290a      	cmp	r1, #10
 80022e6:	d004      	beq.n	80022f2 <_puts_r+0x8e>
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	6022      	str	r2, [r4, #0]
 80022ee:	7019      	strb	r1, [r3, #0]
 80022f0:	e7cf      	b.n	8002292 <_puts_r+0x2e>
 80022f2:	4622      	mov	r2, r4
 80022f4:	4628      	mov	r0, r5
 80022f6:	f000 f99c 	bl	8002632 <__swbuf_r>
 80022fa:	3001      	adds	r0, #1
 80022fc:	d1c9      	bne.n	8002292 <_puts_r+0x2e>
 80022fe:	e7df      	b.n	80022c0 <_puts_r+0x5c>
 8002300:	6823      	ldr	r3, [r4, #0]
 8002302:	250a      	movs	r5, #10
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	6022      	str	r2, [r4, #0]
 8002308:	701d      	strb	r5, [r3, #0]
 800230a:	e7db      	b.n	80022c4 <_puts_r+0x60>

0800230c <puts>:
 800230c:	4b02      	ldr	r3, [pc, #8]	; (8002318 <puts+0xc>)
 800230e:	4601      	mov	r1, r0
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	f7ff bfa7 	b.w	8002264 <_puts_r>
 8002316:	bf00      	nop
 8002318:	20000074 	.word	0x20000074

0800231c <memset>:
 800231c:	4402      	add	r2, r0
 800231e:	4603      	mov	r3, r0
 8002320:	4293      	cmp	r3, r2
 8002322:	d100      	bne.n	8002326 <memset+0xa>
 8002324:	4770      	bx	lr
 8002326:	f803 1b01 	strb.w	r1, [r3], #1
 800232a:	e7f9      	b.n	8002320 <memset+0x4>

0800232c <_sbrk_r>:
 800232c:	b538      	push	{r3, r4, r5, lr}
 800232e:	4d06      	ldr	r5, [pc, #24]	; (8002348 <_sbrk_r+0x1c>)
 8002330:	2300      	movs	r3, #0
 8002332:	4604      	mov	r4, r0
 8002334:	4608      	mov	r0, r1
 8002336:	602b      	str	r3, [r5, #0]
 8002338:	f7fe fdc2 	bl	8000ec0 <_sbrk>
 800233c:	1c43      	adds	r3, r0, #1
 800233e:	d102      	bne.n	8002346 <_sbrk_r+0x1a>
 8002340:	682b      	ldr	r3, [r5, #0]
 8002342:	b103      	cbz	r3, 8002346 <_sbrk_r+0x1a>
 8002344:	6023      	str	r3, [r4, #0]
 8002346:	bd38      	pop	{r3, r4, r5, pc}
 8002348:	200001e4 	.word	0x200001e4

0800234c <__errno>:
 800234c:	4b01      	ldr	r3, [pc, #4]	; (8002354 <__errno+0x8>)
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000074 	.word	0x20000074

08002358 <__libc_init_array>:
 8002358:	b570      	push	{r4, r5, r6, lr}
 800235a:	4d0d      	ldr	r5, [pc, #52]	; (8002390 <__libc_init_array+0x38>)
 800235c:	4c0d      	ldr	r4, [pc, #52]	; (8002394 <__libc_init_array+0x3c>)
 800235e:	1b64      	subs	r4, r4, r5
 8002360:	10a4      	asrs	r4, r4, #2
 8002362:	2600      	movs	r6, #0
 8002364:	42a6      	cmp	r6, r4
 8002366:	d109      	bne.n	800237c <__libc_init_array+0x24>
 8002368:	4d0b      	ldr	r5, [pc, #44]	; (8002398 <__libc_init_array+0x40>)
 800236a:	4c0c      	ldr	r4, [pc, #48]	; (800239c <__libc_init_array+0x44>)
 800236c:	f000 fac0 	bl	80028f0 <_init>
 8002370:	1b64      	subs	r4, r4, r5
 8002372:	10a4      	asrs	r4, r4, #2
 8002374:	2600      	movs	r6, #0
 8002376:	42a6      	cmp	r6, r4
 8002378:	d105      	bne.n	8002386 <__libc_init_array+0x2e>
 800237a:	bd70      	pop	{r4, r5, r6, pc}
 800237c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002380:	4798      	blx	r3
 8002382:	3601      	adds	r6, #1
 8002384:	e7ee      	b.n	8002364 <__libc_init_array+0xc>
 8002386:	f855 3b04 	ldr.w	r3, [r5], #4
 800238a:	4798      	blx	r3
 800238c:	3601      	adds	r6, #1
 800238e:	e7f2      	b.n	8002376 <__libc_init_array+0x1e>
 8002390:	08002a14 	.word	0x08002a14
 8002394:	08002a14 	.word	0x08002a14
 8002398:	08002a14 	.word	0x08002a14
 800239c:	08002a18 	.word	0x08002a18

080023a0 <__retarget_lock_init_recursive>:
 80023a0:	4770      	bx	lr

080023a2 <__retarget_lock_acquire_recursive>:
 80023a2:	4770      	bx	lr

080023a4 <__retarget_lock_release_recursive>:
 80023a4:	4770      	bx	lr

080023a6 <strcpy>:
 80023a6:	4603      	mov	r3, r0
 80023a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80023ac:	f803 2b01 	strb.w	r2, [r3], #1
 80023b0:	2a00      	cmp	r2, #0
 80023b2:	d1f9      	bne.n	80023a8 <strcpy+0x2>
 80023b4:	4770      	bx	lr
	...

080023b8 <_free_r>:
 80023b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80023ba:	2900      	cmp	r1, #0
 80023bc:	d044      	beq.n	8002448 <_free_r+0x90>
 80023be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023c2:	9001      	str	r0, [sp, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f1a1 0404 	sub.w	r4, r1, #4
 80023ca:	bfb8      	it	lt
 80023cc:	18e4      	addlt	r4, r4, r3
 80023ce:	f7ff fe7b 	bl	80020c8 <__malloc_lock>
 80023d2:	4a1e      	ldr	r2, [pc, #120]	; (800244c <_free_r+0x94>)
 80023d4:	9801      	ldr	r0, [sp, #4]
 80023d6:	6813      	ldr	r3, [r2, #0]
 80023d8:	b933      	cbnz	r3, 80023e8 <_free_r+0x30>
 80023da:	6063      	str	r3, [r4, #4]
 80023dc:	6014      	str	r4, [r2, #0]
 80023de:	b003      	add	sp, #12
 80023e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80023e4:	f7ff be76 	b.w	80020d4 <__malloc_unlock>
 80023e8:	42a3      	cmp	r3, r4
 80023ea:	d908      	bls.n	80023fe <_free_r+0x46>
 80023ec:	6825      	ldr	r5, [r4, #0]
 80023ee:	1961      	adds	r1, r4, r5
 80023f0:	428b      	cmp	r3, r1
 80023f2:	bf01      	itttt	eq
 80023f4:	6819      	ldreq	r1, [r3, #0]
 80023f6:	685b      	ldreq	r3, [r3, #4]
 80023f8:	1949      	addeq	r1, r1, r5
 80023fa:	6021      	streq	r1, [r4, #0]
 80023fc:	e7ed      	b.n	80023da <_free_r+0x22>
 80023fe:	461a      	mov	r2, r3
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	b10b      	cbz	r3, 8002408 <_free_r+0x50>
 8002404:	42a3      	cmp	r3, r4
 8002406:	d9fa      	bls.n	80023fe <_free_r+0x46>
 8002408:	6811      	ldr	r1, [r2, #0]
 800240a:	1855      	adds	r5, r2, r1
 800240c:	42a5      	cmp	r5, r4
 800240e:	d10b      	bne.n	8002428 <_free_r+0x70>
 8002410:	6824      	ldr	r4, [r4, #0]
 8002412:	4421      	add	r1, r4
 8002414:	1854      	adds	r4, r2, r1
 8002416:	42a3      	cmp	r3, r4
 8002418:	6011      	str	r1, [r2, #0]
 800241a:	d1e0      	bne.n	80023de <_free_r+0x26>
 800241c:	681c      	ldr	r4, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	6053      	str	r3, [r2, #4]
 8002422:	440c      	add	r4, r1
 8002424:	6014      	str	r4, [r2, #0]
 8002426:	e7da      	b.n	80023de <_free_r+0x26>
 8002428:	d902      	bls.n	8002430 <_free_r+0x78>
 800242a:	230c      	movs	r3, #12
 800242c:	6003      	str	r3, [r0, #0]
 800242e:	e7d6      	b.n	80023de <_free_r+0x26>
 8002430:	6825      	ldr	r5, [r4, #0]
 8002432:	1961      	adds	r1, r4, r5
 8002434:	428b      	cmp	r3, r1
 8002436:	bf04      	itt	eq
 8002438:	6819      	ldreq	r1, [r3, #0]
 800243a:	685b      	ldreq	r3, [r3, #4]
 800243c:	6063      	str	r3, [r4, #4]
 800243e:	bf04      	itt	eq
 8002440:	1949      	addeq	r1, r1, r5
 8002442:	6021      	streq	r1, [r4, #0]
 8002444:	6054      	str	r4, [r2, #4]
 8002446:	e7ca      	b.n	80023de <_free_r+0x26>
 8002448:	b003      	add	sp, #12
 800244a:	bd30      	pop	{r4, r5, pc}
 800244c:	2000009c 	.word	0x2000009c

08002450 <__sflush_r>:
 8002450:	898a      	ldrh	r2, [r1, #12]
 8002452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002456:	4605      	mov	r5, r0
 8002458:	0710      	lsls	r0, r2, #28
 800245a:	460c      	mov	r4, r1
 800245c:	d458      	bmi.n	8002510 <__sflush_r+0xc0>
 800245e:	684b      	ldr	r3, [r1, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	dc05      	bgt.n	8002470 <__sflush_r+0x20>
 8002464:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002466:	2b00      	cmp	r3, #0
 8002468:	dc02      	bgt.n	8002470 <__sflush_r+0x20>
 800246a:	2000      	movs	r0, #0
 800246c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002472:	2e00      	cmp	r6, #0
 8002474:	d0f9      	beq.n	800246a <__sflush_r+0x1a>
 8002476:	2300      	movs	r3, #0
 8002478:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800247c:	682f      	ldr	r7, [r5, #0]
 800247e:	6a21      	ldr	r1, [r4, #32]
 8002480:	602b      	str	r3, [r5, #0]
 8002482:	d032      	beq.n	80024ea <__sflush_r+0x9a>
 8002484:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002486:	89a3      	ldrh	r3, [r4, #12]
 8002488:	075a      	lsls	r2, r3, #29
 800248a:	d505      	bpl.n	8002498 <__sflush_r+0x48>
 800248c:	6863      	ldr	r3, [r4, #4]
 800248e:	1ac0      	subs	r0, r0, r3
 8002490:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002492:	b10b      	cbz	r3, 8002498 <__sflush_r+0x48>
 8002494:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002496:	1ac0      	subs	r0, r0, r3
 8002498:	2300      	movs	r3, #0
 800249a:	4602      	mov	r2, r0
 800249c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800249e:	6a21      	ldr	r1, [r4, #32]
 80024a0:	4628      	mov	r0, r5
 80024a2:	47b0      	blx	r6
 80024a4:	1c43      	adds	r3, r0, #1
 80024a6:	89a3      	ldrh	r3, [r4, #12]
 80024a8:	d106      	bne.n	80024b8 <__sflush_r+0x68>
 80024aa:	6829      	ldr	r1, [r5, #0]
 80024ac:	291d      	cmp	r1, #29
 80024ae:	d82b      	bhi.n	8002508 <__sflush_r+0xb8>
 80024b0:	4a29      	ldr	r2, [pc, #164]	; (8002558 <__sflush_r+0x108>)
 80024b2:	410a      	asrs	r2, r1
 80024b4:	07d6      	lsls	r6, r2, #31
 80024b6:	d427      	bmi.n	8002508 <__sflush_r+0xb8>
 80024b8:	2200      	movs	r2, #0
 80024ba:	6062      	str	r2, [r4, #4]
 80024bc:	04d9      	lsls	r1, r3, #19
 80024be:	6922      	ldr	r2, [r4, #16]
 80024c0:	6022      	str	r2, [r4, #0]
 80024c2:	d504      	bpl.n	80024ce <__sflush_r+0x7e>
 80024c4:	1c42      	adds	r2, r0, #1
 80024c6:	d101      	bne.n	80024cc <__sflush_r+0x7c>
 80024c8:	682b      	ldr	r3, [r5, #0]
 80024ca:	b903      	cbnz	r3, 80024ce <__sflush_r+0x7e>
 80024cc:	6560      	str	r0, [r4, #84]	; 0x54
 80024ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024d0:	602f      	str	r7, [r5, #0]
 80024d2:	2900      	cmp	r1, #0
 80024d4:	d0c9      	beq.n	800246a <__sflush_r+0x1a>
 80024d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80024da:	4299      	cmp	r1, r3
 80024dc:	d002      	beq.n	80024e4 <__sflush_r+0x94>
 80024de:	4628      	mov	r0, r5
 80024e0:	f7ff ff6a 	bl	80023b8 <_free_r>
 80024e4:	2000      	movs	r0, #0
 80024e6:	6360      	str	r0, [r4, #52]	; 0x34
 80024e8:	e7c0      	b.n	800246c <__sflush_r+0x1c>
 80024ea:	2301      	movs	r3, #1
 80024ec:	4628      	mov	r0, r5
 80024ee:	47b0      	blx	r6
 80024f0:	1c41      	adds	r1, r0, #1
 80024f2:	d1c8      	bne.n	8002486 <__sflush_r+0x36>
 80024f4:	682b      	ldr	r3, [r5, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0c5      	beq.n	8002486 <__sflush_r+0x36>
 80024fa:	2b1d      	cmp	r3, #29
 80024fc:	d001      	beq.n	8002502 <__sflush_r+0xb2>
 80024fe:	2b16      	cmp	r3, #22
 8002500:	d101      	bne.n	8002506 <__sflush_r+0xb6>
 8002502:	602f      	str	r7, [r5, #0]
 8002504:	e7b1      	b.n	800246a <__sflush_r+0x1a>
 8002506:	89a3      	ldrh	r3, [r4, #12]
 8002508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800250c:	81a3      	strh	r3, [r4, #12]
 800250e:	e7ad      	b.n	800246c <__sflush_r+0x1c>
 8002510:	690f      	ldr	r7, [r1, #16]
 8002512:	2f00      	cmp	r7, #0
 8002514:	d0a9      	beq.n	800246a <__sflush_r+0x1a>
 8002516:	0793      	lsls	r3, r2, #30
 8002518:	680e      	ldr	r6, [r1, #0]
 800251a:	bf08      	it	eq
 800251c:	694b      	ldreq	r3, [r1, #20]
 800251e:	600f      	str	r7, [r1, #0]
 8002520:	bf18      	it	ne
 8002522:	2300      	movne	r3, #0
 8002524:	eba6 0807 	sub.w	r8, r6, r7
 8002528:	608b      	str	r3, [r1, #8]
 800252a:	f1b8 0f00 	cmp.w	r8, #0
 800252e:	dd9c      	ble.n	800246a <__sflush_r+0x1a>
 8002530:	6a21      	ldr	r1, [r4, #32]
 8002532:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002534:	4643      	mov	r3, r8
 8002536:	463a      	mov	r2, r7
 8002538:	4628      	mov	r0, r5
 800253a:	47b0      	blx	r6
 800253c:	2800      	cmp	r0, #0
 800253e:	dc06      	bgt.n	800254e <__sflush_r+0xfe>
 8002540:	89a3      	ldrh	r3, [r4, #12]
 8002542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002546:	81a3      	strh	r3, [r4, #12]
 8002548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800254c:	e78e      	b.n	800246c <__sflush_r+0x1c>
 800254e:	4407      	add	r7, r0
 8002550:	eba8 0800 	sub.w	r8, r8, r0
 8002554:	e7e9      	b.n	800252a <__sflush_r+0xda>
 8002556:	bf00      	nop
 8002558:	dfbffffe 	.word	0xdfbffffe

0800255c <_fflush_r>:
 800255c:	b538      	push	{r3, r4, r5, lr}
 800255e:	690b      	ldr	r3, [r1, #16]
 8002560:	4605      	mov	r5, r0
 8002562:	460c      	mov	r4, r1
 8002564:	b913      	cbnz	r3, 800256c <_fflush_r+0x10>
 8002566:	2500      	movs	r5, #0
 8002568:	4628      	mov	r0, r5
 800256a:	bd38      	pop	{r3, r4, r5, pc}
 800256c:	b118      	cbz	r0, 8002576 <_fflush_r+0x1a>
 800256e:	6a03      	ldr	r3, [r0, #32]
 8002570:	b90b      	cbnz	r3, 8002576 <_fflush_r+0x1a>
 8002572:	f7ff fe41 	bl	80021f8 <__sinit>
 8002576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f3      	beq.n	8002566 <_fflush_r+0xa>
 800257e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002580:	07d0      	lsls	r0, r2, #31
 8002582:	d404      	bmi.n	800258e <_fflush_r+0x32>
 8002584:	0599      	lsls	r1, r3, #22
 8002586:	d402      	bmi.n	800258e <_fflush_r+0x32>
 8002588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800258a:	f7ff ff0a 	bl	80023a2 <__retarget_lock_acquire_recursive>
 800258e:	4628      	mov	r0, r5
 8002590:	4621      	mov	r1, r4
 8002592:	f7ff ff5d 	bl	8002450 <__sflush_r>
 8002596:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002598:	07da      	lsls	r2, r3, #31
 800259a:	4605      	mov	r5, r0
 800259c:	d4e4      	bmi.n	8002568 <_fflush_r+0xc>
 800259e:	89a3      	ldrh	r3, [r4, #12]
 80025a0:	059b      	lsls	r3, r3, #22
 80025a2:	d4e1      	bmi.n	8002568 <_fflush_r+0xc>
 80025a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025a6:	f7ff fefd 	bl	80023a4 <__retarget_lock_release_recursive>
 80025aa:	e7dd      	b.n	8002568 <_fflush_r+0xc>

080025ac <__sread>:
 80025ac:	b510      	push	{r4, lr}
 80025ae:	460c      	mov	r4, r1
 80025b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025b4:	f000 f978 	bl	80028a8 <_read_r>
 80025b8:	2800      	cmp	r0, #0
 80025ba:	bfab      	itete	ge
 80025bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80025be:	89a3      	ldrhlt	r3, [r4, #12]
 80025c0:	181b      	addge	r3, r3, r0
 80025c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80025c6:	bfac      	ite	ge
 80025c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80025ca:	81a3      	strhlt	r3, [r4, #12]
 80025cc:	bd10      	pop	{r4, pc}

080025ce <__swrite>:
 80025ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025d2:	461f      	mov	r7, r3
 80025d4:	898b      	ldrh	r3, [r1, #12]
 80025d6:	05db      	lsls	r3, r3, #23
 80025d8:	4605      	mov	r5, r0
 80025da:	460c      	mov	r4, r1
 80025dc:	4616      	mov	r6, r2
 80025de:	d505      	bpl.n	80025ec <__swrite+0x1e>
 80025e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025e4:	2302      	movs	r3, #2
 80025e6:	2200      	movs	r2, #0
 80025e8:	f000 f94c 	bl	8002884 <_lseek_r>
 80025ec:	89a3      	ldrh	r3, [r4, #12]
 80025ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025f6:	81a3      	strh	r3, [r4, #12]
 80025f8:	4632      	mov	r2, r6
 80025fa:	463b      	mov	r3, r7
 80025fc:	4628      	mov	r0, r5
 80025fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002602:	f000 b963 	b.w	80028cc <_write_r>

08002606 <__sseek>:
 8002606:	b510      	push	{r4, lr}
 8002608:	460c      	mov	r4, r1
 800260a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800260e:	f000 f939 	bl	8002884 <_lseek_r>
 8002612:	1c43      	adds	r3, r0, #1
 8002614:	89a3      	ldrh	r3, [r4, #12]
 8002616:	bf15      	itete	ne
 8002618:	6560      	strne	r0, [r4, #84]	; 0x54
 800261a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800261e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002622:	81a3      	strheq	r3, [r4, #12]
 8002624:	bf18      	it	ne
 8002626:	81a3      	strhne	r3, [r4, #12]
 8002628:	bd10      	pop	{r4, pc}

0800262a <__sclose>:
 800262a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800262e:	f000 b8f7 	b.w	8002820 <_close_r>

08002632 <__swbuf_r>:
 8002632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002634:	460e      	mov	r6, r1
 8002636:	4614      	mov	r4, r2
 8002638:	4605      	mov	r5, r0
 800263a:	b118      	cbz	r0, 8002644 <__swbuf_r+0x12>
 800263c:	6a03      	ldr	r3, [r0, #32]
 800263e:	b90b      	cbnz	r3, 8002644 <__swbuf_r+0x12>
 8002640:	f7ff fdda 	bl	80021f8 <__sinit>
 8002644:	69a3      	ldr	r3, [r4, #24]
 8002646:	60a3      	str	r3, [r4, #8]
 8002648:	89a3      	ldrh	r3, [r4, #12]
 800264a:	071a      	lsls	r2, r3, #28
 800264c:	d525      	bpl.n	800269a <__swbuf_r+0x68>
 800264e:	6923      	ldr	r3, [r4, #16]
 8002650:	b31b      	cbz	r3, 800269a <__swbuf_r+0x68>
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	6922      	ldr	r2, [r4, #16]
 8002656:	1a98      	subs	r0, r3, r2
 8002658:	6963      	ldr	r3, [r4, #20]
 800265a:	b2f6      	uxtb	r6, r6
 800265c:	4283      	cmp	r3, r0
 800265e:	4637      	mov	r7, r6
 8002660:	dc04      	bgt.n	800266c <__swbuf_r+0x3a>
 8002662:	4621      	mov	r1, r4
 8002664:	4628      	mov	r0, r5
 8002666:	f7ff ff79 	bl	800255c <_fflush_r>
 800266a:	b9e0      	cbnz	r0, 80026a6 <__swbuf_r+0x74>
 800266c:	68a3      	ldr	r3, [r4, #8]
 800266e:	3b01      	subs	r3, #1
 8002670:	60a3      	str	r3, [r4, #8]
 8002672:	6823      	ldr	r3, [r4, #0]
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	6022      	str	r2, [r4, #0]
 8002678:	701e      	strb	r6, [r3, #0]
 800267a:	6962      	ldr	r2, [r4, #20]
 800267c:	1c43      	adds	r3, r0, #1
 800267e:	429a      	cmp	r2, r3
 8002680:	d004      	beq.n	800268c <__swbuf_r+0x5a>
 8002682:	89a3      	ldrh	r3, [r4, #12]
 8002684:	07db      	lsls	r3, r3, #31
 8002686:	d506      	bpl.n	8002696 <__swbuf_r+0x64>
 8002688:	2e0a      	cmp	r6, #10
 800268a:	d104      	bne.n	8002696 <__swbuf_r+0x64>
 800268c:	4621      	mov	r1, r4
 800268e:	4628      	mov	r0, r5
 8002690:	f7ff ff64 	bl	800255c <_fflush_r>
 8002694:	b938      	cbnz	r0, 80026a6 <__swbuf_r+0x74>
 8002696:	4638      	mov	r0, r7
 8002698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800269a:	4621      	mov	r1, r4
 800269c:	4628      	mov	r0, r5
 800269e:	f000 f805 	bl	80026ac <__swsetup_r>
 80026a2:	2800      	cmp	r0, #0
 80026a4:	d0d5      	beq.n	8002652 <__swbuf_r+0x20>
 80026a6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80026aa:	e7f4      	b.n	8002696 <__swbuf_r+0x64>

080026ac <__swsetup_r>:
 80026ac:	b538      	push	{r3, r4, r5, lr}
 80026ae:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <__swsetup_r+0xac>)
 80026b0:	4605      	mov	r5, r0
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	460c      	mov	r4, r1
 80026b6:	b118      	cbz	r0, 80026c0 <__swsetup_r+0x14>
 80026b8:	6a03      	ldr	r3, [r0, #32]
 80026ba:	b90b      	cbnz	r3, 80026c0 <__swsetup_r+0x14>
 80026bc:	f7ff fd9c 	bl	80021f8 <__sinit>
 80026c0:	89a3      	ldrh	r3, [r4, #12]
 80026c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80026c6:	0718      	lsls	r0, r3, #28
 80026c8:	d422      	bmi.n	8002710 <__swsetup_r+0x64>
 80026ca:	06d9      	lsls	r1, r3, #27
 80026cc:	d407      	bmi.n	80026de <__swsetup_r+0x32>
 80026ce:	2309      	movs	r3, #9
 80026d0:	602b      	str	r3, [r5, #0]
 80026d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80026d6:	81a3      	strh	r3, [r4, #12]
 80026d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026dc:	e034      	b.n	8002748 <__swsetup_r+0x9c>
 80026de:	0758      	lsls	r0, r3, #29
 80026e0:	d512      	bpl.n	8002708 <__swsetup_r+0x5c>
 80026e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026e4:	b141      	cbz	r1, 80026f8 <__swsetup_r+0x4c>
 80026e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80026ea:	4299      	cmp	r1, r3
 80026ec:	d002      	beq.n	80026f4 <__swsetup_r+0x48>
 80026ee:	4628      	mov	r0, r5
 80026f0:	f7ff fe62 	bl	80023b8 <_free_r>
 80026f4:	2300      	movs	r3, #0
 80026f6:	6363      	str	r3, [r4, #52]	; 0x34
 80026f8:	89a3      	ldrh	r3, [r4, #12]
 80026fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80026fe:	81a3      	strh	r3, [r4, #12]
 8002700:	2300      	movs	r3, #0
 8002702:	6063      	str	r3, [r4, #4]
 8002704:	6923      	ldr	r3, [r4, #16]
 8002706:	6023      	str	r3, [r4, #0]
 8002708:	89a3      	ldrh	r3, [r4, #12]
 800270a:	f043 0308 	orr.w	r3, r3, #8
 800270e:	81a3      	strh	r3, [r4, #12]
 8002710:	6923      	ldr	r3, [r4, #16]
 8002712:	b94b      	cbnz	r3, 8002728 <__swsetup_r+0x7c>
 8002714:	89a3      	ldrh	r3, [r4, #12]
 8002716:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800271a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800271e:	d003      	beq.n	8002728 <__swsetup_r+0x7c>
 8002720:	4621      	mov	r1, r4
 8002722:	4628      	mov	r0, r5
 8002724:	f000 f840 	bl	80027a8 <__smakebuf_r>
 8002728:	89a0      	ldrh	r0, [r4, #12]
 800272a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800272e:	f010 0301 	ands.w	r3, r0, #1
 8002732:	d00a      	beq.n	800274a <__swsetup_r+0x9e>
 8002734:	2300      	movs	r3, #0
 8002736:	60a3      	str	r3, [r4, #8]
 8002738:	6963      	ldr	r3, [r4, #20]
 800273a:	425b      	negs	r3, r3
 800273c:	61a3      	str	r3, [r4, #24]
 800273e:	6923      	ldr	r3, [r4, #16]
 8002740:	b943      	cbnz	r3, 8002754 <__swsetup_r+0xa8>
 8002742:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002746:	d1c4      	bne.n	80026d2 <__swsetup_r+0x26>
 8002748:	bd38      	pop	{r3, r4, r5, pc}
 800274a:	0781      	lsls	r1, r0, #30
 800274c:	bf58      	it	pl
 800274e:	6963      	ldrpl	r3, [r4, #20]
 8002750:	60a3      	str	r3, [r4, #8]
 8002752:	e7f4      	b.n	800273e <__swsetup_r+0x92>
 8002754:	2000      	movs	r0, #0
 8002756:	e7f7      	b.n	8002748 <__swsetup_r+0x9c>
 8002758:	20000074 	.word	0x20000074

0800275c <__swhatbuf_r>:
 800275c:	b570      	push	{r4, r5, r6, lr}
 800275e:	460c      	mov	r4, r1
 8002760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002764:	2900      	cmp	r1, #0
 8002766:	b096      	sub	sp, #88	; 0x58
 8002768:	4615      	mov	r5, r2
 800276a:	461e      	mov	r6, r3
 800276c:	da0d      	bge.n	800278a <__swhatbuf_r+0x2e>
 800276e:	89a3      	ldrh	r3, [r4, #12]
 8002770:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002774:	f04f 0100 	mov.w	r1, #0
 8002778:	bf0c      	ite	eq
 800277a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800277e:	2340      	movne	r3, #64	; 0x40
 8002780:	2000      	movs	r0, #0
 8002782:	6031      	str	r1, [r6, #0]
 8002784:	602b      	str	r3, [r5, #0]
 8002786:	b016      	add	sp, #88	; 0x58
 8002788:	bd70      	pop	{r4, r5, r6, pc}
 800278a:	466a      	mov	r2, sp
 800278c:	f000 f858 	bl	8002840 <_fstat_r>
 8002790:	2800      	cmp	r0, #0
 8002792:	dbec      	blt.n	800276e <__swhatbuf_r+0x12>
 8002794:	9901      	ldr	r1, [sp, #4]
 8002796:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800279a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800279e:	4259      	negs	r1, r3
 80027a0:	4159      	adcs	r1, r3
 80027a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027a6:	e7eb      	b.n	8002780 <__swhatbuf_r+0x24>

080027a8 <__smakebuf_r>:
 80027a8:	898b      	ldrh	r3, [r1, #12]
 80027aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80027ac:	079d      	lsls	r5, r3, #30
 80027ae:	4606      	mov	r6, r0
 80027b0:	460c      	mov	r4, r1
 80027b2:	d507      	bpl.n	80027c4 <__smakebuf_r+0x1c>
 80027b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80027b8:	6023      	str	r3, [r4, #0]
 80027ba:	6123      	str	r3, [r4, #16]
 80027bc:	2301      	movs	r3, #1
 80027be:	6163      	str	r3, [r4, #20]
 80027c0:	b002      	add	sp, #8
 80027c2:	bd70      	pop	{r4, r5, r6, pc}
 80027c4:	ab01      	add	r3, sp, #4
 80027c6:	466a      	mov	r2, sp
 80027c8:	f7ff ffc8 	bl	800275c <__swhatbuf_r>
 80027cc:	9900      	ldr	r1, [sp, #0]
 80027ce:	4605      	mov	r5, r0
 80027d0:	4630      	mov	r0, r6
 80027d2:	f7ff fbf9 	bl	8001fc8 <_malloc_r>
 80027d6:	b948      	cbnz	r0, 80027ec <__smakebuf_r+0x44>
 80027d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027dc:	059a      	lsls	r2, r3, #22
 80027de:	d4ef      	bmi.n	80027c0 <__smakebuf_r+0x18>
 80027e0:	f023 0303 	bic.w	r3, r3, #3
 80027e4:	f043 0302 	orr.w	r3, r3, #2
 80027e8:	81a3      	strh	r3, [r4, #12]
 80027ea:	e7e3      	b.n	80027b4 <__smakebuf_r+0xc>
 80027ec:	89a3      	ldrh	r3, [r4, #12]
 80027ee:	6020      	str	r0, [r4, #0]
 80027f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f4:	81a3      	strh	r3, [r4, #12]
 80027f6:	9b00      	ldr	r3, [sp, #0]
 80027f8:	6163      	str	r3, [r4, #20]
 80027fa:	9b01      	ldr	r3, [sp, #4]
 80027fc:	6120      	str	r0, [r4, #16]
 80027fe:	b15b      	cbz	r3, 8002818 <__smakebuf_r+0x70>
 8002800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002804:	4630      	mov	r0, r6
 8002806:	f000 f82d 	bl	8002864 <_isatty_r>
 800280a:	b128      	cbz	r0, 8002818 <__smakebuf_r+0x70>
 800280c:	89a3      	ldrh	r3, [r4, #12]
 800280e:	f023 0303 	bic.w	r3, r3, #3
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	81a3      	strh	r3, [r4, #12]
 8002818:	89a3      	ldrh	r3, [r4, #12]
 800281a:	431d      	orrs	r5, r3
 800281c:	81a5      	strh	r5, [r4, #12]
 800281e:	e7cf      	b.n	80027c0 <__smakebuf_r+0x18>

08002820 <_close_r>:
 8002820:	b538      	push	{r3, r4, r5, lr}
 8002822:	4d06      	ldr	r5, [pc, #24]	; (800283c <_close_r+0x1c>)
 8002824:	2300      	movs	r3, #0
 8002826:	4604      	mov	r4, r0
 8002828:	4608      	mov	r0, r1
 800282a:	602b      	str	r3, [r5, #0]
 800282c:	f7fe fb13 	bl	8000e56 <_close>
 8002830:	1c43      	adds	r3, r0, #1
 8002832:	d102      	bne.n	800283a <_close_r+0x1a>
 8002834:	682b      	ldr	r3, [r5, #0]
 8002836:	b103      	cbz	r3, 800283a <_close_r+0x1a>
 8002838:	6023      	str	r3, [r4, #0]
 800283a:	bd38      	pop	{r3, r4, r5, pc}
 800283c:	200001e4 	.word	0x200001e4

08002840 <_fstat_r>:
 8002840:	b538      	push	{r3, r4, r5, lr}
 8002842:	4d07      	ldr	r5, [pc, #28]	; (8002860 <_fstat_r+0x20>)
 8002844:	2300      	movs	r3, #0
 8002846:	4604      	mov	r4, r0
 8002848:	4608      	mov	r0, r1
 800284a:	4611      	mov	r1, r2
 800284c:	602b      	str	r3, [r5, #0]
 800284e:	f7fe fb0e 	bl	8000e6e <_fstat>
 8002852:	1c43      	adds	r3, r0, #1
 8002854:	d102      	bne.n	800285c <_fstat_r+0x1c>
 8002856:	682b      	ldr	r3, [r5, #0]
 8002858:	b103      	cbz	r3, 800285c <_fstat_r+0x1c>
 800285a:	6023      	str	r3, [r4, #0]
 800285c:	bd38      	pop	{r3, r4, r5, pc}
 800285e:	bf00      	nop
 8002860:	200001e4 	.word	0x200001e4

08002864 <_isatty_r>:
 8002864:	b538      	push	{r3, r4, r5, lr}
 8002866:	4d06      	ldr	r5, [pc, #24]	; (8002880 <_isatty_r+0x1c>)
 8002868:	2300      	movs	r3, #0
 800286a:	4604      	mov	r4, r0
 800286c:	4608      	mov	r0, r1
 800286e:	602b      	str	r3, [r5, #0]
 8002870:	f7fe fb0d 	bl	8000e8e <_isatty>
 8002874:	1c43      	adds	r3, r0, #1
 8002876:	d102      	bne.n	800287e <_isatty_r+0x1a>
 8002878:	682b      	ldr	r3, [r5, #0]
 800287a:	b103      	cbz	r3, 800287e <_isatty_r+0x1a>
 800287c:	6023      	str	r3, [r4, #0]
 800287e:	bd38      	pop	{r3, r4, r5, pc}
 8002880:	200001e4 	.word	0x200001e4

08002884 <_lseek_r>:
 8002884:	b538      	push	{r3, r4, r5, lr}
 8002886:	4d07      	ldr	r5, [pc, #28]	; (80028a4 <_lseek_r+0x20>)
 8002888:	4604      	mov	r4, r0
 800288a:	4608      	mov	r0, r1
 800288c:	4611      	mov	r1, r2
 800288e:	2200      	movs	r2, #0
 8002890:	602a      	str	r2, [r5, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	f7fe fb06 	bl	8000ea4 <_lseek>
 8002898:	1c43      	adds	r3, r0, #1
 800289a:	d102      	bne.n	80028a2 <_lseek_r+0x1e>
 800289c:	682b      	ldr	r3, [r5, #0]
 800289e:	b103      	cbz	r3, 80028a2 <_lseek_r+0x1e>
 80028a0:	6023      	str	r3, [r4, #0]
 80028a2:	bd38      	pop	{r3, r4, r5, pc}
 80028a4:	200001e4 	.word	0x200001e4

080028a8 <_read_r>:
 80028a8:	b538      	push	{r3, r4, r5, lr}
 80028aa:	4d07      	ldr	r5, [pc, #28]	; (80028c8 <_read_r+0x20>)
 80028ac:	4604      	mov	r4, r0
 80028ae:	4608      	mov	r0, r1
 80028b0:	4611      	mov	r1, r2
 80028b2:	2200      	movs	r2, #0
 80028b4:	602a      	str	r2, [r5, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	f7fe fa94 	bl	8000de4 <_read>
 80028bc:	1c43      	adds	r3, r0, #1
 80028be:	d102      	bne.n	80028c6 <_read_r+0x1e>
 80028c0:	682b      	ldr	r3, [r5, #0]
 80028c2:	b103      	cbz	r3, 80028c6 <_read_r+0x1e>
 80028c4:	6023      	str	r3, [r4, #0]
 80028c6:	bd38      	pop	{r3, r4, r5, pc}
 80028c8:	200001e4 	.word	0x200001e4

080028cc <_write_r>:
 80028cc:	b538      	push	{r3, r4, r5, lr}
 80028ce:	4d07      	ldr	r5, [pc, #28]	; (80028ec <_write_r+0x20>)
 80028d0:	4604      	mov	r4, r0
 80028d2:	4608      	mov	r0, r1
 80028d4:	4611      	mov	r1, r2
 80028d6:	2200      	movs	r2, #0
 80028d8:	602a      	str	r2, [r5, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	f7fe fa9f 	bl	8000e1e <_write>
 80028e0:	1c43      	adds	r3, r0, #1
 80028e2:	d102      	bne.n	80028ea <_write_r+0x1e>
 80028e4:	682b      	ldr	r3, [r5, #0]
 80028e6:	b103      	cbz	r3, 80028ea <_write_r+0x1e>
 80028e8:	6023      	str	r3, [r4, #0]
 80028ea:	bd38      	pop	{r3, r4, r5, pc}
 80028ec:	200001e4 	.word	0x200001e4

080028f0 <_init>:
 80028f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f2:	bf00      	nop
 80028f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028f6:	bc08      	pop	{r3}
 80028f8:	469e      	mov	lr, r3
 80028fa:	4770      	bx	lr

080028fc <_fini>:
 80028fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fe:	bf00      	nop
 8002900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002902:	bc08      	pop	{r3}
 8002904:	469e      	mov	lr, r3
 8002906:	4770      	bx	lr
