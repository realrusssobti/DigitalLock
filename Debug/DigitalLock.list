
DigitalLock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002740  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080028c8  080028c8  000128c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029b8  080029b8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080029b8  080029b8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029b8  080029b8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029b8  080029b8  000129b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029bc  080029bc  000129bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080029c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000078  08002a38  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08002a38  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000068d0  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000179e  00000000  00000000  000269bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  00028160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000516  00000000  00000000  00028868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025cdc  00000000  00000000  00028d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007c16  00000000  00000000  0004ea5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8ac9  00000000  00000000  00056670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002060  00000000  00000000  0013f13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0014119c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080028b0 	.word	0x080028b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	080028b0 	.word	0x080028b0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <initKeypad>:
		{'1', '2', '3', 'A'},
		{'4', '5', '6', 'B'},
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'}
};
void initKeypad(void){
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	// turns on clock to GPIO bank B
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 80001f0:	4b14      	ldr	r3, [pc, #80]	; (8000244 <initKeypad+0x58>)
 80001f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f4:	4a13      	ldr	r2, [pc, #76]	; (8000244 <initKeypad+0x58>)
 80001f6:	f043 0302 	orr.w	r3, r3, #2
 80001fa:	64d3      	str	r3, [r2, #76]	; 0x4c
	// Configure GPIO pins for rows (output)
	// GPIOB pins 0-3 for rows (output)
	GPIOB->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <initKeypad+0x5c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a11      	ldr	r2, [pc, #68]	; (8000248 <initKeypad+0x5c>)
 8000202:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000206:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0;
 8000208:	4b0f      	ldr	r3, [pc, #60]	; (8000248 <initKeypad+0x5c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a0e      	ldr	r2, [pc, #56]	; (8000248 <initKeypad+0x5c>)
 800020e:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8000212:	6013      	str	r3, [r2, #0]

	// Configure GPIO pins for columns (input with pull-up)
	// GPIOB pins 4-7 for columns (input with pull-up)
	GPIOB->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 8000214:	4b0c      	ldr	r3, [pc, #48]	; (8000248 <initKeypad+0x5c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a0b      	ldr	r2, [pc, #44]	; (8000248 <initKeypad+0x5c>)
 800021a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800021e:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 8000220:	4b09      	ldr	r3, [pc, #36]	; (8000248 <initKeypad+0x5c>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	4a08      	ldr	r2, [pc, #32]	; (8000248 <initKeypad+0x5c>)
 8000226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800022a:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD4_0 | GPIO_PUPDR_PUPD5_0 | GPIO_PUPDR_PUPD6_0 | GPIO_PUPDR_PUPD7_0;
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <initKeypad+0x5c>)
 800022e:	68db      	ldr	r3, [r3, #12]
 8000230:	4a05      	ldr	r2, [pc, #20]	; (8000248 <initKeypad+0x5c>)
 8000232:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8000236:	60d3      	str	r3, [r2, #12]

	return;
 8000238:	bf00      	nop
}
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	40021000 	.word	0x40021000
 8000248:	48000400 	.word	0x48000400

0800024c <readKeypad>:

int readKeypad(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
	// Make ROWs LOW and all other ROWs HIGH
	for (int row = 0; row < 4; row++) {
 8000252:	2300      	movs	r3, #0
 8000254:	607b      	str	r3, [r7, #4]
 8000256:	e0fb      	b.n	8000450 <readKeypad+0x204>
		// Pull the current ROW low
		switch (row) {
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2b03      	cmp	r3, #3
 800025c:	d822      	bhi.n	80002a4 <readKeypad+0x58>
 800025e:	a201      	add	r2, pc, #4	; (adr r2, 8000264 <readKeypad+0x18>)
 8000260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000264:	08000275 	.word	0x08000275
 8000268:	08000281 	.word	0x08000281
 800026c:	0800028d 	.word	0x0800028d
 8000270:	08000299 	.word	0x08000299
			case 0:
				HAL_GPIO_WritePin(R1_PORT, R1_PIN, GPIO_PIN_RESET);
 8000274:	2200      	movs	r2, #0
 8000276:	2101      	movs	r1, #1
 8000278:	487a      	ldr	r0, [pc, #488]	; (8000464 <readKeypad+0x218>)
 800027a:	f001 f810 	bl	800129e <HAL_GPIO_WritePin>
				break;
 800027e:	e012      	b.n	80002a6 <readKeypad+0x5a>
			case 1:
				HAL_GPIO_WritePin(R2_PORT, R2_PIN, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2102      	movs	r1, #2
 8000284:	4877      	ldr	r0, [pc, #476]	; (8000464 <readKeypad+0x218>)
 8000286:	f001 f80a 	bl	800129e <HAL_GPIO_WritePin>
				break;
 800028a:	e00c      	b.n	80002a6 <readKeypad+0x5a>
			case 2:
				HAL_GPIO_WritePin(R3_PORT, R3_PIN, GPIO_PIN_RESET);
 800028c:	2200      	movs	r2, #0
 800028e:	2104      	movs	r1, #4
 8000290:	4874      	ldr	r0, [pc, #464]	; (8000464 <readKeypad+0x218>)
 8000292:	f001 f804 	bl	800129e <HAL_GPIO_WritePin>
				break;
 8000296:	e006      	b.n	80002a6 <readKeypad+0x5a>
			case 3:
				HAL_GPIO_WritePin(R4_PORT, R4_PIN, GPIO_PIN_RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	2108      	movs	r1, #8
 800029c:	4871      	ldr	r0, [pc, #452]	; (8000464 <readKeypad+0x218>)
 800029e:	f000 fffe 	bl	800129e <HAL_GPIO_WritePin>
				break;
 80002a2:	e000      	b.n	80002a6 <readKeypad+0x5a>
			default:
				break;
 80002a4:	bf00      	nop
		}

		// Check each column
		for (int col = 0; col < 4; col++) {
 80002a6:	2300      	movs	r3, #0
 80002a8:	603b      	str	r3, [r7, #0]
 80002aa:	e0a3      	b.n	80003f4 <readKeypad+0x1a8>
			// Pull the current COLUMN high
			switch (col) {
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	2b03      	cmp	r3, #3
 80002b0:	d822      	bhi.n	80002f8 <readKeypad+0xac>
 80002b2:	a201      	add	r2, pc, #4	; (adr r2, 80002b8 <readKeypad+0x6c>)
 80002b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b8:	080002c9 	.word	0x080002c9
 80002bc:	080002d5 	.word	0x080002d5
 80002c0:	080002e1 	.word	0x080002e1
 80002c4:	080002ed 	.word	0x080002ed
				case 0:
					HAL_GPIO_WritePin(C1_PORT, C1_PIN, GPIO_PIN_SET);
 80002c8:	2201      	movs	r2, #1
 80002ca:	2110      	movs	r1, #16
 80002cc:	4865      	ldr	r0, [pc, #404]	; (8000464 <readKeypad+0x218>)
 80002ce:	f000 ffe6 	bl	800129e <HAL_GPIO_WritePin>
					break;
 80002d2:	e012      	b.n	80002fa <readKeypad+0xae>
				case 1:
					HAL_GPIO_WritePin(C2_PORT, C2_PIN, GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2120      	movs	r1, #32
 80002d8:	4862      	ldr	r0, [pc, #392]	; (8000464 <readKeypad+0x218>)
 80002da:	f000 ffe0 	bl	800129e <HAL_GPIO_WritePin>
					break;
 80002de:	e00c      	b.n	80002fa <readKeypad+0xae>
				case 2:
					HAL_GPIO_WritePin(C3_PORT, C3_PIN, GPIO_PIN_SET);
 80002e0:	2201      	movs	r2, #1
 80002e2:	2140      	movs	r1, #64	; 0x40
 80002e4:	485f      	ldr	r0, [pc, #380]	; (8000464 <readKeypad+0x218>)
 80002e6:	f000 ffda 	bl	800129e <HAL_GPIO_WritePin>
					break;
 80002ea:	e006      	b.n	80002fa <readKeypad+0xae>
				case 3:
					HAL_GPIO_WritePin(C4_PORT, C4_PIN, GPIO_PIN_SET);
 80002ec:	2201      	movs	r2, #1
 80002ee:	2180      	movs	r1, #128	; 0x80
 80002f0:	485c      	ldr	r0, [pc, #368]	; (8000464 <readKeypad+0x218>)
 80002f2:	f000 ffd4 	bl	800129e <HAL_GPIO_WritePin>
					break;
 80002f6:	e000      	b.n	80002fa <readKeypad+0xae>
				default:
					break;
 80002f8:	bf00      	nop
			}

			// Check if the button is pressed
			if (!HAL_GPIO_ReadPin(C1_PORT, C1_PIN)) {
 80002fa:	2110      	movs	r1, #16
 80002fc:	4859      	ldr	r0, [pc, #356]	; (8000464 <readKeypad+0x218>)
 80002fe:	f000 ffb6 	bl	800126e <HAL_GPIO_ReadPin>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d10c      	bne.n	8000322 <readKeypad+0xd6>
				while (!HAL_GPIO_ReadPin(C1_PORT, C1_PIN));
 8000308:	bf00      	nop
 800030a:	2110      	movs	r1, #16
 800030c:	4855      	ldr	r0, [pc, #340]	; (8000464 <readKeypad+0x218>)
 800030e:	f000 ffae 	bl	800126e <HAL_GPIO_ReadPin>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d0f8      	beq.n	800030a <readKeypad+0xbe>
				return (row * 4) + col;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	009a      	lsls	r2, r3, #2
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	4413      	add	r3, r2
 8000320:	e09c      	b.n	800045c <readKeypad+0x210>
			} else if (!HAL_GPIO_ReadPin(C2_PORT, C2_PIN)) {
 8000322:	2120      	movs	r1, #32
 8000324:	484f      	ldr	r0, [pc, #316]	; (8000464 <readKeypad+0x218>)
 8000326:	f000 ffa2 	bl	800126e <HAL_GPIO_ReadPin>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d10d      	bne.n	800034c <readKeypad+0x100>
				while (!HAL_GPIO_ReadPin(C2_PORT, C2_PIN));
 8000330:	bf00      	nop
 8000332:	2120      	movs	r1, #32
 8000334:	484b      	ldr	r0, [pc, #300]	; (8000464 <readKeypad+0x218>)
 8000336:	f000 ff9a 	bl	800126e <HAL_GPIO_ReadPin>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0f8      	beq.n	8000332 <readKeypad+0xe6>
				return (row * 4) + col + 1;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	009a      	lsls	r2, r3, #2
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	4413      	add	r3, r2
 8000348:	3301      	adds	r3, #1
 800034a:	e087      	b.n	800045c <readKeypad+0x210>
			} else if (!HAL_GPIO_ReadPin(C3_PORT, C3_PIN)) {
 800034c:	2140      	movs	r1, #64	; 0x40
 800034e:	4845      	ldr	r0, [pc, #276]	; (8000464 <readKeypad+0x218>)
 8000350:	f000 ff8d 	bl	800126e <HAL_GPIO_ReadPin>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d10d      	bne.n	8000376 <readKeypad+0x12a>
				while (!HAL_GPIO_ReadPin(C3_PORT, C3_PIN));
 800035a:	bf00      	nop
 800035c:	2140      	movs	r1, #64	; 0x40
 800035e:	4841      	ldr	r0, [pc, #260]	; (8000464 <readKeypad+0x218>)
 8000360:	f000 ff85 	bl	800126e <HAL_GPIO_ReadPin>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0f8      	beq.n	800035c <readKeypad+0x110>
				return (row * 4) + col + 2;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	009a      	lsls	r2, r3, #2
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	4413      	add	r3, r2
 8000372:	3302      	adds	r3, #2
 8000374:	e072      	b.n	800045c <readKeypad+0x210>
			} else if (!HAL_GPIO_ReadPin(C4_PORT, C4_PIN)) {
 8000376:	2180      	movs	r1, #128	; 0x80
 8000378:	483a      	ldr	r0, [pc, #232]	; (8000464 <readKeypad+0x218>)
 800037a:	f000 ff78 	bl	800126e <HAL_GPIO_ReadPin>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d10d      	bne.n	80003a0 <readKeypad+0x154>
				while (!HAL_GPIO_ReadPin(C4_PORT, C4_PIN));
 8000384:	bf00      	nop
 8000386:	2180      	movs	r1, #128	; 0x80
 8000388:	4836      	ldr	r0, [pc, #216]	; (8000464 <readKeypad+0x218>)
 800038a:	f000 ff70 	bl	800126e <HAL_GPIO_ReadPin>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0f8      	beq.n	8000386 <readKeypad+0x13a>
				return (row * 4) + col + 3;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	009a      	lsls	r2, r3, #2
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	4413      	add	r3, r2
 800039c:	3303      	adds	r3, #3
 800039e:	e05d      	b.n	800045c <readKeypad+0x210>
			}

			// Release the current COLUMN
			switch (col) {
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	2b03      	cmp	r3, #3
 80003a4:	d822      	bhi.n	80003ec <readKeypad+0x1a0>
 80003a6:	a201      	add	r2, pc, #4	; (adr r2, 80003ac <readKeypad+0x160>)
 80003a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ac:	080003bd 	.word	0x080003bd
 80003b0:	080003c9 	.word	0x080003c9
 80003b4:	080003d5 	.word	0x080003d5
 80003b8:	080003e1 	.word	0x080003e1
				case 0:
					HAL_GPIO_WritePin(C1_PORT, C1_PIN, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	2110      	movs	r1, #16
 80003c0:	4828      	ldr	r0, [pc, #160]	; (8000464 <readKeypad+0x218>)
 80003c2:	f000 ff6c 	bl	800129e <HAL_GPIO_WritePin>
					break;
 80003c6:	e012      	b.n	80003ee <readKeypad+0x1a2>
				case 1:
					HAL_GPIO_WritePin(C2_PORT, C2_PIN, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2120      	movs	r1, #32
 80003cc:	4825      	ldr	r0, [pc, #148]	; (8000464 <readKeypad+0x218>)
 80003ce:	f000 ff66 	bl	800129e <HAL_GPIO_WritePin>
					break;
 80003d2:	e00c      	b.n	80003ee <readKeypad+0x1a2>
				case 2:
					HAL_GPIO_WritePin(C3_PORT, C3_PIN, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	2140      	movs	r1, #64	; 0x40
 80003d8:	4822      	ldr	r0, [pc, #136]	; (8000464 <readKeypad+0x218>)
 80003da:	f000 ff60 	bl	800129e <HAL_GPIO_WritePin>
					break;
 80003de:	e006      	b.n	80003ee <readKeypad+0x1a2>
				case 3:
					HAL_GPIO_WritePin(C4_PORT, C4_PIN, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2180      	movs	r1, #128	; 0x80
 80003e4:	481f      	ldr	r0, [pc, #124]	; (8000464 <readKeypad+0x218>)
 80003e6:	f000 ff5a 	bl	800129e <HAL_GPIO_WritePin>
					break;
 80003ea:	e000      	b.n	80003ee <readKeypad+0x1a2>
				default:
					break;
 80003ec:	bf00      	nop
		for (int col = 0; col < 4; col++) {
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	3301      	adds	r3, #1
 80003f2:	603b      	str	r3, [r7, #0]
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	2b03      	cmp	r3, #3
 80003f8:	f77f af58 	ble.w	80002ac <readKeypad+0x60>
			}
		}

		// Release the current ROW
		switch (row) {
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2b03      	cmp	r3, #3
 8000400:	d822      	bhi.n	8000448 <readKeypad+0x1fc>
 8000402:	a201      	add	r2, pc, #4	; (adr r2, 8000408 <readKeypad+0x1bc>)
 8000404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000408:	08000419 	.word	0x08000419
 800040c:	08000425 	.word	0x08000425
 8000410:	08000431 	.word	0x08000431
 8000414:	0800043d 	.word	0x0800043d
			case 0:
				HAL_GPIO_WritePin(R1_PORT, R1_PIN, GPIO_PIN_SET);
 8000418:	2201      	movs	r2, #1
 800041a:	2101      	movs	r1, #1
 800041c:	4811      	ldr	r0, [pc, #68]	; (8000464 <readKeypad+0x218>)
 800041e:	f000 ff3e 	bl	800129e <HAL_GPIO_WritePin>
				break;
 8000422:	e012      	b.n	800044a <readKeypad+0x1fe>
			case 1:
				HAL_GPIO_WritePin(R2_PORT, R2_PIN, GPIO_PIN_SET);
 8000424:	2201      	movs	r2, #1
 8000426:	2102      	movs	r1, #2
 8000428:	480e      	ldr	r0, [pc, #56]	; (8000464 <readKeypad+0x218>)
 800042a:	f000 ff38 	bl	800129e <HAL_GPIO_WritePin>
				break;
 800042e:	e00c      	b.n	800044a <readKeypad+0x1fe>
			case 2:
				HAL_GPIO_WritePin(R3_PORT, R3_PIN, GPIO_PIN_SET);
 8000430:	2201      	movs	r2, #1
 8000432:	2104      	movs	r1, #4
 8000434:	480b      	ldr	r0, [pc, #44]	; (8000464 <readKeypad+0x218>)
 8000436:	f000 ff32 	bl	800129e <HAL_GPIO_WritePin>
				break;
 800043a:	e006      	b.n	800044a <readKeypad+0x1fe>
			case 3:
				HAL_GPIO_WritePin(R4_PORT, R4_PIN, GPIO_PIN_SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2108      	movs	r1, #8
 8000440:	4808      	ldr	r0, [pc, #32]	; (8000464 <readKeypad+0x218>)
 8000442:	f000 ff2c 	bl	800129e <HAL_GPIO_WritePin>
				break;
 8000446:	e000      	b.n	800044a <readKeypad+0x1fe>
			default:
				break;
 8000448:	bf00      	nop
	for (int row = 0; row < 4; row++) {
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	3301      	adds	r3, #1
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2b03      	cmp	r3, #3
 8000454:	f77f af00 	ble.w	8000258 <readKeypad+0xc>
		}
	}

	// No button pressed
	return -1;
 8000458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800045c:	4618      	mov	r0, r3
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	48000400 	.word	0x48000400

08000468 <readChar>:

char readChar() {
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
	int key = readKeypad();
 800046e:	f7ff feed 	bl	800024c <readKeypad>
 8000472:	6078      	str	r0, [r7, #4]
	if (key == -1) {
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800047a:	d101      	bne.n	8000480 <readChar+0x18>
		return '\0';
 800047c:	2300      	movs	r3, #0
 800047e:	e003      	b.n	8000488 <readChar+0x20>
	} else {
		return decodeKey(key);
 8000480:	6878      	ldr	r0, [r7, #4]
 8000482:	f000 f805 	bl	8000490 <decodeKey>
 8000486:	4603      	mov	r3, r0
	}
}
 8000488:	4618      	mov	r0, r3
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <decodeKey>:

char decodeKey(int key) {
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	return keypadLayout[key / 4][key % 4];
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2b00      	cmp	r3, #0
 800049c:	da00      	bge.n	80004a0 <decodeKey+0x10>
 800049e:	3303      	adds	r3, #3
 80004a0:	109b      	asrs	r3, r3, #2
 80004a2:	4618      	mov	r0, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	425a      	negs	r2, r3
 80004a8:	f003 0303 	and.w	r3, r3, #3
 80004ac:	f002 0203 	and.w	r2, r2, #3
 80004b0:	bf58      	it	pl
 80004b2:	4253      	negpl	r3, r2
 80004b4:	4905      	ldr	r1, [pc, #20]	; (80004cc <decodeKey+0x3c>)
 80004b6:	0082      	lsls	r2, r0, #2
 80004b8:	440a      	add	r2, r1
 80004ba:	4413      	add	r3, r2
 80004bc:	781b      	ldrb	r3, [r3, #0]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	20000000 	.word	0x20000000

080004d0 <LCD_init>:
 *      Author: aoberai
 */

#include "lcd.h"

void LCD_init(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0

	//reset control pins
	GPIOC->ODR &= ~(E_PIN);
 80004d4:	4b1d      	ldr	r3, [pc, #116]	; (800054c <LCD_init+0x7c>)
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	4a1c      	ldr	r2, [pc, #112]	; (800054c <LCD_init+0x7c>)
 80004da:	f023 0304 	bic.w	r3, r3, #4
 80004de:	6153      	str	r3, [r2, #20]
	GPIOC->ODR &= ~(RS_PIN);
 80004e0:	4b1a      	ldr	r3, [pc, #104]	; (800054c <LCD_init+0x7c>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	4a19      	ldr	r2, [pc, #100]	; (800054c <LCD_init+0x7c>)
 80004e6:	f023 0301 	bic.w	r3, r3, #1
 80004ea:	6153      	str	r3, [r2, #20]

	HAL_Delay(50);
 80004ec:	2032      	movs	r0, #50	; 0x32
 80004ee:	f000 fdb5 	bl	800105c <HAL_Delay>

	//wake the display up
	LCD_command(WAKE_UP);
 80004f2:	2030      	movs	r0, #48	; 0x30
 80004f4:	f000 f82c 	bl	8000550 <LCD_command>
	HAL_Delay(100);
 80004f8:	2064      	movs	r0, #100	; 0x64
 80004fa:	f000 fdaf 	bl	800105c <HAL_Delay>
	LCD_command(WAKE_UP);
 80004fe:	2030      	movs	r0, #48	; 0x30
 8000500:	f000 f826 	bl	8000550 <LCD_command>
	HAL_Delay(10);
 8000504:	200a      	movs	r0, #10
 8000506:	f000 fda9 	bl	800105c <HAL_Delay>
	LCD_command(WAKE_UP);
 800050a:	2030      	movs	r0, #48	; 0x30
 800050c:	f000 f820 	bl	8000550 <LCD_command>
	HAL_Delay(10);
 8000510:	200a      	movs	r0, #10
 8000512:	f000 fda3 	bl	800105c <HAL_Delay>

	//function set the display
	LCD_command(FUNC_SET);
 8000516:	2038      	movs	r0, #56	; 0x38
 8000518:	f000 f81a 	bl	8000550 <LCD_command>

	HAL_Delay(5);
 800051c:	2005      	movs	r0, #5
 800051e:	f000 fd9d 	bl	800105c <HAL_Delay>

	LCD_command(DISPLAY_OFF);
 8000522:	200e      	movs	r0, #14
 8000524:	f000 f814 	bl	8000550 <LCD_command>

	HAL_Delay(5);
 8000528:	2005      	movs	r0, #5
 800052a:	f000 fd97 	bl	800105c <HAL_Delay>

	LCD_command(CLEAR_DISPLAY);
 800052e:	2001      	movs	r0, #1
 8000530:	f000 f80e 	bl	8000550 <LCD_command>

	HAL_Delay(5);
 8000534:	2005      	movs	r0, #5
 8000536:	f000 fd91 	bl	800105c <HAL_Delay>

	//entry mode set for data
	LCD_command(ENTRY_SET);
 800053a:	2006      	movs	r0, #6
 800053c:	f000 f808 	bl	8000550 <LCD_command>

	HAL_Delay(5);
 8000540:	2005      	movs	r0, #5
 8000542:	f000 fd8b 	bl	800105c <HAL_Delay>

}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	48000800 	.word	0x48000800

08000550 <LCD_command>:

void LCD_command(uint8_t command) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]

	//clear GPIO_PINS 3-10
	GPIOC->ODR &= ~(CLEAR_BYTE << DATA_SHIFT);
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <LCD_command+0x70>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	4a18      	ldr	r2, [pc, #96]	; (80005c0 <LCD_command+0x70>)
 8000560:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000564:	6153      	str	r3, [r2, #20]

	//shift instruction to appropriate GPIO_PINS 3-10
	GPIOC->ODR |= (command << DATA_SHIFT);
 8000566:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <LCD_command+0x70>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	79fa      	ldrb	r2, [r7, #7]
 800056c:	00d2      	lsls	r2, r2, #3
 800056e:	4611      	mov	r1, r2
 8000570:	4a13      	ldr	r2, [pc, #76]	; (80005c0 <LCD_command+0x70>)
 8000572:	430b      	orrs	r3, r1
 8000574:	6153      	str	r3, [r2, #20]

	//reset RS Pin for Instruction mode
	GPIOC->ODR &= ~(RS_PIN);
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <LCD_command+0x70>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a11      	ldr	r2, [pc, #68]	; (80005c0 <LCD_command+0x70>)
 800057c:	f023 0301 	bic.w	r3, r3, #1
 8000580:	6153      	str	r3, [r2, #20]

	//reset RW Pin for Write mode
	GPIOC->ODR &= ~(RW_PIN);
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <LCD_command+0x70>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <LCD_command+0x70>)
 8000588:	f023 0302 	bic.w	r3, r3, #2
 800058c:	6153      	str	r3, [r2, #20]

	HAL_Delay(10);
 800058e:	200a      	movs	r0, #10
 8000590:	f000 fd64 	bl	800105c <HAL_Delay>

	latch_falling_edge();
 8000594:	f000 f886 	bl	80006a4 <latch_falling_edge>

	//put LCD in read mode to prevent unintended command writes
	GPIOC->ODR |= RS_PIN;
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <LCD_command+0x70>)
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <LCD_command+0x70>)
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	6153      	str	r3, [r2, #20]
	GPIOC->ODR |= RW_PIN;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <LCD_command+0x70>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <LCD_command+0x70>)
 80005aa:	f043 0302 	orr.w	r3, r3, #2
 80005ae:	6153      	str	r3, [r2, #20]

	HAL_Delay(10);
 80005b0:	200a      	movs	r0, #10
 80005b2:	f000 fd53 	bl	800105c <HAL_Delay>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	48000800 	.word	0x48000800

080005c4 <LCD_write_char>:

void LCD_write_char(uint8_t letter) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]

	//clear GPIO_PINS 3-10
	GPIOC->ODR &= ~(CLEAR_BYTE << DATA_SHIFT);
 80005ce:	4b19      	ldr	r3, [pc, #100]	; (8000634 <LCD_write_char+0x70>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a18      	ldr	r2, [pc, #96]	; (8000634 <LCD_write_char+0x70>)
 80005d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80005d8:	6153      	str	r3, [r2, #20]

	//shift data to appropriate GPIO_PINS 3-10
	GPIOC->ODR |= (letter << DATA_SHIFT);
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <LCD_write_char+0x70>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	79fa      	ldrb	r2, [r7, #7]
 80005e0:	00d2      	lsls	r2, r2, #3
 80005e2:	4611      	mov	r1, r2
 80005e4:	4a13      	ldr	r2, [pc, #76]	; (8000634 <LCD_write_char+0x70>)
 80005e6:	430b      	orrs	r3, r1
 80005e8:	6153      	str	r3, [r2, #20]

	//set RS PIN for Data mode
	GPIOC->ODR |= RS_PIN;
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <LCD_write_char+0x70>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a11      	ldr	r2, [pc, #68]	; (8000634 <LCD_write_char+0x70>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6153      	str	r3, [r2, #20]

	//reset RW PIN for Write mode
	GPIOC->ODR &= ~(RW_PIN);
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <LCD_write_char+0x70>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <LCD_write_char+0x70>)
 80005fc:	f023 0302 	bic.w	r3, r3, #2
 8000600:	6153      	str	r3, [r2, #20]

	HAL_Delay(10);
 8000602:	200a      	movs	r0, #10
 8000604:	f000 fd2a 	bl	800105c <HAL_Delay>

	latch_falling_edge();
 8000608:	f000 f84c 	bl	80006a4 <latch_falling_edge>

	//put LCD in read mode to prevent unintended command writes
	GPIOC->ODR |= RS_PIN;
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <LCD_write_char+0x70>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	4a08      	ldr	r2, [pc, #32]	; (8000634 <LCD_write_char+0x70>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6153      	str	r3, [r2, #20]
	GPIOC->ODR |= RW_PIN;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <LCD_write_char+0x70>)
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	4a05      	ldr	r2, [pc, #20]	; (8000634 <LCD_write_char+0x70>)
 800061e:	f043 0302 	orr.w	r3, r3, #2
 8000622:	6153      	str	r3, [r2, #20]

	HAL_Delay(10);
 8000624:	200a      	movs	r0, #10
 8000626:	f000 fd19 	bl	800105c <HAL_Delay>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	48000800 	.word	0x48000800

08000638 <LCD_write_string>:

void LCD_write_string(char *str) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]

	for(; *str != 0; ++str) {
 8000640:	e007      	b.n	8000652 <LCD_write_string+0x1a>

		LCD_write_char(*str);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff ffbc 	bl	80005c4 <LCD_write_char>
	for(; *str != 0; ++str) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3301      	adds	r3, #1
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1f3      	bne.n	8000642 <LCD_write_string+0xa>
	}

}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <LCD_set_cursor>:

void LCD_set_cursor(char x, char y) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	460a      	mov	r2, r1
 800066e:	71fb      	strb	r3, [r7, #7]
 8000670:	4613      	mov	r3, r2
 8000672:	71bb      	strb	r3, [r7, #6]
	uint8_t origin = 0x0;
 8000674:	2300      	movs	r3, #0
 8000676:	73fb      	strb	r3, [r7, #15]

	if(y == 1) {
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d101      	bne.n	8000682 <LCD_set_cursor+0x1e>
		origin = 0x40;
 800067e:	2340      	movs	r3, #64	; 0x40
 8000680:	73fb      	strb	r3, [r7, #15]
	}

	LCD_command(SET_CURSOR | (origin + x));
 8000682:	7bfa      	ldrb	r2, [r7, #15]
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	4413      	add	r3, r2
 8000688:	b2db      	uxtb	r3, r3
 800068a:	b25b      	sxtb	r3, r3
 800068c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000690:	b25b      	sxtb	r3, r3
 8000692:	b2db      	uxtb	r3, r3
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff ff5b 	bl	8000550 <LCD_command>
}
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <latch_falling_edge>:

void latch_falling_edge(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0

	//create high-low negative edge pulse
	GPIOC->ODR |= E_PIN;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <latch_falling_edge+0x2c>)
 80006aa:	695b      	ldr	r3, [r3, #20]
 80006ac:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <latch_falling_edge+0x2c>)
 80006ae:	f043 0304 	orr.w	r3, r3, #4
 80006b2:	6153      	str	r3, [r2, #20]
	HAL_Delay(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 fcd1 	bl	800105c <HAL_Delay>
	GPIOC->ODR &= ~(E_PIN);
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <latch_falling_edge+0x2c>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <latch_falling_edge+0x2c>)
 80006c0:	f023 0304 	bic.w	r3, r3, #4
 80006c4:	6153      	str	r3, [r2, #20]
	HAL_Delay(1);
 80006c6:	2001      	movs	r0, #1
 80006c8:	f000 fcc8 	bl	800105c <HAL_Delay>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	48000800 	.word	0x48000800

080006d4 <setLEDState>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

void setLEDState(int state){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d106      	bne.n	80006f0 <setLEDState+0x1c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2120      	movs	r1, #32
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ea:	f000 fdd8 	bl	800129e <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	}
}
 80006ee:	e005      	b.n	80006fc <setLEDState+0x28>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2120      	movs	r1, #32
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f8:	f000 fdd1 	bl	800129e <HAL_GPIO_WritePin>
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <displayLCD>:
void displayLCD( char *line_one,  char *line_two) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
	char* blank_string = "                ";
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <displayLCD+0x50>)
 8000710:	60fb      	str	r3, [r7, #12]
	LCD_set_cursor(0,0);
 8000712:	2100      	movs	r1, #0
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff ffa5 	bl	8000664 <LCD_set_cursor>
	LCD_write_string(blank_string);
 800071a:	68f8      	ldr	r0, [r7, #12]
 800071c:	f7ff ff8c 	bl	8000638 <LCD_write_string>
	LCD_set_cursor(0,0);
 8000720:	2100      	movs	r1, #0
 8000722:	2000      	movs	r0, #0
 8000724:	f7ff ff9e 	bl	8000664 <LCD_set_cursor>
	LCD_write_string(line_one);
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff ff85 	bl	8000638 <LCD_write_string>
	LCD_set_cursor(0,1);
 800072e:	2101      	movs	r1, #1
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff ff97 	bl	8000664 <LCD_set_cursor>
	LCD_write_string(blank_string);
 8000736:	68f8      	ldr	r0, [r7, #12]
 8000738:	f7ff ff7e 	bl	8000638 <LCD_write_string>
	LCD_set_cursor(0,1);
 800073c:	2101      	movs	r1, #1
 800073e:	2000      	movs	r0, #0
 8000740:	f7ff ff90 	bl	8000664 <LCD_set_cursor>
	LCD_write_string(line_two);
 8000744:	6838      	ldr	r0, [r7, #0]
 8000746:	f7ff ff77 	bl	8000638 <LCD_write_string>
}
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	080028c8 	.word	0x080028c8

08000758 <main>:


/* USER CODE BEGIN PFP */
int main(void) {
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b08b      	sub	sp, #44	; 0x2c
 800075c:	af00      	add	r7, sp, #0

    // Initialize the HAL Library
    HAL_Init();
 800075e:	f000 fc01 	bl	8000f64 <HAL_Init>

    // System Clock Configuration
    SystemClock_Config();
 8000762:	f000 fa7b 	bl	8000c5c <SystemClock_Config>

    // turns on clock to GPIO banks C
    RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOCEN | RCC_AHB2ENR_GPIOAEN);
 8000766:	4bb3      	ldr	r3, [pc, #716]	; (8000a34 <main+0x2dc>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4ab2      	ldr	r2, [pc, #712]	; (8000a34 <main+0x2dc>)
 800076c:	f043 0305 	orr.w	r3, r3, #5
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c

    //bank PC0-PC10 as all GPIO outputs
    GPIOC->MODER &= ~(CLEAR_PC);
 8000772:	4bb1      	ldr	r3, [pc, #708]	; (8000a38 <main+0x2e0>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4ab0      	ldr	r2, [pc, #704]	; (8000a38 <main+0x2e0>)
 8000778:	0d9b      	lsrs	r3, r3, #22
 800077a:	059b      	lsls	r3, r3, #22
 800077c:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=   PC_OUT;
 800077e:	4bae      	ldr	r3, [pc, #696]	; (8000a38 <main+0x2e0>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	49ad      	ldr	r1, [pc, #692]	; (8000a38 <main+0x2e0>)
 8000784:	4bad      	ldr	r3, [pc, #692]	; (8000a3c <main+0x2e4>)
 8000786:	4313      	orrs	r3, r2
 8000788:	600b      	str	r3, [r1, #0]

	// set up green LED light on pin PA5
	GPIOA->MODER &= ~(GPIO_MODER_MODE5);
 800078a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000794:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000798:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE5_0 ;
 800079a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007a8:	6013      	str	r3, [r2, #0]


    LCD_init();
 80007aa:	f7ff fe91 	bl	80004d0 <LCD_init>
    char* line_one = malloc(17);
 80007ae:	2011      	movs	r0, #17
 80007b0:	f001 fbba 	bl	8001f28 <malloc>
 80007b4:	4603      	mov	r3, r0
 80007b6:	623b      	str	r3, [r7, #32]
    char* line_two = malloc(17);
 80007b8:	2011      	movs	r0, #17
 80007ba:	f001 fbb5 	bl	8001f28 <malloc>
 80007be:	4603      	mov	r3, r0
 80007c0:	61fb      	str	r3, [r7, #28]
	strcpy(line_one, "Hello World");
 80007c2:	6a3b      	ldr	r3, [r7, #32]
 80007c4:	4a9e      	ldr	r2, [pc, #632]	; (8000a40 <main+0x2e8>)
 80007c6:	461c      	mov	r4, r3
 80007c8:	4613      	mov	r3, r2
 80007ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80007cc:	6020      	str	r0, [r4, #0]
 80007ce:	6061      	str	r1, [r4, #4]
 80007d0:	60a2      	str	r2, [r4, #8]
	strcpy(line_two, "Assignment 3");
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	4a9b      	ldr	r2, [pc, #620]	; (8000a44 <main+0x2ec>)
 80007d6:	461c      	mov	r4, r3
 80007d8:	4613      	mov	r3, r2
 80007da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80007dc:	6020      	str	r0, [r4, #0]
 80007de:	6061      	str	r1, [r4, #4]
 80007e0:	60a2      	str	r2, [r4, #8]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	7323      	strb	r3, [r4, #12]
	displayLCD(line_one, line_two);
 80007e6:	69f9      	ldr	r1, [r7, #28]
 80007e8:	6a38      	ldr	r0, [r7, #32]
 80007ea:	f7ff ff8b 	bl	8000704 <displayLCD>


	// Initial state
	enum State currentState = POWER_UP;
 80007ee:	2300      	movs	r3, #0
 80007f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// Pin variables
	char enteredPin[5] = {'\0'};
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	2300      	movs	r3, #0
 80007fa:	743b      	strb	r3, [r7, #16]
	char correctPin[] = "1234";
 80007fc:	4a92      	ldr	r2, [pc, #584]	; (8000a48 <main+0x2f0>)
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000804:	6018      	str	r0, [r3, #0]
 8000806:	3304      	adds	r3, #4
 8000808:	7019      	strb	r1, [r3, #0]
	initKeypad(); // initialize the keypad
 800080a:	f7ff fcef 	bl	80001ec <initKeypad>
	char *buf_one = malloc(17);
 800080e:	2011      	movs	r0, #17
 8000810:	f001 fb8a 	bl	8001f28 <malloc>
 8000814:	4603      	mov	r3, r0
 8000816:	61bb      	str	r3, [r7, #24]
	char *buf_two = malloc(17);
 8000818:	2011      	movs	r0, #17
 800081a:	f001 fb85 	bl	8001f28 <malloc>
 800081e:	4603      	mov	r3, r0
 8000820:	617b      	str	r3, [r7, #20]

	while (currentState != END) {
 8000822:	e1f6      	b.n	8000c12 <main+0x4ba>
		switch (currentState) {
 8000824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000828:	2b06      	cmp	r3, #6
 800082a:	f200 81f1 	bhi.w	8000c10 <main+0x4b8>
 800082e:	a201      	add	r2, pc, #4	; (adr r2, 8000834 <main+0xdc>)
 8000830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000834:	08000851 	.word	0x08000851
 8000838:	080008a9 	.word	0x080008a9
 800083c:	08000901 	.word	0x08000901
 8000840:	08000965 	.word	0x08000965
 8000844:	08000ab3 	.word	0x08000ab3
 8000848:	08000b19 	.word	0x08000b19
 800084c:	08000b85 	.word	0x08000b85
			case POWER_UP:
				strcpy(buf_one, "Locked");
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	4a7e      	ldr	r2, [pc, #504]	; (8000a4c <main+0x2f4>)
 8000854:	6810      	ldr	r0, [r2, #0]
 8000856:	6018      	str	r0, [r3, #0]
 8000858:	8891      	ldrh	r1, [r2, #4]
 800085a:	7992      	ldrb	r2, [r2, #6]
 800085c:	8099      	strh	r1, [r3, #4]
 800085e:	719a      	strb	r2, [r3, #6]
				strcpy(buf_two, "");
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
				if(strcmp(buf_one, line_one) != 0 || strcmp(buf_two, line_two) != 0) displayLCD(buf_one, buf_two);
 8000866:	6a39      	ldr	r1, [r7, #32]
 8000868:	69b8      	ldr	r0, [r7, #24]
 800086a:	f7ff fcb5 	bl	80001d8 <strcmp>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d106      	bne.n	8000882 <main+0x12a>
 8000874:	69f9      	ldr	r1, [r7, #28]
 8000876:	6978      	ldr	r0, [r7, #20]
 8000878:	f7ff fcae 	bl	80001d8 <strcmp>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d003      	beq.n	800088a <main+0x132>
 8000882:	6979      	ldr	r1, [r7, #20]
 8000884:	69b8      	ldr	r0, [r7, #24]
 8000886:	f7ff ff3d 	bl	8000704 <displayLCD>
				// copy over the buffer to the previous buffer
				strcpy(line_one, buf_one);
 800088a:	69b9      	ldr	r1, [r7, #24]
 800088c:	6a38      	ldr	r0, [r7, #32]
 800088e:	f001 fd6a 	bl	8002366 <strcpy>
				strcpy(line_two, buf_two);
 8000892:	6979      	ldr	r1, [r7, #20]
 8000894:	69f8      	ldr	r0, [r7, #28]
 8000896:	f001 fd66 	bl	8002366 <strcpy>

				setLEDState(1); // LED ON
 800089a:	2001      	movs	r0, #1
 800089c:	f7ff ff1a 	bl	80006d4 <setLEDState>
				currentState = LOCKED;
 80008a0:	2301      	movs	r3, #1
 80008a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 80008a6:	e1b4      	b.n	8000c12 <main+0x4ba>

			case LOCKED:
				strcpy(buf_one, "Enter PIN: ");
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	4a69      	ldr	r2, [pc, #420]	; (8000a50 <main+0x2f8>)
 80008ac:	461c      	mov	r4, r3
 80008ae:	4613      	mov	r3, r2
 80008b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80008b2:	6020      	str	r0, [r4, #0]
 80008b4:	6061      	str	r1, [r4, #4]
 80008b6:	60a2      	str	r2, [r4, #8]
				strcpy(buf_two, enteredPin);
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	4619      	mov	r1, r3
 80008be:	6978      	ldr	r0, [r7, #20]
 80008c0:	f001 fd51 	bl	8002366 <strcpy>

				if(strcmp(buf_one, line_one) != 0 || strcmp(buf_two, line_two) != 0) displayLCD(buf_one, buf_two);
 80008c4:	6a39      	ldr	r1, [r7, #32]
 80008c6:	69b8      	ldr	r0, [r7, #24]
 80008c8:	f7ff fc86 	bl	80001d8 <strcmp>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d106      	bne.n	80008e0 <main+0x188>
 80008d2:	69f9      	ldr	r1, [r7, #28]
 80008d4:	6978      	ldr	r0, [r7, #20]
 80008d6:	f7ff fc7f 	bl	80001d8 <strcmp>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d003      	beq.n	80008e8 <main+0x190>
 80008e0:	6979      	ldr	r1, [r7, #20]
 80008e2:	69b8      	ldr	r0, [r7, #24]
 80008e4:	f7ff ff0e 	bl	8000704 <displayLCD>
				// copy over the buffer to the previous buffer
				strcpy(line_one, buf_one);
 80008e8:	69b9      	ldr	r1, [r7, #24]
 80008ea:	6a38      	ldr	r0, [r7, #32]
 80008ec:	f001 fd3b 	bl	8002366 <strcpy>
				strcpy(line_two, buf_two);
 80008f0:	6979      	ldr	r1, [r7, #20]
 80008f2:	69f8      	ldr	r0, [r7, #28]
 80008f4:	f001 fd37 	bl	8002366 <strcpy>
				currentState = ENTER_PIN;
 80008f8:	2303      	movs	r3, #3
 80008fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 80008fe:	e188      	b.n	8000c12 <main+0x4ba>

			case CLEAR_PIN:
				strcpy(buf_one, "Clearing PIN");
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	4a54      	ldr	r2, [pc, #336]	; (8000a54 <main+0x2fc>)
 8000904:	461c      	mov	r4, r3
 8000906:	4613      	mov	r3, r2
 8000908:	cb07      	ldmia	r3!, {r0, r1, r2}
 800090a:	6020      	str	r0, [r4, #0]
 800090c:	6061      	str	r1, [r4, #4]
 800090e:	60a2      	str	r2, [r4, #8]
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	7323      	strb	r3, [r4, #12]
				strcpy(buf_two, "");
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
				if(strcmp(buf_one, line_one) != 0 || strcmp(buf_two, line_two) != 0) displayLCD(buf_one, buf_two);
 800091a:	6a39      	ldr	r1, [r7, #32]
 800091c:	69b8      	ldr	r0, [r7, #24]
 800091e:	f7ff fc5b 	bl	80001d8 <strcmp>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d106      	bne.n	8000936 <main+0x1de>
 8000928:	69f9      	ldr	r1, [r7, #28]
 800092a:	6978      	ldr	r0, [r7, #20]
 800092c:	f7ff fc54 	bl	80001d8 <strcmp>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d003      	beq.n	800093e <main+0x1e6>
 8000936:	6979      	ldr	r1, [r7, #20]
 8000938:	69b8      	ldr	r0, [r7, #24]
 800093a:	f7ff fee3 	bl	8000704 <displayLCD>
				// copy over the buffer to the previous buffer
				strcpy(line_one, buf_one);
 800093e:	69b9      	ldr	r1, [r7, #24]
 8000940:	6a38      	ldr	r0, [r7, #32]
 8000942:	f001 fd10 	bl	8002366 <strcpy>
				strcpy(line_two, buf_two);
 8000946:	6979      	ldr	r1, [r7, #20]
 8000948:	69f8      	ldr	r0, [r7, #28]
 800094a:	f001 fd0c 	bl	8002366 <strcpy>
				memset(enteredPin, 0, sizeof(enteredPin));
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	2205      	movs	r2, #5
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f001 fcc0 	bl	80022dc <memset>
				currentState = ENTER_PIN;
 800095c:	2303      	movs	r3, #3
 800095e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8000962:	e156      	b.n	8000c12 <main+0x4ba>
			case ENTER_PIN:
			{
				char enteredChar;
//				scanf(" %c", &digit);
				// read from the keypad
				enteredChar = readChar();
 8000964:	f7ff fd80 	bl	8000468 <readChar>
 8000968:	4603      	mov	r3, r0
 800096a:	74bb      	strb	r3, [r7, #18]

				if (enteredChar == '*') {
 800096c:	7cbb      	ldrb	r3, [r7, #18]
 800096e:	2b2a      	cmp	r3, #42	; 0x2a
 8000970:	d103      	bne.n	800097a <main+0x222>
					currentState = CLEAR_PIN;
 8000972:	2302      	movs	r3, #2
 8000974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000978:	e14b      	b.n	8000c12 <main+0x4ba>
				} else if (enteredChar == '#') {
 800097a:	7cbb      	ldrb	r3, [r7, #18]
 800097c:	2b23      	cmp	r3, #35	; 0x23
 800097e:	d11d      	bne.n	80009bc <main+0x264>
					// check if correct pin is empty
					if (strlen(correctPin) == 0) {
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d107      	bne.n	8000998 <main+0x240>
						// set the correct pin to the entered pin
						strcpy(correctPin, enteredPin);
 8000988:	f107 020c 	add.w	r2, r7, #12
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4611      	mov	r1, r2
 8000990:	4618      	mov	r0, r3
 8000992:	f001 fce8 	bl	8002366 <strcpy>
 8000996:	e13c      	b.n	8000c12 <main+0x4ba>
					} else
					if (strcmp(enteredPin, correctPin) == 0) {
 8000998:	1d3a      	adds	r2, r7, #4
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4611      	mov	r1, r2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fc19 	bl	80001d8 <strcmp>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d103      	bne.n	80009b4 <main+0x25c>
						currentState = UNLOCK;
 80009ac:	2305      	movs	r3, #5
 80009ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009b2:	e12e      	b.n	8000c12 <main+0x4ba>
					} else {
						currentState = INCORRECT_PIN;
 80009b4:	2304      	movs	r3, #4
 80009b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009ba:	e12a      	b.n	8000c12 <main+0x4ba>
					}
				} else if (enteredChar!='\0' ) {
 80009bc:	7cbb      	ldrb	r3, [r7, #18]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d04c      	beq.n	8000a5c <main+0x304>
					enteredPin[strlen(enteredPin) % 4] = enteredChar;
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fbfe 	bl	80001c8 <strlen>
 80009cc:	4603      	mov	r3, r0
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	3328      	adds	r3, #40	; 0x28
 80009d4:	443b      	add	r3, r7
 80009d6:	7cba      	ldrb	r2, [r7, #18]
 80009d8:	f803 2c1c 	strb.w	r2, [r3, #-28]
					strcpy(buf_one, "Current PIN: ");
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	4a1e      	ldr	r2, [pc, #120]	; (8000a58 <main+0x300>)
 80009e0:	461c      	mov	r4, r3
 80009e2:	4613      	mov	r3, r2
 80009e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80009e6:	6020      	str	r0, [r4, #0]
 80009e8:	6061      	str	r1, [r4, #4]
 80009ea:	60a2      	str	r2, [r4, #8]
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	81a3      	strh	r3, [r4, #12]
					strcpy(buf_two, enteredPin);
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	4619      	mov	r1, r3
 80009f6:	6978      	ldr	r0, [r7, #20]
 80009f8:	f001 fcb5 	bl	8002366 <strcpy>
					if(strcmp(buf_one, line_one) != 0 || strcmp(buf_two, line_two) != 0) displayLCD(buf_one, buf_two);
 80009fc:	6a39      	ldr	r1, [r7, #32]
 80009fe:	69b8      	ldr	r0, [r7, #24]
 8000a00:	f7ff fbea 	bl	80001d8 <strcmp>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d106      	bne.n	8000a18 <main+0x2c0>
 8000a0a:	69f9      	ldr	r1, [r7, #28]
 8000a0c:	6978      	ldr	r0, [r7, #20]
 8000a0e:	f7ff fbe3 	bl	80001d8 <strcmp>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d003      	beq.n	8000a20 <main+0x2c8>
 8000a18:	6979      	ldr	r1, [r7, #20]
 8000a1a:	69b8      	ldr	r0, [r7, #24]
 8000a1c:	f7ff fe72 	bl	8000704 <displayLCD>
					// copy over the buffer to the previous buffer
					strcpy(line_one, buf_one);
 8000a20:	69b9      	ldr	r1, [r7, #24]
 8000a22:	6a38      	ldr	r0, [r7, #32]
 8000a24:	f001 fc9f 	bl	8002366 <strcpy>
					strcpy(line_two, buf_two);
 8000a28:	6979      	ldr	r1, [r7, #20]
 8000a2a:	69f8      	ldr	r0, [r7, #28]
 8000a2c:	f001 fc9b 	bl	8002366 <strcpy>
 8000a30:	e0ef      	b.n	8000c12 <main+0x4ba>
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000
 8000a38:	48000800 	.word	0x48000800
 8000a3c:	00155555 	.word	0x00155555
 8000a40:	080028dc 	.word	0x080028dc
 8000a44:	080028e8 	.word	0x080028e8
 8000a48:	08002970 	.word	0x08002970
 8000a4c:	080028f8 	.word	0x080028f8
 8000a50:	08002900 	.word	0x08002900
 8000a54:	0800290c 	.word	0x0800290c
 8000a58:	0800291c 	.word	0x0800291c
				} else {
					strcpy(buf_one, "Current PIN: ");
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	4a78      	ldr	r2, [pc, #480]	; (8000c40 <main+0x4e8>)
 8000a60:	461c      	mov	r4, r3
 8000a62:	4613      	mov	r3, r2
 8000a64:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a66:	6020      	str	r0, [r4, #0]
 8000a68:	6061      	str	r1, [r4, #4]
 8000a6a:	60a2      	str	r2, [r4, #8]
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	81a3      	strh	r3, [r4, #12]
					strcpy(buf_two, enteredPin);
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	4619      	mov	r1, r3
 8000a76:	6978      	ldr	r0, [r7, #20]
 8000a78:	f001 fc75 	bl	8002366 <strcpy>
					if(strcmp(buf_one, line_one) != 0 || strcmp(buf_two, line_two) != 0) displayLCD(buf_one, buf_two);
 8000a7c:	6a39      	ldr	r1, [r7, #32]
 8000a7e:	69b8      	ldr	r0, [r7, #24]
 8000a80:	f7ff fbaa 	bl	80001d8 <strcmp>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d106      	bne.n	8000a98 <main+0x340>
 8000a8a:	69f9      	ldr	r1, [r7, #28]
 8000a8c:	6978      	ldr	r0, [r7, #20]
 8000a8e:	f7ff fba3 	bl	80001d8 <strcmp>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d003      	beq.n	8000aa0 <main+0x348>
 8000a98:	6979      	ldr	r1, [r7, #20]
 8000a9a:	69b8      	ldr	r0, [r7, #24]
 8000a9c:	f7ff fe32 	bl	8000704 <displayLCD>
					// copy over the buffer to the previous buffer
					strcpy(line_one, buf_one);
 8000aa0:	69b9      	ldr	r1, [r7, #24]
 8000aa2:	6a38      	ldr	r0, [r7, #32]
 8000aa4:	f001 fc5f 	bl	8002366 <strcpy>
					strcpy(line_two, buf_two);
 8000aa8:	6979      	ldr	r1, [r7, #20]
 8000aaa:	69f8      	ldr	r0, [r7, #28]
 8000aac:	f001 fc5b 	bl	8002366 <strcpy>
				}
			}
				break;
 8000ab0:	e0af      	b.n	8000c12 <main+0x4ba>

			case INCORRECT_PIN:
				strcpy(buf_one, "Locked");
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	4a63      	ldr	r2, [pc, #396]	; (8000c44 <main+0x4ec>)
 8000ab6:	6810      	ldr	r0, [r2, #0]
 8000ab8:	6018      	str	r0, [r3, #0]
 8000aba:	8891      	ldrh	r1, [r2, #4]
 8000abc:	7992      	ldrb	r2, [r2, #6]
 8000abe:	8099      	strh	r1, [r3, #4]
 8000ac0:	719a      	strb	r2, [r3, #6]
				strcpy(buf_two, "Incorrect PIN");
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	4a60      	ldr	r2, [pc, #384]	; (8000c48 <main+0x4f0>)
 8000ac6:	461c      	mov	r4, r3
 8000ac8:	4613      	mov	r3, r2
 8000aca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000acc:	6020      	str	r0, [r4, #0]
 8000ace:	6061      	str	r1, [r4, #4]
 8000ad0:	60a2      	str	r2, [r4, #8]
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	81a3      	strh	r3, [r4, #12]
				if(strcmp(buf_one, line_one) != 0 || strcmp(buf_two, line_two) != 0) displayLCD(buf_one, buf_two);
 8000ad6:	6a39      	ldr	r1, [r7, #32]
 8000ad8:	69b8      	ldr	r0, [r7, #24]
 8000ada:	f7ff fb7d 	bl	80001d8 <strcmp>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d106      	bne.n	8000af2 <main+0x39a>
 8000ae4:	69f9      	ldr	r1, [r7, #28]
 8000ae6:	6978      	ldr	r0, [r7, #20]
 8000ae8:	f7ff fb76 	bl	80001d8 <strcmp>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <main+0x3a2>
 8000af2:	6979      	ldr	r1, [r7, #20]
 8000af4:	69b8      	ldr	r0, [r7, #24]
 8000af6:	f7ff fe05 	bl	8000704 <displayLCD>
				// copy over the buffer to the previous buffer
				strcpy(line_one, buf_one);
 8000afa:	69b9      	ldr	r1, [r7, #24]
 8000afc:	6a38      	ldr	r0, [r7, #32]
 8000afe:	f001 fc32 	bl	8002366 <strcpy>
				strcpy(line_two, buf_two);
 8000b02:	6979      	ldr	r1, [r7, #20]
 8000b04:	69f8      	ldr	r0, [r7, #28]
 8000b06:	f001 fc2e 	bl	8002366 <strcpy>
				setLEDState(1); // LED ON
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f7ff fde2 	bl	80006d4 <setLEDState>
				currentState = CLEAR_PIN;
 8000b10:	2302      	movs	r3, #2
 8000b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8000b16:	e07c      	b.n	8000c12 <main+0x4ba>

			case UNLOCK:
				strcpy(buf_one, "Unlocked");
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	494c      	ldr	r1, [pc, #304]	; (8000c4c <main+0x4f4>)
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	460b      	mov	r3, r1
 8000b20:	cb03      	ldmia	r3!, {r0, r1}
 8000b22:	6010      	str	r0, [r2, #0]
 8000b24:	6051      	str	r1, [r2, #4]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	7213      	strb	r3, [r2, #8]
				strcpy(buf_two, "* to Lock");
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	4948      	ldr	r1, [pc, #288]	; (8000c50 <main+0x4f8>)
 8000b2e:	461a      	mov	r2, r3
 8000b30:	460b      	mov	r3, r1
 8000b32:	cb03      	ldmia	r3!, {r0, r1}
 8000b34:	6010      	str	r0, [r2, #0]
 8000b36:	6051      	str	r1, [r2, #4]
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	8113      	strh	r3, [r2, #8]

				if(strcmp(buf_one, line_one) != 0 || strcmp(buf_two, line_two) != 0) displayLCD(buf_one, buf_two);
 8000b3c:	6a39      	ldr	r1, [r7, #32]
 8000b3e:	69b8      	ldr	r0, [r7, #24]
 8000b40:	f7ff fb4a 	bl	80001d8 <strcmp>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d106      	bne.n	8000b58 <main+0x400>
 8000b4a:	69f9      	ldr	r1, [r7, #28]
 8000b4c:	6978      	ldr	r0, [r7, #20]
 8000b4e:	f7ff fb43 	bl	80001d8 <strcmp>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <main+0x408>
 8000b58:	6979      	ldr	r1, [r7, #20]
 8000b5a:	69b8      	ldr	r0, [r7, #24]
 8000b5c:	f7ff fdd2 	bl	8000704 <displayLCD>
				// copy over the buffer to the previous buffer
				strcpy(line_one, buf_one);
 8000b60:	69b9      	ldr	r1, [r7, #24]
 8000b62:	6a38      	ldr	r0, [r7, #32]
 8000b64:	f001 fbff 	bl	8002366 <strcpy>
				strcpy(line_two, buf_two);
 8000b68:	6979      	ldr	r1, [r7, #20]
 8000b6a:	69f8      	ldr	r0, [r7, #28]
 8000b6c:	f001 fbfb 	bl	8002366 <strcpy>
				setLEDState(0); // LED OFF
 8000b70:	2000      	movs	r0, #0
 8000b72:	f7ff fdaf 	bl	80006d4 <setLEDState>
				printf("Access Granted!\n");
 8000b76:	4837      	ldr	r0, [pc, #220]	; (8000c54 <main+0x4fc>)
 8000b78:	f001 fba8 	bl	80022cc <puts>
				currentState = CHANGE_PIN;
 8000b7c:	2306      	movs	r3, #6
 8000b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8000b82:	e046      	b.n	8000c12 <main+0x4ba>

			case CHANGE_PIN:
				strcpy(buf_one, "* to Lock");
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	4932      	ldr	r1, [pc, #200]	; (8000c50 <main+0x4f8>)
 8000b88:	461a      	mov	r2, r3
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	cb03      	ldmia	r3!, {r0, r1}
 8000b8e:	6010      	str	r0, [r2, #0]
 8000b90:	6051      	str	r1, [r2, #4]
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	8113      	strh	r3, [r2, #8]
				strcpy(buf_two, "# to Change");
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	4a2f      	ldr	r2, [pc, #188]	; (8000c58 <main+0x500>)
 8000b9a:	461c      	mov	r4, r3
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000ba0:	6020      	str	r0, [r4, #0]
 8000ba2:	6061      	str	r1, [r4, #4]
 8000ba4:	60a2      	str	r2, [r4, #8]
				if(strcmp(buf_one, line_one) != 0 || strcmp(buf_two, line_two) != 0) displayLCD(buf_one, buf_two);
 8000ba6:	6a39      	ldr	r1, [r7, #32]
 8000ba8:	69b8      	ldr	r0, [r7, #24]
 8000baa:	f7ff fb15 	bl	80001d8 <strcmp>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d106      	bne.n	8000bc2 <main+0x46a>
 8000bb4:	69f9      	ldr	r1, [r7, #28]
 8000bb6:	6978      	ldr	r0, [r7, #20]
 8000bb8:	f7ff fb0e 	bl	80001d8 <strcmp>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <main+0x472>
 8000bc2:	6979      	ldr	r1, [r7, #20]
 8000bc4:	69b8      	ldr	r0, [r7, #24]
 8000bc6:	f7ff fd9d 	bl	8000704 <displayLCD>
				// copy over the buffer to the previous buffer
				strcpy(line_one, buf_one);
 8000bca:	69b9      	ldr	r1, [r7, #24]
 8000bcc:	6a38      	ldr	r0, [r7, #32]
 8000bce:	f001 fbca 	bl	8002366 <strcpy>
				strcpy(line_two, buf_two);
 8000bd2:	6979      	ldr	r1, [r7, #20]
 8000bd4:	69f8      	ldr	r0, [r7, #28]
 8000bd6:	f001 fbc6 	bl	8002366 <strcpy>
				// Reset the entered pin to ""
				char enteredChar = readChar();
 8000bda:	f7ff fc45 	bl	8000468 <readChar>
 8000bde:	4603      	mov	r3, r0
 8000be0:	74fb      	strb	r3, [r7, #19]
				// read the next input for the next state
				if (enteredChar == '#') {
 8000be2:	7cfb      	ldrb	r3, [r7, #19]
 8000be4:	2b23      	cmp	r3, #35	; 0x23
 8000be6:	d105      	bne.n	8000bf4 <main+0x49c>
					// reset the correct pin to ""
					correctPin[0] = '\0';
 8000be8:	2300      	movs	r3, #0
 8000bea:	713b      	strb	r3, [r7, #4]
					currentState = CLEAR_PIN;
 8000bec:	2302      	movs	r3, #2
 8000bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000bf2:	e00e      	b.n	8000c12 <main+0x4ba>
				}
				else if (enteredChar == '*') {
 8000bf4:	7cfb      	ldrb	r3, [r7, #19]
 8000bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8000bf8:	d106      	bne.n	8000c08 <main+0x4b0>
					currentState = CLEAR_PIN;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					setLEDState(1);
 8000c00:	2001      	movs	r0, #1
 8000c02:	f7ff fd67 	bl	80006d4 <setLEDState>
 8000c06:	e004      	b.n	8000c12 <main+0x4ba>
				}
				else currentState = CHANGE_PIN;
 8000c08:	2306      	movs	r3, #6
 8000c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


				// Placeholder for pin change functionality
				break;
 8000c0e:	e000      	b.n	8000c12 <main+0x4ba>

			default:
				break;
 8000c10:	bf00      	nop
	while (currentState != END) {
 8000c12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c16:	2b07      	cmp	r3, #7
 8000c18:	f47f ae04 	bne.w	8000824 <main+0xcc>
		}
	}
	free(buf_one);
 8000c1c:	69b8      	ldr	r0, [r7, #24]
 8000c1e:	f001 f98b 	bl	8001f38 <free>
	free(buf_two);
 8000c22:	6978      	ldr	r0, [r7, #20]
 8000c24:	f001 f988 	bl	8001f38 <free>
	free(line_one);
 8000c28:	6a38      	ldr	r0, [r7, #32]
 8000c2a:	f001 f985 	bl	8001f38 <free>
	free(line_two);
 8000c2e:	69f8      	ldr	r0, [r7, #28]
 8000c30:	f001 f982 	bl	8001f38 <free>
	return 0;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	372c      	adds	r7, #44	; 0x2c
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd90      	pop	{r4, r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	0800291c 	.word	0x0800291c
 8000c44:	080028f8 	.word	0x080028f8
 8000c48:	0800292c 	.word	0x0800292c
 8000c4c:	0800293c 	.word	0x0800293c
 8000c50:	08002948 	.word	0x08002948
 8000c54:	08002954 	.word	0x08002954
 8000c58:	08002964 	.word	0x08002964

08000c5c <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b096      	sub	sp, #88	; 0x58
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	2244      	movs	r2, #68	; 0x44
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 fb36 	bl	80022dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	463b      	mov	r3, r7
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c82:	f000 fb33 	bl	80012ec <HAL_PWREx_ControlVoltageScaling>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c8c:	f000 f837 	bl	8000cfe <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c90:	2302      	movs	r3, #2
 8000c92:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c98:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c9a:	2310      	movs	r3, #16
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000caa:	230a      	movs	r3, #10
 8000cac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cae:	2307      	movs	r3, #7
 8000cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fb6a 	bl	8001398 <HAL_RCC_OscConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000cca:	f000 f818 	bl	8000cfe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cce:	230f      	movs	r3, #15
 8000cd0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	2104      	movs	r1, #4
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 ff32 	bl	8001b50 <HAL_RCC_ClockConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cf2:	f000 f804 	bl	8000cfe <Error_Handler>
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	3758      	adds	r7, #88	; 0x58
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d02:	b672      	cpsid	i
}
 8000d04:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <Error_Handler+0x8>

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_MspInit+0x44>)
 8000d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d12:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_MspInit+0x44>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6613      	str	r3, [r2, #96]	; 0x60
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_MspInit+0x44>)
 8000d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_MspInit+0x44>)
 8000d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <HAL_MspInit+0x44>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d30:	6593      	str	r3, [r2, #88]	; 0x58
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_MspInit+0x44>)
 8000d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40021000 	.word	0x40021000

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d54:	e7fe      	b.n	8000d54 <NMI_Handler+0x4>

08000d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <MemManage_Handler+0x4>

08000d62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9c:	f000 f93e 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	e00a      	b.n	8000dcc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000db6:	f3af 8000 	nop.w
 8000dba:	4601      	mov	r1, r0
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	1c5a      	adds	r2, r3, #1
 8000dc0:	60ba      	str	r2, [r7, #8]
 8000dc2:	b2ca      	uxtb	r2, r1
 8000dc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	dbf0      	blt.n	8000db6 <_read+0x12>
  }

  return len;
 8000dd4:	687b      	ldr	r3, [r7, #4]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	60f8      	str	r0, [r7, #12]
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	e009      	b.n	8000e04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	1c5a      	adds	r2, r3, #1
 8000df4:	60ba      	str	r2, [r7, #8]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	3301      	adds	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	dbf1      	blt.n	8000df0 <_write+0x12>
  }
  return len;
 8000e0c:	687b      	ldr	r3, [r7, #4]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <_close>:

int _close(int file)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e3e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <_isatty>:

int _isatty(int file)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e56:	2301      	movs	r3, #1
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e88:	4a14      	ldr	r2, [pc, #80]	; (8000edc <_sbrk+0x5c>)
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <_sbrk+0x60>)
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d102      	bne.n	8000ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <_sbrk+0x64>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <_sbrk+0x68>)
 8000ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d207      	bcs.n	8000ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb0:	f001 fa2c 	bl	800230c <__errno>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ebe:	e009      	b.n	8000ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <_sbrk+0x64>)
 8000ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20018000 	.word	0x20018000
 8000ee0:	00000400 	.word	0x00000400
 8000ee4:	20000094 	.word	0x20000094
 8000ee8:	200001e8 	.word	0x200001e8

08000eec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <SystemInit+0x20>)
 8000ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef6:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <SystemInit+0x20>)
 8000ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f14:	f7ff ffea 	bl	8000eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f1a:	490d      	ldr	r1, [pc, #52]	; (8000f50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <LoopForever+0xe>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f30:	4c0a      	ldr	r4, [pc, #40]	; (8000f5c <LoopForever+0x16>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f001 f9eb 	bl	8002318 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f42:	f7ff fc09 	bl	8000758 <main>

08000f46 <LoopForever>:

LoopForever:
    b LoopForever
 8000f46:	e7fe      	b.n	8000f46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f48:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f50:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f54:	080029c0 	.word	0x080029c0
  ldr r2, =_sbss
 8000f58:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f5c:	200001e8 	.word	0x200001e8

08000f60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC1_2_IRQHandler>
	...

08000f64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <HAL_Init+0x3c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <HAL_Init+0x3c>)
 8000f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7a:	2003      	movs	r0, #3
 8000f7c:	f000 f944 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f80:	2000      	movs	r0, #0
 8000f82:	f000 f80f 	bl	8000fa4 <HAL_InitTick>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d002      	beq.n	8000f92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	e001      	b.n	8000f96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f92:	f7ff feb9 	bl	8000d08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f96:	79fb      	ldrb	r3, [r7, #7]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40022000 	.word	0x40022000

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_InitTick+0x6c>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d023      	beq.n	8001000 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_InitTick+0x70>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <HAL_InitTick+0x6c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f941 	bl	8001256 <HAL_SYSTICK_Config>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10f      	bne.n	8000ffa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d809      	bhi.n	8000ff4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fe8:	f000 f919 	bl	800121e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fec:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <HAL_InitTick+0x74>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	e007      	b.n	8001004 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e004      	b.n	8001004 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
 8000ffe:	e001      	b.n	8001004 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000018 	.word	0x20000018
 8001014:	20000010 	.word	0x20000010
 8001018:	20000014 	.word	0x20000014

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000018 	.word	0x20000018
 8001040:	20000098 	.word	0x20000098

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000098 	.word	0x20000098

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff ffee 	bl	8001044 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffde 	bl	8001044 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000018 	.word	0x20000018

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011e8:	f7ff ff8e 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff47 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff5c 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff8e 	bl	800115c <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5d 	bl	8001108 <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffb0 	bl	80011c4 <SysTick_Config>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800126e:	b480      	push	{r7}
 8001270:	b085      	sub	sp, #20
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691a      	ldr	r2, [r3, #16]
 800127e:	887b      	ldrh	r3, [r7, #2]
 8001280:	4013      	ands	r3, r2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001286:	2301      	movs	r3, #1
 8001288:	73fb      	strb	r3, [r7, #15]
 800128a:	e001      	b.n	8001290 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	460b      	mov	r3, r1
 80012a8:	807b      	strh	r3, [r7, #2]
 80012aa:	4613      	mov	r3, r2
 80012ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ae:	787b      	ldrb	r3, [r7, #1]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012b4:	887a      	ldrh	r2, [r7, #2]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012ba:	e002      	b.n	80012c2 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012bc:	887a      	ldrh	r2, [r7, #2]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40007000 	.word	0x40007000

080012ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012fa:	d130      	bne.n	800135e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012fc:	4b23      	ldr	r3, [pc, #140]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001308:	d038      	beq.n	800137c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001312:	4a1e      	ldr	r2, [pc, #120]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001314:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001318:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2232      	movs	r2, #50	; 0x32
 8001320:	fb02 f303 	mul.w	r3, r2, r3
 8001324:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	0c9b      	lsrs	r3, r3, #18
 800132c:	3301      	adds	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001330:	e002      	b.n	8001338 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	3b01      	subs	r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001344:	d102      	bne.n	800134c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1f2      	bne.n	8001332 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001358:	d110      	bne.n	800137c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e00f      	b.n	800137e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800136a:	d007      	beq.n	800137c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800136c:	4b07      	ldr	r3, [pc, #28]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001374:	4a05      	ldr	r2, [pc, #20]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001376:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800137a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40007000 	.word	0x40007000
 8001390:	20000010 	.word	0x20000010
 8001394:	431bde83 	.word	0x431bde83

08001398 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e3ca      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013aa:	4b97      	ldr	r3, [pc, #604]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013b4:	4b94      	ldr	r3, [pc, #592]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0310 	and.w	r3, r3, #16
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 80e4 	beq.w	8001594 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d007      	beq.n	80013e2 <HAL_RCC_OscConfig+0x4a>
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	2b0c      	cmp	r3, #12
 80013d6:	f040 808b 	bne.w	80014f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	f040 8087 	bne.w	80014f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013e2:	4b89      	ldr	r3, [pc, #548]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <HAL_RCC_OscConfig+0x62>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e3a2      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a1a      	ldr	r2, [r3, #32]
 80013fe:	4b82      	ldr	r3, [pc, #520]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	2b00      	cmp	r3, #0
 8001408:	d004      	beq.n	8001414 <HAL_RCC_OscConfig+0x7c>
 800140a:	4b7f      	ldr	r3, [pc, #508]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001412:	e005      	b.n	8001420 <HAL_RCC_OscConfig+0x88>
 8001414:	4b7c      	ldr	r3, [pc, #496]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800141a:	091b      	lsrs	r3, r3, #4
 800141c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001420:	4293      	cmp	r3, r2
 8001422:	d223      	bcs.n	800146c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	4618      	mov	r0, r3
 800142a:	f000 fd1d 	bl	8001e68 <RCC_SetFlashLatencyFromMSIRange>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e383      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001438:	4b73      	ldr	r3, [pc, #460]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a72      	ldr	r2, [pc, #456]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 800143e:	f043 0308 	orr.w	r3, r3, #8
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	4b70      	ldr	r3, [pc, #448]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	496d      	ldr	r1, [pc, #436]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001452:	4313      	orrs	r3, r2
 8001454:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001456:	4b6c      	ldr	r3, [pc, #432]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	4968      	ldr	r1, [pc, #416]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001466:	4313      	orrs	r3, r2
 8001468:	604b      	str	r3, [r1, #4]
 800146a:	e025      	b.n	80014b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800146c:	4b66      	ldr	r3, [pc, #408]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a65      	ldr	r2, [pc, #404]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001472:	f043 0308 	orr.w	r3, r3, #8
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4b63      	ldr	r3, [pc, #396]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	4960      	ldr	r1, [pc, #384]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001486:	4313      	orrs	r3, r2
 8001488:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800148a:	4b5f      	ldr	r3, [pc, #380]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	495b      	ldr	r1, [pc, #364]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 800149a:	4313      	orrs	r3, r2
 800149c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d109      	bne.n	80014b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 fcdd 	bl	8001e68 <RCC_SetFlashLatencyFromMSIRange>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e343      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014b8:	f000 fc4a 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 80014bc:	4602      	mov	r2, r0
 80014be:	4b52      	ldr	r3, [pc, #328]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	091b      	lsrs	r3, r3, #4
 80014c4:	f003 030f 	and.w	r3, r3, #15
 80014c8:	4950      	ldr	r1, [pc, #320]	; (800160c <HAL_RCC_OscConfig+0x274>)
 80014ca:	5ccb      	ldrb	r3, [r1, r3]
 80014cc:	f003 031f 	and.w	r3, r3, #31
 80014d0:	fa22 f303 	lsr.w	r3, r2, r3
 80014d4:	4a4e      	ldr	r2, [pc, #312]	; (8001610 <HAL_RCC_OscConfig+0x278>)
 80014d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014d8:	4b4e      	ldr	r3, [pc, #312]	; (8001614 <HAL_RCC_OscConfig+0x27c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fd61 	bl	8000fa4 <HAL_InitTick>
 80014e2:	4603      	mov	r3, r0
 80014e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d052      	beq.n	8001592 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	e327      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d032      	beq.n	800155e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014f8:	4b43      	ldr	r3, [pc, #268]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a42      	ldr	r2, [pc, #264]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001504:	f7ff fd9e 	bl	8001044 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800150c:	f7ff fd9a 	bl	8001044 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e310      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800151e:	4b3a      	ldr	r3, [pc, #232]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800152a:	4b37      	ldr	r3, [pc, #220]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a36      	ldr	r2, [pc, #216]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b34      	ldr	r3, [pc, #208]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4931      	ldr	r1, [pc, #196]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001544:	4313      	orrs	r3, r2
 8001546:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001548:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	492c      	ldr	r1, [pc, #176]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001558:	4313      	orrs	r3, r2
 800155a:	604b      	str	r3, [r1, #4]
 800155c:	e01a      	b.n	8001594 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800155e:	4b2a      	ldr	r3, [pc, #168]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a29      	ldr	r2, [pc, #164]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001564:	f023 0301 	bic.w	r3, r3, #1
 8001568:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800156a:	f7ff fd6b 	bl	8001044 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001572:	f7ff fd67 	bl	8001044 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e2dd      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f0      	bne.n	8001572 <HAL_RCC_OscConfig+0x1da>
 8001590:	e000      	b.n	8001594 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001592:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b00      	cmp	r3, #0
 800159e:	d074      	beq.n	800168a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d005      	beq.n	80015b2 <HAL_RCC_OscConfig+0x21a>
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	2b0c      	cmp	r3, #12
 80015aa:	d10e      	bne.n	80015ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d10b      	bne.n	80015ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d064      	beq.n	8001688 <HAL_RCC_OscConfig+0x2f0>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d160      	bne.n	8001688 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e2ba      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d2:	d106      	bne.n	80015e2 <HAL_RCC_OscConfig+0x24a>
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80015da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	e026      	b.n	8001630 <HAL_RCC_OscConfig+0x298>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015ea:	d115      	bne.n	8001618 <HAL_RCC_OscConfig+0x280>
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a05      	ldr	r2, [pc, #20]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80015f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a02      	ldr	r2, [pc, #8]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80015fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	e014      	b.n	8001630 <HAL_RCC_OscConfig+0x298>
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000
 800160c:	08002978 	.word	0x08002978
 8001610:	20000010 	.word	0x20000010
 8001614:	20000014 	.word	0x20000014
 8001618:	4ba0      	ldr	r3, [pc, #640]	; (800189c <HAL_RCC_OscConfig+0x504>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a9f      	ldr	r2, [pc, #636]	; (800189c <HAL_RCC_OscConfig+0x504>)
 800161e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4b9d      	ldr	r3, [pc, #628]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a9c      	ldr	r2, [pc, #624]	; (800189c <HAL_RCC_OscConfig+0x504>)
 800162a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d013      	beq.n	8001660 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001638:	f7ff fd04 	bl	8001044 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001640:	f7ff fd00 	bl	8001044 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b64      	cmp	r3, #100	; 0x64
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e276      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001652:	4b92      	ldr	r3, [pc, #584]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x2a8>
 800165e:	e014      	b.n	800168a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001660:	f7ff fcf0 	bl	8001044 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001668:	f7ff fcec 	bl	8001044 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b64      	cmp	r3, #100	; 0x64
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e262      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800167a:	4b88      	ldr	r3, [pc, #544]	; (800189c <HAL_RCC_OscConfig+0x504>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x2d0>
 8001686:	e000      	b.n	800168a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d060      	beq.n	8001758 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	2b04      	cmp	r3, #4
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_OscConfig+0x310>
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2b0c      	cmp	r3, #12
 80016a0:	d119      	bne.n	80016d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d116      	bne.n	80016d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a8:	4b7c      	ldr	r3, [pc, #496]	; (800189c <HAL_RCC_OscConfig+0x504>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_OscConfig+0x328>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e23f      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c0:	4b76      	ldr	r3, [pc, #472]	; (800189c <HAL_RCC_OscConfig+0x504>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	061b      	lsls	r3, r3, #24
 80016ce:	4973      	ldr	r1, [pc, #460]	; (800189c <HAL_RCC_OscConfig+0x504>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d4:	e040      	b.n	8001758 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d023      	beq.n	8001726 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016de:	4b6f      	ldr	r3, [pc, #444]	; (800189c <HAL_RCC_OscConfig+0x504>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a6e      	ldr	r2, [pc, #440]	; (800189c <HAL_RCC_OscConfig+0x504>)
 80016e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ea:	f7ff fcab 	bl	8001044 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f2:	f7ff fca7 	bl	8001044 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e21d      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001704:	4b65      	ldr	r3, [pc, #404]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001710:	4b62      	ldr	r3, [pc, #392]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	061b      	lsls	r3, r3, #24
 800171e:	495f      	ldr	r1, [pc, #380]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
 8001724:	e018      	b.n	8001758 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001726:	4b5d      	ldr	r3, [pc, #372]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a5c      	ldr	r2, [pc, #368]	; (800189c <HAL_RCC_OscConfig+0x504>)
 800172c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001732:	f7ff fc87 	bl	8001044 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800173a:	f7ff fc83 	bl	8001044 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e1f9      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800174c:	4b53      	ldr	r3, [pc, #332]	; (800189c <HAL_RCC_OscConfig+0x504>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f0      	bne.n	800173a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d03c      	beq.n	80017de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d01c      	beq.n	80017a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800176c:	4b4b      	ldr	r3, [pc, #300]	; (800189c <HAL_RCC_OscConfig+0x504>)
 800176e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001772:	4a4a      	ldr	r2, [pc, #296]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177c:	f7ff fc62 	bl	8001044 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001784:	f7ff fc5e 	bl	8001044 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e1d4      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001796:	4b41      	ldr	r3, [pc, #260]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0ef      	beq.n	8001784 <HAL_RCC_OscConfig+0x3ec>
 80017a4:	e01b      	b.n	80017de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a6:	4b3d      	ldr	r3, [pc, #244]	; (800189c <HAL_RCC_OscConfig+0x504>)
 80017a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ac:	4a3b      	ldr	r2, [pc, #236]	; (800189c <HAL_RCC_OscConfig+0x504>)
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b6:	f7ff fc45 	bl	8001044 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017be:	f7ff fc41 	bl	8001044 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e1b7      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d0:	4b32      	ldr	r3, [pc, #200]	; (800189c <HAL_RCC_OscConfig+0x504>)
 80017d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1ef      	bne.n	80017be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 80a6 	beq.w	8001938 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ec:	2300      	movs	r3, #0
 80017ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017f0:	4b2a      	ldr	r3, [pc, #168]	; (800189c <HAL_RCC_OscConfig+0x504>)
 80017f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d10d      	bne.n	8001818 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <HAL_RCC_OscConfig+0x504>)
 80017fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001800:	4a26      	ldr	r2, [pc, #152]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001806:	6593      	str	r3, [r2, #88]	; 0x58
 8001808:	4b24      	ldr	r3, [pc, #144]	; (800189c <HAL_RCC_OscConfig+0x504>)
 800180a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001814:	2301      	movs	r3, #1
 8001816:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001818:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <HAL_RCC_OscConfig+0x508>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001820:	2b00      	cmp	r3, #0
 8001822:	d118      	bne.n	8001856 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001824:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <HAL_RCC_OscConfig+0x508>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a1d      	ldr	r2, [pc, #116]	; (80018a0 <HAL_RCC_OscConfig+0x508>)
 800182a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001830:	f7ff fc08 	bl	8001044 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001838:	f7ff fc04 	bl	8001044 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e17a      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <HAL_RCC_OscConfig+0x508>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d108      	bne.n	8001870 <HAL_RCC_OscConfig+0x4d8>
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800186e:	e029      	b.n	80018c4 <HAL_RCC_OscConfig+0x52c>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b05      	cmp	r3, #5
 8001876:	d115      	bne.n	80018a4 <HAL_RCC_OscConfig+0x50c>
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_RCC_OscConfig+0x504>)
 800187a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800187e:	4a07      	ldr	r2, [pc, #28]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <HAL_RCC_OscConfig+0x504>)
 800188a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188e:	4a03      	ldr	r2, [pc, #12]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001898:	e014      	b.n	80018c4 <HAL_RCC_OscConfig+0x52c>
 800189a:	bf00      	nop
 800189c:	40021000 	.word	0x40021000
 80018a0:	40007000 	.word	0x40007000
 80018a4:	4b9c      	ldr	r3, [pc, #624]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 80018a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018aa:	4a9b      	ldr	r2, [pc, #620]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 80018ac:	f023 0301 	bic.w	r3, r3, #1
 80018b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b4:	4b98      	ldr	r3, [pc, #608]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 80018b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ba:	4a97      	ldr	r2, [pc, #604]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 80018bc:	f023 0304 	bic.w	r3, r3, #4
 80018c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d016      	beq.n	80018fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018cc:	f7ff fbba 	bl	8001044 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018d2:	e00a      	b.n	80018ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d4:	f7ff fbb6 	bl	8001044 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e12a      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ea:	4b8b      	ldr	r3, [pc, #556]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 80018ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0ed      	beq.n	80018d4 <HAL_RCC_OscConfig+0x53c>
 80018f8:	e015      	b.n	8001926 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fa:	f7ff fba3 	bl	8001044 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001900:	e00a      	b.n	8001918 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001902:	f7ff fb9f 	bl	8001044 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001910:	4293      	cmp	r3, r2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e113      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001918:	4b7f      	ldr	r3, [pc, #508]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 800191a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1ed      	bne.n	8001902 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001926:	7ffb      	ldrb	r3, [r7, #31]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d105      	bne.n	8001938 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192c:	4b7a      	ldr	r3, [pc, #488]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	4a79      	ldr	r2, [pc, #484]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 8001932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001936:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 80fe 	beq.w	8001b3e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001946:	2b02      	cmp	r3, #2
 8001948:	f040 80d0 	bne.w	8001aec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800194c:	4b72      	ldr	r3, [pc, #456]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f003 0203 	and.w	r2, r3, #3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	429a      	cmp	r2, r3
 800195e:	d130      	bne.n	80019c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	3b01      	subs	r3, #1
 800196c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d127      	bne.n	80019c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800197c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d11f      	bne.n	80019c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800198c:	2a07      	cmp	r2, #7
 800198e:	bf14      	ite	ne
 8001990:	2201      	movne	r2, #1
 8001992:	2200      	moveq	r2, #0
 8001994:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001996:	4293      	cmp	r3, r2
 8001998:	d113      	bne.n	80019c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a4:	085b      	lsrs	r3, r3, #1
 80019a6:	3b01      	subs	r3, #1
 80019a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d109      	bne.n	80019c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	085b      	lsrs	r3, r3, #1
 80019ba:	3b01      	subs	r3, #1
 80019bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d06e      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	2b0c      	cmp	r3, #12
 80019c6:	d069      	beq.n	8001a9c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019c8:	4b53      	ldr	r3, [pc, #332]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d105      	bne.n	80019e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019d4:	4b50      	ldr	r3, [pc, #320]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0ad      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019e4:	4b4c      	ldr	r3, [pc, #304]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a4b      	ldr	r2, [pc, #300]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 80019ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019f0:	f7ff fb28 	bl	8001044 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f8:	f7ff fb24 	bl	8001044 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e09a      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a0a:	4b43      	ldr	r3, [pc, #268]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a16:	4b40      	ldr	r3, [pc, #256]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	4b40      	ldr	r3, [pc, #256]	; (8001b1c <HAL_RCC_OscConfig+0x784>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a26:	3a01      	subs	r2, #1
 8001a28:	0112      	lsls	r2, r2, #4
 8001a2a:	4311      	orrs	r1, r2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a30:	0212      	lsls	r2, r2, #8
 8001a32:	4311      	orrs	r1, r2
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a38:	0852      	lsrs	r2, r2, #1
 8001a3a:	3a01      	subs	r2, #1
 8001a3c:	0552      	lsls	r2, r2, #21
 8001a3e:	4311      	orrs	r1, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a44:	0852      	lsrs	r2, r2, #1
 8001a46:	3a01      	subs	r2, #1
 8001a48:	0652      	lsls	r2, r2, #25
 8001a4a:	4311      	orrs	r1, r2
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a50:	0912      	lsrs	r2, r2, #4
 8001a52:	0452      	lsls	r2, r2, #17
 8001a54:	430a      	orrs	r2, r1
 8001a56:	4930      	ldr	r1, [pc, #192]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a5c:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a2d      	ldr	r2, [pc, #180]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 8001a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a68:	4b2b      	ldr	r3, [pc, #172]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4a2a      	ldr	r2, [pc, #168]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 8001a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a74:	f7ff fae6 	bl	8001044 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7ff fae2 	bl	8001044 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e058      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8e:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a9a:	e050      	b.n	8001b3e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e04f      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa0:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d148      	bne.n	8001b3e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a19      	ldr	r2, [pc, #100]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 8001ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ab6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4a16      	ldr	r2, [pc, #88]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 8001abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ac2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ac4:	f7ff fabe 	bl	8001044 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001acc:	f7ff faba 	bl	8001044 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e030      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x734>
 8001aea:	e028      	b.n	8001b3e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	2b0c      	cmp	r3, #12
 8001af0:	d023      	beq.n	8001b3a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a08      	ldr	r2, [pc, #32]	; (8001b18 <HAL_RCC_OscConfig+0x780>)
 8001af8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afe:	f7ff faa1 	bl	8001044 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b04:	e00c      	b.n	8001b20 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b06:	f7ff fa9d 	bl	8001044 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d905      	bls.n	8001b20 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e013      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_RCC_OscConfig+0x7b0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1ec      	bne.n	8001b06 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_RCC_OscConfig+0x7b0>)
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	4905      	ldr	r1, [pc, #20]	; (8001b48 <HAL_RCC_OscConfig+0x7b0>)
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_RCC_OscConfig+0x7b4>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	60cb      	str	r3, [r1, #12]
 8001b38:	e001      	b.n	8001b3e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3720      	adds	r7, #32
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	feeefffc 	.word	0xfeeefffc

08001b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0e7      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b64:	4b75      	ldr	r3, [pc, #468]	; (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d910      	bls.n	8001b94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	4b72      	ldr	r3, [pc, #456]	; (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 0207 	bic.w	r2, r3, #7
 8001b7a:	4970      	ldr	r1, [pc, #448]	; (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	4b6e      	ldr	r3, [pc, #440]	; (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0cf      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d010      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	4b66      	ldr	r3, [pc, #408]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d908      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb0:	4b63      	ldr	r3, [pc, #396]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	4960      	ldr	r1, [pc, #384]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d04c      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d107      	bne.n	8001be6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd6:	4b5a      	ldr	r3, [pc, #360]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d121      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e0a6      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bee:	4b54      	ldr	r3, [pc, #336]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d115      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e09a      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c06:	4b4e      	ldr	r3, [pc, #312]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d109      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e08e      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c16:	4b4a      	ldr	r3, [pc, #296]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e086      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c26:	4b46      	ldr	r3, [pc, #280]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f023 0203 	bic.w	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4943      	ldr	r1, [pc, #268]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c38:	f7ff fa04 	bl	8001044 <HAL_GetTick>
 8001c3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3e:	e00a      	b.n	8001c56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c40:	f7ff fa00 	bl	8001044 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e06e      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c56:	4b3a      	ldr	r3, [pc, #232]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 020c 	and.w	r2, r3, #12
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d1eb      	bne.n	8001c40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d010      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	4b31      	ldr	r3, [pc, #196]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d208      	bcs.n	8001c96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c84:	4b2e      	ldr	r3, [pc, #184]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	492b      	ldr	r1, [pc, #172]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c96:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d210      	bcs.n	8001cc6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca4:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f023 0207 	bic.w	r2, r3, #7
 8001cac:	4923      	ldr	r1, [pc, #140]	; (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d001      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e036      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d008      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	4918      	ldr	r1, [pc, #96]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d009      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cf0:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4910      	ldr	r1, [pc, #64]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d04:	f000 f824 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	490b      	ldr	r1, [pc, #44]	; (8001d44 <HAL_RCC_ClockConfig+0x1f4>)
 8001d16:	5ccb      	ldrb	r3, [r1, r3]
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d20:	4a09      	ldr	r2, [pc, #36]	; (8001d48 <HAL_RCC_ClockConfig+0x1f8>)
 8001d22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_RCC_ClockConfig+0x1fc>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff f93b 	bl	8000fa4 <HAL_InitTick>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d32:	7afb      	ldrb	r3, [r7, #11]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40022000 	.word	0x40022000
 8001d40:	40021000 	.word	0x40021000
 8001d44:	08002978 	.word	0x08002978
 8001d48:	20000010 	.word	0x20000010
 8001d4c:	20000014 	.word	0x20000014

08001d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d5e:	4b3e      	ldr	r3, [pc, #248]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d68:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_GetSysClockFreq+0x34>
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	2b0c      	cmp	r3, #12
 8001d7c:	d121      	bne.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d11e      	bne.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d84:	4b34      	ldr	r3, [pc, #208]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d107      	bne.n	8001da0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d90:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d96:	0a1b      	lsrs	r3, r3, #8
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	e005      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001da0:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dac:	4a2b      	ldr	r2, [pc, #172]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10d      	bne.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d102      	bne.n	8001dce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dc8:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dca:	61bb      	str	r3, [r7, #24]
 8001dcc:	e004      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d101      	bne.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dd4:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	2b0c      	cmp	r3, #12
 8001ddc:	d134      	bne.n	8001e48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dde:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d003      	beq.n	8001df6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d003      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0xac>
 8001df4:	e005      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x110>)
 8001df8:	617b      	str	r3, [r7, #20]
      break;
 8001dfa:	e005      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dfe:	617b      	str	r3, [r7, #20]
      break;
 8001e00:	e002      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	617b      	str	r3, [r7, #20]
      break;
 8001e06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e08:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	091b      	lsrs	r3, r3, #4
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	3301      	adds	r3, #1
 8001e14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	0a1b      	lsrs	r3, r3, #8
 8001e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	fb03 f202 	mul.w	r2, r3, r2
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	0e5b      	lsrs	r3, r3, #25
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	3301      	adds	r3, #1
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e48:	69bb      	ldr	r3, [r7, #24]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3724      	adds	r7, #36	; 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	08002988 	.word	0x08002988
 8001e60:	00f42400 	.word	0x00f42400
 8001e64:	007a1200 	.word	0x007a1200

08001e68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e70:	2300      	movs	r3, #0
 8001e72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e74:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e80:	f7ff fa26 	bl	80012d0 <HAL_PWREx_GetVoltageRange>
 8001e84:	6178      	str	r0, [r7, #20]
 8001e86:	e014      	b.n	8001eb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e88:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8c:	4a24      	ldr	r2, [pc, #144]	; (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e92:	6593      	str	r3, [r2, #88]	; 0x58
 8001e94:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ea0:	f7ff fa16 	bl	80012d0 <HAL_PWREx_GetVoltageRange>
 8001ea4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ea6:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	4a1d      	ldr	r2, [pc, #116]	; (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eb8:	d10b      	bne.n	8001ed2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b80      	cmp	r3, #128	; 0x80
 8001ebe:	d919      	bls.n	8001ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2ba0      	cmp	r3, #160	; 0xa0
 8001ec4:	d902      	bls.n	8001ecc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	e013      	b.n	8001ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ecc:	2301      	movs	r3, #1
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	e010      	b.n	8001ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b80      	cmp	r3, #128	; 0x80
 8001ed6:	d902      	bls.n	8001ede <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ed8:	2303      	movs	r3, #3
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	e00a      	b.n	8001ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b80      	cmp	r3, #128	; 0x80
 8001ee2:	d102      	bne.n	8001eea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	e004      	b.n	8001ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b70      	cmp	r3, #112	; 0x70
 8001eee:	d101      	bne.n	8001ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 0207 	bic.w	r2, r3, #7
 8001efc:	4909      	ldr	r1, [pc, #36]	; (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d001      	beq.n	8001f16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40022000 	.word	0x40022000

08001f28 <malloc>:
 8001f28:	4b02      	ldr	r3, [pc, #8]	; (8001f34 <malloc+0xc>)
 8001f2a:	4601      	mov	r1, r0
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	f000 b82b 	b.w	8001f88 <_malloc_r>
 8001f32:	bf00      	nop
 8001f34:	20000074 	.word	0x20000074

08001f38 <free>:
 8001f38:	4b02      	ldr	r3, [pc, #8]	; (8001f44 <free+0xc>)
 8001f3a:	4601      	mov	r1, r0
 8001f3c:	6818      	ldr	r0, [r3, #0]
 8001f3e:	f000 ba1b 	b.w	8002378 <_free_r>
 8001f42:	bf00      	nop
 8001f44:	20000074 	.word	0x20000074

08001f48 <sbrk_aligned>:
 8001f48:	b570      	push	{r4, r5, r6, lr}
 8001f4a:	4e0e      	ldr	r6, [pc, #56]	; (8001f84 <sbrk_aligned+0x3c>)
 8001f4c:	460c      	mov	r4, r1
 8001f4e:	6831      	ldr	r1, [r6, #0]
 8001f50:	4605      	mov	r5, r0
 8001f52:	b911      	cbnz	r1, 8001f5a <sbrk_aligned+0x12>
 8001f54:	f000 f9ca 	bl	80022ec <_sbrk_r>
 8001f58:	6030      	str	r0, [r6, #0]
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	4628      	mov	r0, r5
 8001f5e:	f000 f9c5 	bl	80022ec <_sbrk_r>
 8001f62:	1c43      	adds	r3, r0, #1
 8001f64:	d00a      	beq.n	8001f7c <sbrk_aligned+0x34>
 8001f66:	1cc4      	adds	r4, r0, #3
 8001f68:	f024 0403 	bic.w	r4, r4, #3
 8001f6c:	42a0      	cmp	r0, r4
 8001f6e:	d007      	beq.n	8001f80 <sbrk_aligned+0x38>
 8001f70:	1a21      	subs	r1, r4, r0
 8001f72:	4628      	mov	r0, r5
 8001f74:	f000 f9ba 	bl	80022ec <_sbrk_r>
 8001f78:	3001      	adds	r0, #1
 8001f7a:	d101      	bne.n	8001f80 <sbrk_aligned+0x38>
 8001f7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001f80:	4620      	mov	r0, r4
 8001f82:	bd70      	pop	{r4, r5, r6, pc}
 8001f84:	200000a0 	.word	0x200000a0

08001f88 <_malloc_r>:
 8001f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f8c:	1ccd      	adds	r5, r1, #3
 8001f8e:	f025 0503 	bic.w	r5, r5, #3
 8001f92:	3508      	adds	r5, #8
 8001f94:	2d0c      	cmp	r5, #12
 8001f96:	bf38      	it	cc
 8001f98:	250c      	movcc	r5, #12
 8001f9a:	2d00      	cmp	r5, #0
 8001f9c:	4607      	mov	r7, r0
 8001f9e:	db01      	blt.n	8001fa4 <_malloc_r+0x1c>
 8001fa0:	42a9      	cmp	r1, r5
 8001fa2:	d905      	bls.n	8001fb0 <_malloc_r+0x28>
 8001fa4:	230c      	movs	r3, #12
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	2600      	movs	r6, #0
 8001faa:	4630      	mov	r0, r6
 8001fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fb0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002084 <_malloc_r+0xfc>
 8001fb4:	f000 f868 	bl	8002088 <__malloc_lock>
 8001fb8:	f8d8 3000 	ldr.w	r3, [r8]
 8001fbc:	461c      	mov	r4, r3
 8001fbe:	bb5c      	cbnz	r4, 8002018 <_malloc_r+0x90>
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	4638      	mov	r0, r7
 8001fc4:	f7ff ffc0 	bl	8001f48 <sbrk_aligned>
 8001fc8:	1c43      	adds	r3, r0, #1
 8001fca:	4604      	mov	r4, r0
 8001fcc:	d155      	bne.n	800207a <_malloc_r+0xf2>
 8001fce:	f8d8 4000 	ldr.w	r4, [r8]
 8001fd2:	4626      	mov	r6, r4
 8001fd4:	2e00      	cmp	r6, #0
 8001fd6:	d145      	bne.n	8002064 <_malloc_r+0xdc>
 8001fd8:	2c00      	cmp	r4, #0
 8001fda:	d048      	beq.n	800206e <_malloc_r+0xe6>
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	4631      	mov	r1, r6
 8001fe0:	4638      	mov	r0, r7
 8001fe2:	eb04 0903 	add.w	r9, r4, r3
 8001fe6:	f000 f981 	bl	80022ec <_sbrk_r>
 8001fea:	4581      	cmp	r9, r0
 8001fec:	d13f      	bne.n	800206e <_malloc_r+0xe6>
 8001fee:	6821      	ldr	r1, [r4, #0]
 8001ff0:	1a6d      	subs	r5, r5, r1
 8001ff2:	4629      	mov	r1, r5
 8001ff4:	4638      	mov	r0, r7
 8001ff6:	f7ff ffa7 	bl	8001f48 <sbrk_aligned>
 8001ffa:	3001      	adds	r0, #1
 8001ffc:	d037      	beq.n	800206e <_malloc_r+0xe6>
 8001ffe:	6823      	ldr	r3, [r4, #0]
 8002000:	442b      	add	r3, r5
 8002002:	6023      	str	r3, [r4, #0]
 8002004:	f8d8 3000 	ldr.w	r3, [r8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d038      	beq.n	800207e <_malloc_r+0xf6>
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	42a2      	cmp	r2, r4
 8002010:	d12b      	bne.n	800206a <_malloc_r+0xe2>
 8002012:	2200      	movs	r2, #0
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	e00f      	b.n	8002038 <_malloc_r+0xb0>
 8002018:	6822      	ldr	r2, [r4, #0]
 800201a:	1b52      	subs	r2, r2, r5
 800201c:	d41f      	bmi.n	800205e <_malloc_r+0xd6>
 800201e:	2a0b      	cmp	r2, #11
 8002020:	d917      	bls.n	8002052 <_malloc_r+0xca>
 8002022:	1961      	adds	r1, r4, r5
 8002024:	42a3      	cmp	r3, r4
 8002026:	6025      	str	r5, [r4, #0]
 8002028:	bf18      	it	ne
 800202a:	6059      	strne	r1, [r3, #4]
 800202c:	6863      	ldr	r3, [r4, #4]
 800202e:	bf08      	it	eq
 8002030:	f8c8 1000 	streq.w	r1, [r8]
 8002034:	5162      	str	r2, [r4, r5]
 8002036:	604b      	str	r3, [r1, #4]
 8002038:	4638      	mov	r0, r7
 800203a:	f104 060b 	add.w	r6, r4, #11
 800203e:	f000 f829 	bl	8002094 <__malloc_unlock>
 8002042:	f026 0607 	bic.w	r6, r6, #7
 8002046:	1d23      	adds	r3, r4, #4
 8002048:	1af2      	subs	r2, r6, r3
 800204a:	d0ae      	beq.n	8001faa <_malloc_r+0x22>
 800204c:	1b9b      	subs	r3, r3, r6
 800204e:	50a3      	str	r3, [r4, r2]
 8002050:	e7ab      	b.n	8001faa <_malloc_r+0x22>
 8002052:	42a3      	cmp	r3, r4
 8002054:	6862      	ldr	r2, [r4, #4]
 8002056:	d1dd      	bne.n	8002014 <_malloc_r+0x8c>
 8002058:	f8c8 2000 	str.w	r2, [r8]
 800205c:	e7ec      	b.n	8002038 <_malloc_r+0xb0>
 800205e:	4623      	mov	r3, r4
 8002060:	6864      	ldr	r4, [r4, #4]
 8002062:	e7ac      	b.n	8001fbe <_malloc_r+0x36>
 8002064:	4634      	mov	r4, r6
 8002066:	6876      	ldr	r6, [r6, #4]
 8002068:	e7b4      	b.n	8001fd4 <_malloc_r+0x4c>
 800206a:	4613      	mov	r3, r2
 800206c:	e7cc      	b.n	8002008 <_malloc_r+0x80>
 800206e:	230c      	movs	r3, #12
 8002070:	603b      	str	r3, [r7, #0]
 8002072:	4638      	mov	r0, r7
 8002074:	f000 f80e 	bl	8002094 <__malloc_unlock>
 8002078:	e797      	b.n	8001faa <_malloc_r+0x22>
 800207a:	6025      	str	r5, [r4, #0]
 800207c:	e7dc      	b.n	8002038 <_malloc_r+0xb0>
 800207e:	605b      	str	r3, [r3, #4]
 8002080:	deff      	udf	#255	; 0xff
 8002082:	bf00      	nop
 8002084:	2000009c 	.word	0x2000009c

08002088 <__malloc_lock>:
 8002088:	4801      	ldr	r0, [pc, #4]	; (8002090 <__malloc_lock+0x8>)
 800208a:	f000 b96a 	b.w	8002362 <__retarget_lock_acquire_recursive>
 800208e:	bf00      	nop
 8002090:	200001e0 	.word	0x200001e0

08002094 <__malloc_unlock>:
 8002094:	4801      	ldr	r0, [pc, #4]	; (800209c <__malloc_unlock+0x8>)
 8002096:	f000 b965 	b.w	8002364 <__retarget_lock_release_recursive>
 800209a:	bf00      	nop
 800209c:	200001e0 	.word	0x200001e0

080020a0 <std>:
 80020a0:	2300      	movs	r3, #0
 80020a2:	b510      	push	{r4, lr}
 80020a4:	4604      	mov	r4, r0
 80020a6:	e9c0 3300 	strd	r3, r3, [r0]
 80020aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80020ae:	6083      	str	r3, [r0, #8]
 80020b0:	8181      	strh	r1, [r0, #12]
 80020b2:	6643      	str	r3, [r0, #100]	; 0x64
 80020b4:	81c2      	strh	r2, [r0, #14]
 80020b6:	6183      	str	r3, [r0, #24]
 80020b8:	4619      	mov	r1, r3
 80020ba:	2208      	movs	r2, #8
 80020bc:	305c      	adds	r0, #92	; 0x5c
 80020be:	f000 f90d 	bl	80022dc <memset>
 80020c2:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <std+0x58>)
 80020c4:	6263      	str	r3, [r4, #36]	; 0x24
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <std+0x5c>)
 80020c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80020ca:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <std+0x60>)
 80020cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80020ce:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <std+0x64>)
 80020d0:	6323      	str	r3, [r4, #48]	; 0x30
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <std+0x68>)
 80020d4:	6224      	str	r4, [r4, #32]
 80020d6:	429c      	cmp	r4, r3
 80020d8:	d006      	beq.n	80020e8 <std+0x48>
 80020da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80020de:	4294      	cmp	r4, r2
 80020e0:	d002      	beq.n	80020e8 <std+0x48>
 80020e2:	33d0      	adds	r3, #208	; 0xd0
 80020e4:	429c      	cmp	r4, r3
 80020e6:	d105      	bne.n	80020f4 <std+0x54>
 80020e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80020ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020f0:	f000 b936 	b.w	8002360 <__retarget_lock_init_recursive>
 80020f4:	bd10      	pop	{r4, pc}
 80020f6:	bf00      	nop
 80020f8:	0800256d 	.word	0x0800256d
 80020fc:	0800258f 	.word	0x0800258f
 8002100:	080025c7 	.word	0x080025c7
 8002104:	080025eb 	.word	0x080025eb
 8002108:	200000a4 	.word	0x200000a4

0800210c <stdio_exit_handler>:
 800210c:	4a02      	ldr	r2, [pc, #8]	; (8002118 <stdio_exit_handler+0xc>)
 800210e:	4903      	ldr	r1, [pc, #12]	; (800211c <stdio_exit_handler+0x10>)
 8002110:	4803      	ldr	r0, [pc, #12]	; (8002120 <stdio_exit_handler+0x14>)
 8002112:	f000 b869 	b.w	80021e8 <_fwalk_sglue>
 8002116:	bf00      	nop
 8002118:	2000001c 	.word	0x2000001c
 800211c:	0800251d 	.word	0x0800251d
 8002120:	20000028 	.word	0x20000028

08002124 <cleanup_stdio>:
 8002124:	6841      	ldr	r1, [r0, #4]
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <cleanup_stdio+0x34>)
 8002128:	4299      	cmp	r1, r3
 800212a:	b510      	push	{r4, lr}
 800212c:	4604      	mov	r4, r0
 800212e:	d001      	beq.n	8002134 <cleanup_stdio+0x10>
 8002130:	f000 f9f4 	bl	800251c <_fflush_r>
 8002134:	68a1      	ldr	r1, [r4, #8]
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <cleanup_stdio+0x38>)
 8002138:	4299      	cmp	r1, r3
 800213a:	d002      	beq.n	8002142 <cleanup_stdio+0x1e>
 800213c:	4620      	mov	r0, r4
 800213e:	f000 f9ed 	bl	800251c <_fflush_r>
 8002142:	68e1      	ldr	r1, [r4, #12]
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <cleanup_stdio+0x3c>)
 8002146:	4299      	cmp	r1, r3
 8002148:	d004      	beq.n	8002154 <cleanup_stdio+0x30>
 800214a:	4620      	mov	r0, r4
 800214c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002150:	f000 b9e4 	b.w	800251c <_fflush_r>
 8002154:	bd10      	pop	{r4, pc}
 8002156:	bf00      	nop
 8002158:	200000a4 	.word	0x200000a4
 800215c:	2000010c 	.word	0x2000010c
 8002160:	20000174 	.word	0x20000174

08002164 <global_stdio_init.part.0>:
 8002164:	b510      	push	{r4, lr}
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <global_stdio_init.part.0+0x30>)
 8002168:	4c0b      	ldr	r4, [pc, #44]	; (8002198 <global_stdio_init.part.0+0x34>)
 800216a:	4a0c      	ldr	r2, [pc, #48]	; (800219c <global_stdio_init.part.0+0x38>)
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	4620      	mov	r0, r4
 8002170:	2200      	movs	r2, #0
 8002172:	2104      	movs	r1, #4
 8002174:	f7ff ff94 	bl	80020a0 <std>
 8002178:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800217c:	2201      	movs	r2, #1
 800217e:	2109      	movs	r1, #9
 8002180:	f7ff ff8e 	bl	80020a0 <std>
 8002184:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002188:	2202      	movs	r2, #2
 800218a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800218e:	2112      	movs	r1, #18
 8002190:	f7ff bf86 	b.w	80020a0 <std>
 8002194:	200001dc 	.word	0x200001dc
 8002198:	200000a4 	.word	0x200000a4
 800219c:	0800210d 	.word	0x0800210d

080021a0 <__sfp_lock_acquire>:
 80021a0:	4801      	ldr	r0, [pc, #4]	; (80021a8 <__sfp_lock_acquire+0x8>)
 80021a2:	f000 b8de 	b.w	8002362 <__retarget_lock_acquire_recursive>
 80021a6:	bf00      	nop
 80021a8:	200001e1 	.word	0x200001e1

080021ac <__sfp_lock_release>:
 80021ac:	4801      	ldr	r0, [pc, #4]	; (80021b4 <__sfp_lock_release+0x8>)
 80021ae:	f000 b8d9 	b.w	8002364 <__retarget_lock_release_recursive>
 80021b2:	bf00      	nop
 80021b4:	200001e1 	.word	0x200001e1

080021b8 <__sinit>:
 80021b8:	b510      	push	{r4, lr}
 80021ba:	4604      	mov	r4, r0
 80021bc:	f7ff fff0 	bl	80021a0 <__sfp_lock_acquire>
 80021c0:	6a23      	ldr	r3, [r4, #32]
 80021c2:	b11b      	cbz	r3, 80021cc <__sinit+0x14>
 80021c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021c8:	f7ff bff0 	b.w	80021ac <__sfp_lock_release>
 80021cc:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <__sinit+0x28>)
 80021ce:	6223      	str	r3, [r4, #32]
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <__sinit+0x2c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f5      	bne.n	80021c4 <__sinit+0xc>
 80021d8:	f7ff ffc4 	bl	8002164 <global_stdio_init.part.0>
 80021dc:	e7f2      	b.n	80021c4 <__sinit+0xc>
 80021de:	bf00      	nop
 80021e0:	08002125 	.word	0x08002125
 80021e4:	200001dc 	.word	0x200001dc

080021e8 <_fwalk_sglue>:
 80021e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021ec:	4607      	mov	r7, r0
 80021ee:	4688      	mov	r8, r1
 80021f0:	4614      	mov	r4, r2
 80021f2:	2600      	movs	r6, #0
 80021f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80021f8:	f1b9 0901 	subs.w	r9, r9, #1
 80021fc:	d505      	bpl.n	800220a <_fwalk_sglue+0x22>
 80021fe:	6824      	ldr	r4, [r4, #0]
 8002200:	2c00      	cmp	r4, #0
 8002202:	d1f7      	bne.n	80021f4 <_fwalk_sglue+0xc>
 8002204:	4630      	mov	r0, r6
 8002206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800220a:	89ab      	ldrh	r3, [r5, #12]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d907      	bls.n	8002220 <_fwalk_sglue+0x38>
 8002210:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002214:	3301      	adds	r3, #1
 8002216:	d003      	beq.n	8002220 <_fwalk_sglue+0x38>
 8002218:	4629      	mov	r1, r5
 800221a:	4638      	mov	r0, r7
 800221c:	47c0      	blx	r8
 800221e:	4306      	orrs	r6, r0
 8002220:	3568      	adds	r5, #104	; 0x68
 8002222:	e7e9      	b.n	80021f8 <_fwalk_sglue+0x10>

08002224 <_puts_r>:
 8002224:	6a03      	ldr	r3, [r0, #32]
 8002226:	b570      	push	{r4, r5, r6, lr}
 8002228:	6884      	ldr	r4, [r0, #8]
 800222a:	4605      	mov	r5, r0
 800222c:	460e      	mov	r6, r1
 800222e:	b90b      	cbnz	r3, 8002234 <_puts_r+0x10>
 8002230:	f7ff ffc2 	bl	80021b8 <__sinit>
 8002234:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002236:	07db      	lsls	r3, r3, #31
 8002238:	d405      	bmi.n	8002246 <_puts_r+0x22>
 800223a:	89a3      	ldrh	r3, [r4, #12]
 800223c:	0598      	lsls	r0, r3, #22
 800223e:	d402      	bmi.n	8002246 <_puts_r+0x22>
 8002240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002242:	f000 f88e 	bl	8002362 <__retarget_lock_acquire_recursive>
 8002246:	89a3      	ldrh	r3, [r4, #12]
 8002248:	0719      	lsls	r1, r3, #28
 800224a:	d513      	bpl.n	8002274 <_puts_r+0x50>
 800224c:	6923      	ldr	r3, [r4, #16]
 800224e:	b18b      	cbz	r3, 8002274 <_puts_r+0x50>
 8002250:	3e01      	subs	r6, #1
 8002252:	68a3      	ldr	r3, [r4, #8]
 8002254:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002258:	3b01      	subs	r3, #1
 800225a:	60a3      	str	r3, [r4, #8]
 800225c:	b9e9      	cbnz	r1, 800229a <_puts_r+0x76>
 800225e:	2b00      	cmp	r3, #0
 8002260:	da2e      	bge.n	80022c0 <_puts_r+0x9c>
 8002262:	4622      	mov	r2, r4
 8002264:	210a      	movs	r1, #10
 8002266:	4628      	mov	r0, r5
 8002268:	f000 f9c3 	bl	80025f2 <__swbuf_r>
 800226c:	3001      	adds	r0, #1
 800226e:	d007      	beq.n	8002280 <_puts_r+0x5c>
 8002270:	250a      	movs	r5, #10
 8002272:	e007      	b.n	8002284 <_puts_r+0x60>
 8002274:	4621      	mov	r1, r4
 8002276:	4628      	mov	r0, r5
 8002278:	f000 f9f8 	bl	800266c <__swsetup_r>
 800227c:	2800      	cmp	r0, #0
 800227e:	d0e7      	beq.n	8002250 <_puts_r+0x2c>
 8002280:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002284:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002286:	07da      	lsls	r2, r3, #31
 8002288:	d405      	bmi.n	8002296 <_puts_r+0x72>
 800228a:	89a3      	ldrh	r3, [r4, #12]
 800228c:	059b      	lsls	r3, r3, #22
 800228e:	d402      	bmi.n	8002296 <_puts_r+0x72>
 8002290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002292:	f000 f867 	bl	8002364 <__retarget_lock_release_recursive>
 8002296:	4628      	mov	r0, r5
 8002298:	bd70      	pop	{r4, r5, r6, pc}
 800229a:	2b00      	cmp	r3, #0
 800229c:	da04      	bge.n	80022a8 <_puts_r+0x84>
 800229e:	69a2      	ldr	r2, [r4, #24]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	dc06      	bgt.n	80022b2 <_puts_r+0x8e>
 80022a4:	290a      	cmp	r1, #10
 80022a6:	d004      	beq.n	80022b2 <_puts_r+0x8e>
 80022a8:	6823      	ldr	r3, [r4, #0]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	6022      	str	r2, [r4, #0]
 80022ae:	7019      	strb	r1, [r3, #0]
 80022b0:	e7cf      	b.n	8002252 <_puts_r+0x2e>
 80022b2:	4622      	mov	r2, r4
 80022b4:	4628      	mov	r0, r5
 80022b6:	f000 f99c 	bl	80025f2 <__swbuf_r>
 80022ba:	3001      	adds	r0, #1
 80022bc:	d1c9      	bne.n	8002252 <_puts_r+0x2e>
 80022be:	e7df      	b.n	8002280 <_puts_r+0x5c>
 80022c0:	6823      	ldr	r3, [r4, #0]
 80022c2:	250a      	movs	r5, #10
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	6022      	str	r2, [r4, #0]
 80022c8:	701d      	strb	r5, [r3, #0]
 80022ca:	e7db      	b.n	8002284 <_puts_r+0x60>

080022cc <puts>:
 80022cc:	4b02      	ldr	r3, [pc, #8]	; (80022d8 <puts+0xc>)
 80022ce:	4601      	mov	r1, r0
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	f7ff bfa7 	b.w	8002224 <_puts_r>
 80022d6:	bf00      	nop
 80022d8:	20000074 	.word	0x20000074

080022dc <memset>:
 80022dc:	4402      	add	r2, r0
 80022de:	4603      	mov	r3, r0
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d100      	bne.n	80022e6 <memset+0xa>
 80022e4:	4770      	bx	lr
 80022e6:	f803 1b01 	strb.w	r1, [r3], #1
 80022ea:	e7f9      	b.n	80022e0 <memset+0x4>

080022ec <_sbrk_r>:
 80022ec:	b538      	push	{r3, r4, r5, lr}
 80022ee:	4d06      	ldr	r5, [pc, #24]	; (8002308 <_sbrk_r+0x1c>)
 80022f0:	2300      	movs	r3, #0
 80022f2:	4604      	mov	r4, r0
 80022f4:	4608      	mov	r0, r1
 80022f6:	602b      	str	r3, [r5, #0]
 80022f8:	f7fe fdc2 	bl	8000e80 <_sbrk>
 80022fc:	1c43      	adds	r3, r0, #1
 80022fe:	d102      	bne.n	8002306 <_sbrk_r+0x1a>
 8002300:	682b      	ldr	r3, [r5, #0]
 8002302:	b103      	cbz	r3, 8002306 <_sbrk_r+0x1a>
 8002304:	6023      	str	r3, [r4, #0]
 8002306:	bd38      	pop	{r3, r4, r5, pc}
 8002308:	200001e4 	.word	0x200001e4

0800230c <__errno>:
 800230c:	4b01      	ldr	r3, [pc, #4]	; (8002314 <__errno+0x8>)
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000074 	.word	0x20000074

08002318 <__libc_init_array>:
 8002318:	b570      	push	{r4, r5, r6, lr}
 800231a:	4d0d      	ldr	r5, [pc, #52]	; (8002350 <__libc_init_array+0x38>)
 800231c:	4c0d      	ldr	r4, [pc, #52]	; (8002354 <__libc_init_array+0x3c>)
 800231e:	1b64      	subs	r4, r4, r5
 8002320:	10a4      	asrs	r4, r4, #2
 8002322:	2600      	movs	r6, #0
 8002324:	42a6      	cmp	r6, r4
 8002326:	d109      	bne.n	800233c <__libc_init_array+0x24>
 8002328:	4d0b      	ldr	r5, [pc, #44]	; (8002358 <__libc_init_array+0x40>)
 800232a:	4c0c      	ldr	r4, [pc, #48]	; (800235c <__libc_init_array+0x44>)
 800232c:	f000 fac0 	bl	80028b0 <_init>
 8002330:	1b64      	subs	r4, r4, r5
 8002332:	10a4      	asrs	r4, r4, #2
 8002334:	2600      	movs	r6, #0
 8002336:	42a6      	cmp	r6, r4
 8002338:	d105      	bne.n	8002346 <__libc_init_array+0x2e>
 800233a:	bd70      	pop	{r4, r5, r6, pc}
 800233c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002340:	4798      	blx	r3
 8002342:	3601      	adds	r6, #1
 8002344:	e7ee      	b.n	8002324 <__libc_init_array+0xc>
 8002346:	f855 3b04 	ldr.w	r3, [r5], #4
 800234a:	4798      	blx	r3
 800234c:	3601      	adds	r6, #1
 800234e:	e7f2      	b.n	8002336 <__libc_init_array+0x1e>
 8002350:	080029b8 	.word	0x080029b8
 8002354:	080029b8 	.word	0x080029b8
 8002358:	080029b8 	.word	0x080029b8
 800235c:	080029bc 	.word	0x080029bc

08002360 <__retarget_lock_init_recursive>:
 8002360:	4770      	bx	lr

08002362 <__retarget_lock_acquire_recursive>:
 8002362:	4770      	bx	lr

08002364 <__retarget_lock_release_recursive>:
 8002364:	4770      	bx	lr

08002366 <strcpy>:
 8002366:	4603      	mov	r3, r0
 8002368:	f811 2b01 	ldrb.w	r2, [r1], #1
 800236c:	f803 2b01 	strb.w	r2, [r3], #1
 8002370:	2a00      	cmp	r2, #0
 8002372:	d1f9      	bne.n	8002368 <strcpy+0x2>
 8002374:	4770      	bx	lr
	...

08002378 <_free_r>:
 8002378:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800237a:	2900      	cmp	r1, #0
 800237c:	d044      	beq.n	8002408 <_free_r+0x90>
 800237e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002382:	9001      	str	r0, [sp, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	f1a1 0404 	sub.w	r4, r1, #4
 800238a:	bfb8      	it	lt
 800238c:	18e4      	addlt	r4, r4, r3
 800238e:	f7ff fe7b 	bl	8002088 <__malloc_lock>
 8002392:	4a1e      	ldr	r2, [pc, #120]	; (800240c <_free_r+0x94>)
 8002394:	9801      	ldr	r0, [sp, #4]
 8002396:	6813      	ldr	r3, [r2, #0]
 8002398:	b933      	cbnz	r3, 80023a8 <_free_r+0x30>
 800239a:	6063      	str	r3, [r4, #4]
 800239c:	6014      	str	r4, [r2, #0]
 800239e:	b003      	add	sp, #12
 80023a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80023a4:	f7ff be76 	b.w	8002094 <__malloc_unlock>
 80023a8:	42a3      	cmp	r3, r4
 80023aa:	d908      	bls.n	80023be <_free_r+0x46>
 80023ac:	6825      	ldr	r5, [r4, #0]
 80023ae:	1961      	adds	r1, r4, r5
 80023b0:	428b      	cmp	r3, r1
 80023b2:	bf01      	itttt	eq
 80023b4:	6819      	ldreq	r1, [r3, #0]
 80023b6:	685b      	ldreq	r3, [r3, #4]
 80023b8:	1949      	addeq	r1, r1, r5
 80023ba:	6021      	streq	r1, [r4, #0]
 80023bc:	e7ed      	b.n	800239a <_free_r+0x22>
 80023be:	461a      	mov	r2, r3
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	b10b      	cbz	r3, 80023c8 <_free_r+0x50>
 80023c4:	42a3      	cmp	r3, r4
 80023c6:	d9fa      	bls.n	80023be <_free_r+0x46>
 80023c8:	6811      	ldr	r1, [r2, #0]
 80023ca:	1855      	adds	r5, r2, r1
 80023cc:	42a5      	cmp	r5, r4
 80023ce:	d10b      	bne.n	80023e8 <_free_r+0x70>
 80023d0:	6824      	ldr	r4, [r4, #0]
 80023d2:	4421      	add	r1, r4
 80023d4:	1854      	adds	r4, r2, r1
 80023d6:	42a3      	cmp	r3, r4
 80023d8:	6011      	str	r1, [r2, #0]
 80023da:	d1e0      	bne.n	800239e <_free_r+0x26>
 80023dc:	681c      	ldr	r4, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	6053      	str	r3, [r2, #4]
 80023e2:	440c      	add	r4, r1
 80023e4:	6014      	str	r4, [r2, #0]
 80023e6:	e7da      	b.n	800239e <_free_r+0x26>
 80023e8:	d902      	bls.n	80023f0 <_free_r+0x78>
 80023ea:	230c      	movs	r3, #12
 80023ec:	6003      	str	r3, [r0, #0]
 80023ee:	e7d6      	b.n	800239e <_free_r+0x26>
 80023f0:	6825      	ldr	r5, [r4, #0]
 80023f2:	1961      	adds	r1, r4, r5
 80023f4:	428b      	cmp	r3, r1
 80023f6:	bf04      	itt	eq
 80023f8:	6819      	ldreq	r1, [r3, #0]
 80023fa:	685b      	ldreq	r3, [r3, #4]
 80023fc:	6063      	str	r3, [r4, #4]
 80023fe:	bf04      	itt	eq
 8002400:	1949      	addeq	r1, r1, r5
 8002402:	6021      	streq	r1, [r4, #0]
 8002404:	6054      	str	r4, [r2, #4]
 8002406:	e7ca      	b.n	800239e <_free_r+0x26>
 8002408:	b003      	add	sp, #12
 800240a:	bd30      	pop	{r4, r5, pc}
 800240c:	2000009c 	.word	0x2000009c

08002410 <__sflush_r>:
 8002410:	898a      	ldrh	r2, [r1, #12]
 8002412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002416:	4605      	mov	r5, r0
 8002418:	0710      	lsls	r0, r2, #28
 800241a:	460c      	mov	r4, r1
 800241c:	d458      	bmi.n	80024d0 <__sflush_r+0xc0>
 800241e:	684b      	ldr	r3, [r1, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	dc05      	bgt.n	8002430 <__sflush_r+0x20>
 8002424:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002426:	2b00      	cmp	r3, #0
 8002428:	dc02      	bgt.n	8002430 <__sflush_r+0x20>
 800242a:	2000      	movs	r0, #0
 800242c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002432:	2e00      	cmp	r6, #0
 8002434:	d0f9      	beq.n	800242a <__sflush_r+0x1a>
 8002436:	2300      	movs	r3, #0
 8002438:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800243c:	682f      	ldr	r7, [r5, #0]
 800243e:	6a21      	ldr	r1, [r4, #32]
 8002440:	602b      	str	r3, [r5, #0]
 8002442:	d032      	beq.n	80024aa <__sflush_r+0x9a>
 8002444:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002446:	89a3      	ldrh	r3, [r4, #12]
 8002448:	075a      	lsls	r2, r3, #29
 800244a:	d505      	bpl.n	8002458 <__sflush_r+0x48>
 800244c:	6863      	ldr	r3, [r4, #4]
 800244e:	1ac0      	subs	r0, r0, r3
 8002450:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002452:	b10b      	cbz	r3, 8002458 <__sflush_r+0x48>
 8002454:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002456:	1ac0      	subs	r0, r0, r3
 8002458:	2300      	movs	r3, #0
 800245a:	4602      	mov	r2, r0
 800245c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800245e:	6a21      	ldr	r1, [r4, #32]
 8002460:	4628      	mov	r0, r5
 8002462:	47b0      	blx	r6
 8002464:	1c43      	adds	r3, r0, #1
 8002466:	89a3      	ldrh	r3, [r4, #12]
 8002468:	d106      	bne.n	8002478 <__sflush_r+0x68>
 800246a:	6829      	ldr	r1, [r5, #0]
 800246c:	291d      	cmp	r1, #29
 800246e:	d82b      	bhi.n	80024c8 <__sflush_r+0xb8>
 8002470:	4a29      	ldr	r2, [pc, #164]	; (8002518 <__sflush_r+0x108>)
 8002472:	410a      	asrs	r2, r1
 8002474:	07d6      	lsls	r6, r2, #31
 8002476:	d427      	bmi.n	80024c8 <__sflush_r+0xb8>
 8002478:	2200      	movs	r2, #0
 800247a:	6062      	str	r2, [r4, #4]
 800247c:	04d9      	lsls	r1, r3, #19
 800247e:	6922      	ldr	r2, [r4, #16]
 8002480:	6022      	str	r2, [r4, #0]
 8002482:	d504      	bpl.n	800248e <__sflush_r+0x7e>
 8002484:	1c42      	adds	r2, r0, #1
 8002486:	d101      	bne.n	800248c <__sflush_r+0x7c>
 8002488:	682b      	ldr	r3, [r5, #0]
 800248a:	b903      	cbnz	r3, 800248e <__sflush_r+0x7e>
 800248c:	6560      	str	r0, [r4, #84]	; 0x54
 800248e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002490:	602f      	str	r7, [r5, #0]
 8002492:	2900      	cmp	r1, #0
 8002494:	d0c9      	beq.n	800242a <__sflush_r+0x1a>
 8002496:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800249a:	4299      	cmp	r1, r3
 800249c:	d002      	beq.n	80024a4 <__sflush_r+0x94>
 800249e:	4628      	mov	r0, r5
 80024a0:	f7ff ff6a 	bl	8002378 <_free_r>
 80024a4:	2000      	movs	r0, #0
 80024a6:	6360      	str	r0, [r4, #52]	; 0x34
 80024a8:	e7c0      	b.n	800242c <__sflush_r+0x1c>
 80024aa:	2301      	movs	r3, #1
 80024ac:	4628      	mov	r0, r5
 80024ae:	47b0      	blx	r6
 80024b0:	1c41      	adds	r1, r0, #1
 80024b2:	d1c8      	bne.n	8002446 <__sflush_r+0x36>
 80024b4:	682b      	ldr	r3, [r5, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0c5      	beq.n	8002446 <__sflush_r+0x36>
 80024ba:	2b1d      	cmp	r3, #29
 80024bc:	d001      	beq.n	80024c2 <__sflush_r+0xb2>
 80024be:	2b16      	cmp	r3, #22
 80024c0:	d101      	bne.n	80024c6 <__sflush_r+0xb6>
 80024c2:	602f      	str	r7, [r5, #0]
 80024c4:	e7b1      	b.n	800242a <__sflush_r+0x1a>
 80024c6:	89a3      	ldrh	r3, [r4, #12]
 80024c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024cc:	81a3      	strh	r3, [r4, #12]
 80024ce:	e7ad      	b.n	800242c <__sflush_r+0x1c>
 80024d0:	690f      	ldr	r7, [r1, #16]
 80024d2:	2f00      	cmp	r7, #0
 80024d4:	d0a9      	beq.n	800242a <__sflush_r+0x1a>
 80024d6:	0793      	lsls	r3, r2, #30
 80024d8:	680e      	ldr	r6, [r1, #0]
 80024da:	bf08      	it	eq
 80024dc:	694b      	ldreq	r3, [r1, #20]
 80024de:	600f      	str	r7, [r1, #0]
 80024e0:	bf18      	it	ne
 80024e2:	2300      	movne	r3, #0
 80024e4:	eba6 0807 	sub.w	r8, r6, r7
 80024e8:	608b      	str	r3, [r1, #8]
 80024ea:	f1b8 0f00 	cmp.w	r8, #0
 80024ee:	dd9c      	ble.n	800242a <__sflush_r+0x1a>
 80024f0:	6a21      	ldr	r1, [r4, #32]
 80024f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80024f4:	4643      	mov	r3, r8
 80024f6:	463a      	mov	r2, r7
 80024f8:	4628      	mov	r0, r5
 80024fa:	47b0      	blx	r6
 80024fc:	2800      	cmp	r0, #0
 80024fe:	dc06      	bgt.n	800250e <__sflush_r+0xfe>
 8002500:	89a3      	ldrh	r3, [r4, #12]
 8002502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002506:	81a3      	strh	r3, [r4, #12]
 8002508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800250c:	e78e      	b.n	800242c <__sflush_r+0x1c>
 800250e:	4407      	add	r7, r0
 8002510:	eba8 0800 	sub.w	r8, r8, r0
 8002514:	e7e9      	b.n	80024ea <__sflush_r+0xda>
 8002516:	bf00      	nop
 8002518:	dfbffffe 	.word	0xdfbffffe

0800251c <_fflush_r>:
 800251c:	b538      	push	{r3, r4, r5, lr}
 800251e:	690b      	ldr	r3, [r1, #16]
 8002520:	4605      	mov	r5, r0
 8002522:	460c      	mov	r4, r1
 8002524:	b913      	cbnz	r3, 800252c <_fflush_r+0x10>
 8002526:	2500      	movs	r5, #0
 8002528:	4628      	mov	r0, r5
 800252a:	bd38      	pop	{r3, r4, r5, pc}
 800252c:	b118      	cbz	r0, 8002536 <_fflush_r+0x1a>
 800252e:	6a03      	ldr	r3, [r0, #32]
 8002530:	b90b      	cbnz	r3, 8002536 <_fflush_r+0x1a>
 8002532:	f7ff fe41 	bl	80021b8 <__sinit>
 8002536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f3      	beq.n	8002526 <_fflush_r+0xa>
 800253e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002540:	07d0      	lsls	r0, r2, #31
 8002542:	d404      	bmi.n	800254e <_fflush_r+0x32>
 8002544:	0599      	lsls	r1, r3, #22
 8002546:	d402      	bmi.n	800254e <_fflush_r+0x32>
 8002548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800254a:	f7ff ff0a 	bl	8002362 <__retarget_lock_acquire_recursive>
 800254e:	4628      	mov	r0, r5
 8002550:	4621      	mov	r1, r4
 8002552:	f7ff ff5d 	bl	8002410 <__sflush_r>
 8002556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002558:	07da      	lsls	r2, r3, #31
 800255a:	4605      	mov	r5, r0
 800255c:	d4e4      	bmi.n	8002528 <_fflush_r+0xc>
 800255e:	89a3      	ldrh	r3, [r4, #12]
 8002560:	059b      	lsls	r3, r3, #22
 8002562:	d4e1      	bmi.n	8002528 <_fflush_r+0xc>
 8002564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002566:	f7ff fefd 	bl	8002364 <__retarget_lock_release_recursive>
 800256a:	e7dd      	b.n	8002528 <_fflush_r+0xc>

0800256c <__sread>:
 800256c:	b510      	push	{r4, lr}
 800256e:	460c      	mov	r4, r1
 8002570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002574:	f000 f978 	bl	8002868 <_read_r>
 8002578:	2800      	cmp	r0, #0
 800257a:	bfab      	itete	ge
 800257c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800257e:	89a3      	ldrhlt	r3, [r4, #12]
 8002580:	181b      	addge	r3, r3, r0
 8002582:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002586:	bfac      	ite	ge
 8002588:	6563      	strge	r3, [r4, #84]	; 0x54
 800258a:	81a3      	strhlt	r3, [r4, #12]
 800258c:	bd10      	pop	{r4, pc}

0800258e <__swrite>:
 800258e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002592:	461f      	mov	r7, r3
 8002594:	898b      	ldrh	r3, [r1, #12]
 8002596:	05db      	lsls	r3, r3, #23
 8002598:	4605      	mov	r5, r0
 800259a:	460c      	mov	r4, r1
 800259c:	4616      	mov	r6, r2
 800259e:	d505      	bpl.n	80025ac <__swrite+0x1e>
 80025a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025a4:	2302      	movs	r3, #2
 80025a6:	2200      	movs	r2, #0
 80025a8:	f000 f94c 	bl	8002844 <_lseek_r>
 80025ac:	89a3      	ldrh	r3, [r4, #12]
 80025ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025b6:	81a3      	strh	r3, [r4, #12]
 80025b8:	4632      	mov	r2, r6
 80025ba:	463b      	mov	r3, r7
 80025bc:	4628      	mov	r0, r5
 80025be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025c2:	f000 b963 	b.w	800288c <_write_r>

080025c6 <__sseek>:
 80025c6:	b510      	push	{r4, lr}
 80025c8:	460c      	mov	r4, r1
 80025ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025ce:	f000 f939 	bl	8002844 <_lseek_r>
 80025d2:	1c43      	adds	r3, r0, #1
 80025d4:	89a3      	ldrh	r3, [r4, #12]
 80025d6:	bf15      	itete	ne
 80025d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80025da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80025de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80025e2:	81a3      	strheq	r3, [r4, #12]
 80025e4:	bf18      	it	ne
 80025e6:	81a3      	strhne	r3, [r4, #12]
 80025e8:	bd10      	pop	{r4, pc}

080025ea <__sclose>:
 80025ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025ee:	f000 b8f7 	b.w	80027e0 <_close_r>

080025f2 <__swbuf_r>:
 80025f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f4:	460e      	mov	r6, r1
 80025f6:	4614      	mov	r4, r2
 80025f8:	4605      	mov	r5, r0
 80025fa:	b118      	cbz	r0, 8002604 <__swbuf_r+0x12>
 80025fc:	6a03      	ldr	r3, [r0, #32]
 80025fe:	b90b      	cbnz	r3, 8002604 <__swbuf_r+0x12>
 8002600:	f7ff fdda 	bl	80021b8 <__sinit>
 8002604:	69a3      	ldr	r3, [r4, #24]
 8002606:	60a3      	str	r3, [r4, #8]
 8002608:	89a3      	ldrh	r3, [r4, #12]
 800260a:	071a      	lsls	r2, r3, #28
 800260c:	d525      	bpl.n	800265a <__swbuf_r+0x68>
 800260e:	6923      	ldr	r3, [r4, #16]
 8002610:	b31b      	cbz	r3, 800265a <__swbuf_r+0x68>
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	6922      	ldr	r2, [r4, #16]
 8002616:	1a98      	subs	r0, r3, r2
 8002618:	6963      	ldr	r3, [r4, #20]
 800261a:	b2f6      	uxtb	r6, r6
 800261c:	4283      	cmp	r3, r0
 800261e:	4637      	mov	r7, r6
 8002620:	dc04      	bgt.n	800262c <__swbuf_r+0x3a>
 8002622:	4621      	mov	r1, r4
 8002624:	4628      	mov	r0, r5
 8002626:	f7ff ff79 	bl	800251c <_fflush_r>
 800262a:	b9e0      	cbnz	r0, 8002666 <__swbuf_r+0x74>
 800262c:	68a3      	ldr	r3, [r4, #8]
 800262e:	3b01      	subs	r3, #1
 8002630:	60a3      	str	r3, [r4, #8]
 8002632:	6823      	ldr	r3, [r4, #0]
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	6022      	str	r2, [r4, #0]
 8002638:	701e      	strb	r6, [r3, #0]
 800263a:	6962      	ldr	r2, [r4, #20]
 800263c:	1c43      	adds	r3, r0, #1
 800263e:	429a      	cmp	r2, r3
 8002640:	d004      	beq.n	800264c <__swbuf_r+0x5a>
 8002642:	89a3      	ldrh	r3, [r4, #12]
 8002644:	07db      	lsls	r3, r3, #31
 8002646:	d506      	bpl.n	8002656 <__swbuf_r+0x64>
 8002648:	2e0a      	cmp	r6, #10
 800264a:	d104      	bne.n	8002656 <__swbuf_r+0x64>
 800264c:	4621      	mov	r1, r4
 800264e:	4628      	mov	r0, r5
 8002650:	f7ff ff64 	bl	800251c <_fflush_r>
 8002654:	b938      	cbnz	r0, 8002666 <__swbuf_r+0x74>
 8002656:	4638      	mov	r0, r7
 8002658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800265a:	4621      	mov	r1, r4
 800265c:	4628      	mov	r0, r5
 800265e:	f000 f805 	bl	800266c <__swsetup_r>
 8002662:	2800      	cmp	r0, #0
 8002664:	d0d5      	beq.n	8002612 <__swbuf_r+0x20>
 8002666:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800266a:	e7f4      	b.n	8002656 <__swbuf_r+0x64>

0800266c <__swsetup_r>:
 800266c:	b538      	push	{r3, r4, r5, lr}
 800266e:	4b2a      	ldr	r3, [pc, #168]	; (8002718 <__swsetup_r+0xac>)
 8002670:	4605      	mov	r5, r0
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	460c      	mov	r4, r1
 8002676:	b118      	cbz	r0, 8002680 <__swsetup_r+0x14>
 8002678:	6a03      	ldr	r3, [r0, #32]
 800267a:	b90b      	cbnz	r3, 8002680 <__swsetup_r+0x14>
 800267c:	f7ff fd9c 	bl	80021b8 <__sinit>
 8002680:	89a3      	ldrh	r3, [r4, #12]
 8002682:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002686:	0718      	lsls	r0, r3, #28
 8002688:	d422      	bmi.n	80026d0 <__swsetup_r+0x64>
 800268a:	06d9      	lsls	r1, r3, #27
 800268c:	d407      	bmi.n	800269e <__swsetup_r+0x32>
 800268e:	2309      	movs	r3, #9
 8002690:	602b      	str	r3, [r5, #0]
 8002692:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002696:	81a3      	strh	r3, [r4, #12]
 8002698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800269c:	e034      	b.n	8002708 <__swsetup_r+0x9c>
 800269e:	0758      	lsls	r0, r3, #29
 80026a0:	d512      	bpl.n	80026c8 <__swsetup_r+0x5c>
 80026a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026a4:	b141      	cbz	r1, 80026b8 <__swsetup_r+0x4c>
 80026a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80026aa:	4299      	cmp	r1, r3
 80026ac:	d002      	beq.n	80026b4 <__swsetup_r+0x48>
 80026ae:	4628      	mov	r0, r5
 80026b0:	f7ff fe62 	bl	8002378 <_free_r>
 80026b4:	2300      	movs	r3, #0
 80026b6:	6363      	str	r3, [r4, #52]	; 0x34
 80026b8:	89a3      	ldrh	r3, [r4, #12]
 80026ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80026be:	81a3      	strh	r3, [r4, #12]
 80026c0:	2300      	movs	r3, #0
 80026c2:	6063      	str	r3, [r4, #4]
 80026c4:	6923      	ldr	r3, [r4, #16]
 80026c6:	6023      	str	r3, [r4, #0]
 80026c8:	89a3      	ldrh	r3, [r4, #12]
 80026ca:	f043 0308 	orr.w	r3, r3, #8
 80026ce:	81a3      	strh	r3, [r4, #12]
 80026d0:	6923      	ldr	r3, [r4, #16]
 80026d2:	b94b      	cbnz	r3, 80026e8 <__swsetup_r+0x7c>
 80026d4:	89a3      	ldrh	r3, [r4, #12]
 80026d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80026da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026de:	d003      	beq.n	80026e8 <__swsetup_r+0x7c>
 80026e0:	4621      	mov	r1, r4
 80026e2:	4628      	mov	r0, r5
 80026e4:	f000 f840 	bl	8002768 <__smakebuf_r>
 80026e8:	89a0      	ldrh	r0, [r4, #12]
 80026ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80026ee:	f010 0301 	ands.w	r3, r0, #1
 80026f2:	d00a      	beq.n	800270a <__swsetup_r+0x9e>
 80026f4:	2300      	movs	r3, #0
 80026f6:	60a3      	str	r3, [r4, #8]
 80026f8:	6963      	ldr	r3, [r4, #20]
 80026fa:	425b      	negs	r3, r3
 80026fc:	61a3      	str	r3, [r4, #24]
 80026fe:	6923      	ldr	r3, [r4, #16]
 8002700:	b943      	cbnz	r3, 8002714 <__swsetup_r+0xa8>
 8002702:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002706:	d1c4      	bne.n	8002692 <__swsetup_r+0x26>
 8002708:	bd38      	pop	{r3, r4, r5, pc}
 800270a:	0781      	lsls	r1, r0, #30
 800270c:	bf58      	it	pl
 800270e:	6963      	ldrpl	r3, [r4, #20]
 8002710:	60a3      	str	r3, [r4, #8]
 8002712:	e7f4      	b.n	80026fe <__swsetup_r+0x92>
 8002714:	2000      	movs	r0, #0
 8002716:	e7f7      	b.n	8002708 <__swsetup_r+0x9c>
 8002718:	20000074 	.word	0x20000074

0800271c <__swhatbuf_r>:
 800271c:	b570      	push	{r4, r5, r6, lr}
 800271e:	460c      	mov	r4, r1
 8002720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002724:	2900      	cmp	r1, #0
 8002726:	b096      	sub	sp, #88	; 0x58
 8002728:	4615      	mov	r5, r2
 800272a:	461e      	mov	r6, r3
 800272c:	da0d      	bge.n	800274a <__swhatbuf_r+0x2e>
 800272e:	89a3      	ldrh	r3, [r4, #12]
 8002730:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002734:	f04f 0100 	mov.w	r1, #0
 8002738:	bf0c      	ite	eq
 800273a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800273e:	2340      	movne	r3, #64	; 0x40
 8002740:	2000      	movs	r0, #0
 8002742:	6031      	str	r1, [r6, #0]
 8002744:	602b      	str	r3, [r5, #0]
 8002746:	b016      	add	sp, #88	; 0x58
 8002748:	bd70      	pop	{r4, r5, r6, pc}
 800274a:	466a      	mov	r2, sp
 800274c:	f000 f858 	bl	8002800 <_fstat_r>
 8002750:	2800      	cmp	r0, #0
 8002752:	dbec      	blt.n	800272e <__swhatbuf_r+0x12>
 8002754:	9901      	ldr	r1, [sp, #4]
 8002756:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800275a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800275e:	4259      	negs	r1, r3
 8002760:	4159      	adcs	r1, r3
 8002762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002766:	e7eb      	b.n	8002740 <__swhatbuf_r+0x24>

08002768 <__smakebuf_r>:
 8002768:	898b      	ldrh	r3, [r1, #12]
 800276a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800276c:	079d      	lsls	r5, r3, #30
 800276e:	4606      	mov	r6, r0
 8002770:	460c      	mov	r4, r1
 8002772:	d507      	bpl.n	8002784 <__smakebuf_r+0x1c>
 8002774:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002778:	6023      	str	r3, [r4, #0]
 800277a:	6123      	str	r3, [r4, #16]
 800277c:	2301      	movs	r3, #1
 800277e:	6163      	str	r3, [r4, #20]
 8002780:	b002      	add	sp, #8
 8002782:	bd70      	pop	{r4, r5, r6, pc}
 8002784:	ab01      	add	r3, sp, #4
 8002786:	466a      	mov	r2, sp
 8002788:	f7ff ffc8 	bl	800271c <__swhatbuf_r>
 800278c:	9900      	ldr	r1, [sp, #0]
 800278e:	4605      	mov	r5, r0
 8002790:	4630      	mov	r0, r6
 8002792:	f7ff fbf9 	bl	8001f88 <_malloc_r>
 8002796:	b948      	cbnz	r0, 80027ac <__smakebuf_r+0x44>
 8002798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800279c:	059a      	lsls	r2, r3, #22
 800279e:	d4ef      	bmi.n	8002780 <__smakebuf_r+0x18>
 80027a0:	f023 0303 	bic.w	r3, r3, #3
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	81a3      	strh	r3, [r4, #12]
 80027aa:	e7e3      	b.n	8002774 <__smakebuf_r+0xc>
 80027ac:	89a3      	ldrh	r3, [r4, #12]
 80027ae:	6020      	str	r0, [r4, #0]
 80027b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027b4:	81a3      	strh	r3, [r4, #12]
 80027b6:	9b00      	ldr	r3, [sp, #0]
 80027b8:	6163      	str	r3, [r4, #20]
 80027ba:	9b01      	ldr	r3, [sp, #4]
 80027bc:	6120      	str	r0, [r4, #16]
 80027be:	b15b      	cbz	r3, 80027d8 <__smakebuf_r+0x70>
 80027c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027c4:	4630      	mov	r0, r6
 80027c6:	f000 f82d 	bl	8002824 <_isatty_r>
 80027ca:	b128      	cbz	r0, 80027d8 <__smakebuf_r+0x70>
 80027cc:	89a3      	ldrh	r3, [r4, #12]
 80027ce:	f023 0303 	bic.w	r3, r3, #3
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	81a3      	strh	r3, [r4, #12]
 80027d8:	89a3      	ldrh	r3, [r4, #12]
 80027da:	431d      	orrs	r5, r3
 80027dc:	81a5      	strh	r5, [r4, #12]
 80027de:	e7cf      	b.n	8002780 <__smakebuf_r+0x18>

080027e0 <_close_r>:
 80027e0:	b538      	push	{r3, r4, r5, lr}
 80027e2:	4d06      	ldr	r5, [pc, #24]	; (80027fc <_close_r+0x1c>)
 80027e4:	2300      	movs	r3, #0
 80027e6:	4604      	mov	r4, r0
 80027e8:	4608      	mov	r0, r1
 80027ea:	602b      	str	r3, [r5, #0]
 80027ec:	f7fe fb13 	bl	8000e16 <_close>
 80027f0:	1c43      	adds	r3, r0, #1
 80027f2:	d102      	bne.n	80027fa <_close_r+0x1a>
 80027f4:	682b      	ldr	r3, [r5, #0]
 80027f6:	b103      	cbz	r3, 80027fa <_close_r+0x1a>
 80027f8:	6023      	str	r3, [r4, #0]
 80027fa:	bd38      	pop	{r3, r4, r5, pc}
 80027fc:	200001e4 	.word	0x200001e4

08002800 <_fstat_r>:
 8002800:	b538      	push	{r3, r4, r5, lr}
 8002802:	4d07      	ldr	r5, [pc, #28]	; (8002820 <_fstat_r+0x20>)
 8002804:	2300      	movs	r3, #0
 8002806:	4604      	mov	r4, r0
 8002808:	4608      	mov	r0, r1
 800280a:	4611      	mov	r1, r2
 800280c:	602b      	str	r3, [r5, #0]
 800280e:	f7fe fb0e 	bl	8000e2e <_fstat>
 8002812:	1c43      	adds	r3, r0, #1
 8002814:	d102      	bne.n	800281c <_fstat_r+0x1c>
 8002816:	682b      	ldr	r3, [r5, #0]
 8002818:	b103      	cbz	r3, 800281c <_fstat_r+0x1c>
 800281a:	6023      	str	r3, [r4, #0]
 800281c:	bd38      	pop	{r3, r4, r5, pc}
 800281e:	bf00      	nop
 8002820:	200001e4 	.word	0x200001e4

08002824 <_isatty_r>:
 8002824:	b538      	push	{r3, r4, r5, lr}
 8002826:	4d06      	ldr	r5, [pc, #24]	; (8002840 <_isatty_r+0x1c>)
 8002828:	2300      	movs	r3, #0
 800282a:	4604      	mov	r4, r0
 800282c:	4608      	mov	r0, r1
 800282e:	602b      	str	r3, [r5, #0]
 8002830:	f7fe fb0d 	bl	8000e4e <_isatty>
 8002834:	1c43      	adds	r3, r0, #1
 8002836:	d102      	bne.n	800283e <_isatty_r+0x1a>
 8002838:	682b      	ldr	r3, [r5, #0]
 800283a:	b103      	cbz	r3, 800283e <_isatty_r+0x1a>
 800283c:	6023      	str	r3, [r4, #0]
 800283e:	bd38      	pop	{r3, r4, r5, pc}
 8002840:	200001e4 	.word	0x200001e4

08002844 <_lseek_r>:
 8002844:	b538      	push	{r3, r4, r5, lr}
 8002846:	4d07      	ldr	r5, [pc, #28]	; (8002864 <_lseek_r+0x20>)
 8002848:	4604      	mov	r4, r0
 800284a:	4608      	mov	r0, r1
 800284c:	4611      	mov	r1, r2
 800284e:	2200      	movs	r2, #0
 8002850:	602a      	str	r2, [r5, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	f7fe fb06 	bl	8000e64 <_lseek>
 8002858:	1c43      	adds	r3, r0, #1
 800285a:	d102      	bne.n	8002862 <_lseek_r+0x1e>
 800285c:	682b      	ldr	r3, [r5, #0]
 800285e:	b103      	cbz	r3, 8002862 <_lseek_r+0x1e>
 8002860:	6023      	str	r3, [r4, #0]
 8002862:	bd38      	pop	{r3, r4, r5, pc}
 8002864:	200001e4 	.word	0x200001e4

08002868 <_read_r>:
 8002868:	b538      	push	{r3, r4, r5, lr}
 800286a:	4d07      	ldr	r5, [pc, #28]	; (8002888 <_read_r+0x20>)
 800286c:	4604      	mov	r4, r0
 800286e:	4608      	mov	r0, r1
 8002870:	4611      	mov	r1, r2
 8002872:	2200      	movs	r2, #0
 8002874:	602a      	str	r2, [r5, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	f7fe fa94 	bl	8000da4 <_read>
 800287c:	1c43      	adds	r3, r0, #1
 800287e:	d102      	bne.n	8002886 <_read_r+0x1e>
 8002880:	682b      	ldr	r3, [r5, #0]
 8002882:	b103      	cbz	r3, 8002886 <_read_r+0x1e>
 8002884:	6023      	str	r3, [r4, #0]
 8002886:	bd38      	pop	{r3, r4, r5, pc}
 8002888:	200001e4 	.word	0x200001e4

0800288c <_write_r>:
 800288c:	b538      	push	{r3, r4, r5, lr}
 800288e:	4d07      	ldr	r5, [pc, #28]	; (80028ac <_write_r+0x20>)
 8002890:	4604      	mov	r4, r0
 8002892:	4608      	mov	r0, r1
 8002894:	4611      	mov	r1, r2
 8002896:	2200      	movs	r2, #0
 8002898:	602a      	str	r2, [r5, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	f7fe fa9f 	bl	8000dde <_write>
 80028a0:	1c43      	adds	r3, r0, #1
 80028a2:	d102      	bne.n	80028aa <_write_r+0x1e>
 80028a4:	682b      	ldr	r3, [r5, #0]
 80028a6:	b103      	cbz	r3, 80028aa <_write_r+0x1e>
 80028a8:	6023      	str	r3, [r4, #0]
 80028aa:	bd38      	pop	{r3, r4, r5, pc}
 80028ac:	200001e4 	.word	0x200001e4

080028b0 <_init>:
 80028b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b2:	bf00      	nop
 80028b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b6:	bc08      	pop	{r3}
 80028b8:	469e      	mov	lr, r3
 80028ba:	4770      	bx	lr

080028bc <_fini>:
 80028bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028be:	bf00      	nop
 80028c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c2:	bc08      	pop	{r3}
 80028c4:	469e      	mov	lr, r3
 80028c6:	4770      	bx	lr
